# Original Author was Kalle@kde.org
# I lifted it in some mater. (Stephan Kulow)
# I used much code from Janos Farkas

dnl Process this file with autoconf to produce a configure script.

AC_INIT(acinclude.m4) dnl a source file from your sub dir

dnl This is so we can use kde-common
AC_CONFIG_AUX_DIR(admin)

dnl Perform program name transformation
AC_ARG_PROGRAM

dnl Automake doc recommends to do this only here. (Janos)
AM_INIT_AUTOMAKE(copasi,0.1)

dnl make /usr/local the default for the installation
AC_PREFIX_DEFAULT(/usr/local)

AC_ARG_ENABLE([debug],
  AS_HELP_STRING([--enable-debug],
                 [enable debug build (default: enabled)]),
  [ENABLE_DEBUG=$enable_debug],
  [ENABLE_DEBUG="no"])

AC_ARG_ENABLE([release],
  AS_HELP_STRING([--enable-release],
                 [enable release build (disables debug, default: disabled)]),
  [ENABLE_RELEASE=$enable_release],
  [ENABLE_RELEASE="no"])
  
AC_ARG_ENABLE([static],
  AS_HELP_STRING([--enable-static],
                 [enable static linkage (default: disabled)]),
  [ENABLE_STATIC=$enable_static],
  [ENABLE_STATIC="no"])
  
AC_ARG_WITH([expat],
  AC_HELP_STRING([--with-expat=PATH],
                 [Path to Expat XML Library ]),
  [EXPAT_PATH=$withval])

AC_ARG_WITH([sbml],
  AS_HELP_STRING([--with-sbml=PATH],
                 [Path to SBML Library ]),
  [SBML_PATH=$withval])

dnl LAPACK library alternatives
AC_ARG_WITH([clapack],
  AS_HELP_STRING([--with-clapack=PATH],
                 [Path to CLAPACK Library ]),
  [CLAPACK_PATH=$withval])

AC_ARG_WITH([lapack],
  AS_HELP_STRING([--with-lapack=PATH],
                 [Path to LAPACK Library ]),
  [LAPACK_PATH=$withval])

AC_ARG_WITH([mkl],
  AS_HELP_STRING([--with-mkl=PATH],
                 [Path to MKL Library ]),
  [MKL_PATH=$withval])


AC_ARG_WITH([qwt],
  AS_HELP_STRING([--with-qwt=PATH],
                 [Path to QWT Library ]),
  [QWT_PATH=$withval])

AC_ARG_WITH([copasi-license],
  AS_HELP_STRING([--with-copasi-license],
                 [Specify whether to use the German (DE) or US (US) license.]),
  [COPASI_LICENSE=$withval])

AC_ARG_WITH([build-parser],
  AS_HELP_STRING([--with-build-parser],
                 [Specify whether to build lex and yacc sources.]),
  [BUILD_PARSER=$withval])

QMAKE_ARG=""

if test "x$prefix" = "xNONE"; then
  prefix=$ac_default_prefix
  ac_configure_args="$ac_configure_args --prefix $prefix"
fi

if test x"${COPASI_LICENSE}" = x"DE" -o x"${COPASI_LICENSE}" = x"US"; then
  QMAKE_ARG="USE_LICENSE=$COPASI_LICENSE"
fi

if test x"$BUILD_PARSER" = x"yes"; then
  QMAKE_ARG="$QMAKE_ARG BUILD_PARSER=yes"
fi

if test x"${ENABLE_RELEASE}" != x"yes" -a x"${ENABLE_DEBUG}" != x"no"; then
  QMAKE_ARG="$QMAKE_ARG CONFIG+=debug CONFIG-=release"
else
  QMAKE_ARG="$QMAKE_ARG CONFIG+=release CONFIG-=debug"
fi

if test x"${ENABLE_STATIC}" != x"yes"; then
  QMAKE_ARG="$QMAKE_ARG STATIC_LINKAGE=no"
else
  QMAKE_ARG="$QMAKE_ARG STATIC_LINKAGE=yes"
fi

dnl if test x"${enable_thread}" != x"no"; then
dnl   QMAKE_ARG="$QMAKE_ARG CONFIG+=thread"
dnl else
dnl   QMAKE_ARG="$QMAKE_ARG CONFIG-=thread"
dnl fi

if test x"${MKL_PATH}" != x""; then
  QMAKE_ARG="$QMAKE_ARG MKL_PATH=$MKL_PATH"
fi

if test x"${CLAPACK_PATH}" != x""; then
  QMAKE_ARG="$QMAKE_ARG CLAPACK_PATH=$CLAPACK_PATH"
fi

if test x"${LAPACK_PATH}" != x""; then
  QMAKE_ARG="$QMAKE_ARG LAPACK_PATH=$LAPACK_PATH"
fi

if test x"${EXPAT_PATH}" != x""; then
  QMAKE_ARG="$QMAKE_ARG EXPAT_PATH=$EXPAT_PATH"
fi

if test x"${QWT_PATH}" != x""; then
  QMAKE_ARG="$QMAKE_ARG QWT_PATH=$QWT_PATH"
fi

if test x"${SBML_PATH}" != x""; then
  QMAKE_ARG="$QMAKE_ARG SBML_PATH=$SBML_PATH"
fi


(
dnl to prevent calling aclocal, automake and configure again
 touch configure.in
 touch aclocal.m4 
 touch Makefile.in
 touch configure

 cd copasi && \
 echo executing in `pwd`: && \
 rm -f .qmake.internal.cache */.qmake.internal.cache && \
 rm -f Makefile */Makefile && \
 echo "  qmake $QMAKE_ARG" && \
 $QTDIR/bin/qmake $QMAKE_ARG && \
 cat Makefile | \
 sed -e 's/(MAKEFILE): *$/(MAKEFILE): Makefile/' \
     -e 'sxQMAKE.*=.*qmakexQMAKE = \$(QTDIR)/bin/qmakex'> $$.tmp && \
 mv $$.tmp Makefile && \
 echo depend:  >> Makefile && \
 echo "	touch Makefile" >> Makefile && \
 rm -f CopasiSE/CopasiSE.o CopasiUI/main.o && \ 
 cd ..
 cd semantic-test-suite && \
 echo executing in `pwd`: && \
 echo "  rm .qmake.internal.cache */.qmake.internal.cache" && \
 rm -f .qmake.internal.cache */.qmake.internal.cache && \
 rm -f Makefile */Makefile && \
 echo "  qmake $QMAKE_ARG" && \
 $QTDIR/bin/qmake $QMAKE_ARG && \
 cat Makefile | \
 sed -e 's/(MAKEFILE): *$/(MAKEFILE): Makefile/' \
     -e 'sxQMAKE.*=.*qmakexQMAKE = \$(QTDIR)/bin/qmakex'> $$.tmp && \
 mv $$.tmp Makefile && \
 echo depend:  >> Makefile && \
 echo "	touch Makefile" >> Makefile && \
 cd ..
 cd stochastic-testsuite && \
 echo executing in `pwd`: && \
 echo "  rm .qmake.internal.cache */.qmake.internal.cache" && \
 rm -f .qmake.internal.cache */.qmake.internal.cache && \
 rm -f Makefile */Makefile && \
 echo "  qmake $QMAKE_ARG" && \
 $QTDIR/bin/qmake $QMAKE_ARG && \
 cat Makefile | \
 sed -e 's/(MAKEFILE): *$/(MAKEFILE): Makefile/' \
     -e 'sxQMAKE.*=.*qmakexQMAKE = \$(QTDIR)/bin/qmakex'> $$.tmp && \
 mv $$.tmp Makefile && \
 echo depend:  >> Makefile && \
 echo "	touch Makefile" >> Makefile && \
 cd ..
)

dnl add here all your Makefiles. These will be created by configure
AC_OUTPUT(Makefile)
