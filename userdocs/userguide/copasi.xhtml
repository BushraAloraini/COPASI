<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title>COPASI Documentation</title><meta name="generator" content="DocBook XSL Stylesheets V1.69.1"/></head><body><div class="book" lang="en"><div class="titlepage"><div><div><h1 class="title"><a id="book"/>COPASI Documentation</h1></div><div><h2 class="subtitle">Version 4.0 (Build 18)</h2></div><div><div class="author"><h3 class="author"><span class="surname">COPASI Development Team</span></h3></div></div></div><hr/></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="chapter"><a href="#modelCreation">1. Model Creation</a></span></dt><dd><dl><dt><span class="sect1"><a href="#introduction">Introduction</a></span></dt><dt><span class="sect1"><a href="#commandLineSwitches">Commandline Version and Commandline Options</a></span></dt><dt><span class="sect1"><a href="#generalGUILayout">COPASI GUI Elements</a></span></dt><dt><span class="sect1"><a href="#generalSettings">General Model Settings</a></span></dt><dt><span class="sect1"><a href="#addingCompartments">Adding and Editing Compartments</a></span></dt><dt><span class="sect1"><a href="#addingSpecies">Adding and Editing Species</a></span></dt><dt><span class="sect1"><a href="#addingReactions">Adding and Editing Reactions</a></span></dt><dt><span class="sect1"><a href="#globalParameters">Global Parameters</a></span></dt><dt><span class="sect1"><a href="#parameterView">Parameter View</a></span></dt><dt><span class="sect1"><a href="#addingFunctions">Adding and Editing User Defined Functions</a></span></dt><dt><span class="sect1"><a href="#usingSliders">Defining and Using Sliders</a></span></dt><dt><span class="sect1"><a href="#tutorialWizard">Using the Tutorial Wizard</a></span></dt></dl></dd><dt><span class="chapter"><a href="#outputGeneration">2. Generating Output</a></span></dt><dd><dl><dt><span class="sect1"><a href="#predefinedReports">Predefined reports</a></span></dt><dt><span class="sect1"><a href="#outputAssistant">Using the Output Assistant</a></span></dt><dt><span class="sect1"><a href="#manualOutputDefinitions">Defining Output Manually</a></span></dt><dd><dl><dt><span class="sect2"><a href="#reportDefinitions">Defining Reports</a></span></dt><dt><span class="sect2"><a href="#plotDefinitions">Defining Plots</a></span></dt></dl></dd></dl></dd><dt><span class="chapter"><a href="#simpleTasks">3. Simple Tasks</a></span></dt><dd><dl><dt><span class="sect1"><a href="#steadyStateAnalysis">Doing a Steady State Analysis</a></span></dt><dt><span class="sect1"><a href="#stoichiometryStateAnalysis">Elementary Modes and Mass Conservation</a></span></dt><dd><dl><dt><span class="sect2"><a href="#elementaryModes">Calculating Elementary Modes</a></span></dt><dt><span class="sect2"><a href="#massConservation">Calculating Mass Conservations</a></span></dt></dl></dd><dt><span class="sect1"><a href="#calculatingTrajectory">Running a Time Course Simulation</a></span></dt><dd><dl><dt><span class="sect2"><a href="#workingWithPlots">Working with Plots</a></span></dt></dl></dd><dt><span class="sect1"><a href="#calculatingMCA">Doing a Metabolic Control Analysis (MCA)</a></span></dt><dt><span class="sect1"><a href="#lyapunovExponents">Calculating Lyapunov Exponents</a></span></dt></dl></dd><dt><span class="chapter"><a href="#complexTasks">4. Complex Tasks</a></span></dt><dd><dl><dt><span class="sect1"><a href="#parameterScan">Doing a Parameter Scan</a></span></dt><dt><span class="sect1"><a href="#optimization">Running an Optimization Task</a></span></dt><dt><span class="sect1"><a href="#parameterEstimation">Parameter Estimation</a></span></dt></dl></dd><dt><span class="chapter"><a href="#importExport">5. Importing and Exporting models</a></span></dt><dd><dl><dt><span class="sect1"><a href="#sbmlImportExport">Importing and Exporting SBML files</a></span></dt><dt><span class="sect1"><a href="#cExport">Exporting C Source files</a></span></dt><dt><span class="sect1"><a href="#madonnaExport">Exporting Berkeley Madonna files</a></span></dt></dl></dd><dt><span class="chapter"><a href="#model">6. The Model in COPASI</a></span></dt><dd><dl><dt><span class="sect1"><a href="#compartments">Compartments</a></span></dt><dt><span class="sect1"><a href="#Metabolites">Metabolites</a></span></dt><dt><span class="sect1"><a href="#GlobalParameters">Global Parameters</a></span></dt><dt><span class="sect1"><a href="#Reactions">Reactions</a></span></dt><dt><span class="sect1"><a href="#Functions">Functions</a></span></dt><dt><span class="sect1"><a href="#deterministicModel">Deterministic Interpretation of the Model</a></span></dt><dt><span class="sect1"><a href="#stochasticModel">Stochastic Interpretation of the Model</a></span></dt></dl></dd><dt><span class="chapter"><a href="#methods">7. Methods</a></span></dt><dd><dl><dt><span class="sect1"><a href="#methodTimeCourse">Time Course Calculation</a></span></dt><dd><dl><dt><span class="sect2"><a href="#DeterministicSimulation">Deterministic Simulation</a></span></dt><dt><span class="sect2"><a href="#StochasticSimulation">Stochastic Simulation</a></span></dt><dt><span class="sect2"><a href="#HybridSimulation">Hybrid Simulation</a></span></dt></dl></dd><dt><span class="sect1"><a href="#methodSteadyState">Steady State Calculation</a></span></dt><dt><span class="sect1"><a href="#methodMCA">Metabolic Control Analysis</a></span></dt><dd><dl><dt><span class="sect2"><a href="#ControlCoefficients">Control Coefficients</a></span></dt><dt><span class="sect2"><a href="#SummationTheorem">Summation Theorem</a></span></dt><dt><span class="sect2"><a href="#EnzymeKineticsAndTheElasticityCoefficients">Enzyme Kinetics and the Elasticity Coefficients</a></span></dt><dt><span class="sect2"><a href="#ConnectivityRelations">Connectivity Relations</a></span></dt></dl></dd><dt><span class="sect1"><a href="#optimizationMethod">Optimization Methods</a></span></dt><dd><dl><dt><span class="sect2"><a href="#GeneticAlgorithm">Genetic Algorithm</a></span></dt><dt><span class="sect2"><a href="#GeneticAlgorithmSR">Genetic Algorithm SR</a></span></dt><dt><span class="sect2"><a href="#HookeJeeves">Hooke &amp; Jeeves</a></span></dt><dt><span class="sect2"><a href="#LevenbergMarquardt">Levenberg - Marquardt</a></span></dt><dt><span class="sect2"><a href="#EvolutionaryProgramming">Evolutionary Programming</a></span></dt><dt><span class="sect2"><a href="#RandomSearch">Random Search</a></span></dt><dt><span class="sect2"><a href="#EvolutionaryStrategySRES">Evolutionary Strategy (SRES)</a></span></dt><dt><span class="sect2"><a href="#SteepestDescent">Steepest Descent</a></span></dt></dl></dd><dt><span class="sect1"><a href="#lyapunovExponents">Lyapunov Exponents Calculation</a></span></dt></dl></dd><dt><span class="appendix"><a href="#errorMessages">A. Error Messages</a></span></dt><dd><dl><dt><span class="sect1"><a href="#configReaderErrors">Gepasi File Reader Error Messages</a></span></dt><dt><span class="sect1"><a href="#copasiVectorErrors">COPASI Vector Error Messages</a></span></dt><dt><span class="sect1"><a href="#functionParameterErrors">Function Parameter Error Messages</a></span></dt><dt><span class="sect1"><a href="#massActionErrors">Mass Action Error Messages</a></span></dt><dt><span class="sect1"><a href="#copasiMethodErrors">COPASI Method Error Messages</a></span></dt><dt><span class="sect1"><a href="#reactionErrors">Reaction Error Messages</a></span></dt><dt><span class="sect1"><a href="#parameterErrors">Parameter Error Messages</a></span></dt><dt><span class="sect1"><a href="#trajectoryMethodErrors">Trajectory Method Error Messages</a></span></dt><dt><span class="sect1"><a href="#xmlReaderErrors">XML Reader Error Messages</a></span></dt><dt><span class="sect1"><a href="#configurationErrors">Configuration File Error Messages</a></span></dt><dt><span class="sect1"><a href="#optimizationTaskErrors">Optimization Task Error Messages</a></span></dt><dt><span class="sect1"><a href="#sbmlErrors">SBML Error Messages</a></span></dt><dt><span class="sect1"><a href="#trajectoryTaskErrors">Trajectory Task Error Messages</a></span></dt><dt><span class="sect1"><a href="#dirEntryErrors">Directory Entry Error Messages</a></span></dt><dt><span class="sect1"><a href="#mathMLErrors">MathML Error Messages</a></span></dt><dt><span class="sect1"><a href="#functionErrors">Function Error Messages</a></span></dt><dt><span class="sect1"><a href="#evaluationNodeErrors">Evaluation Node Error Messages</a></span></dt><dt><span class="sect1"><a href="#copasiTaskErrors">COPASI Task Error Messages</a></span></dt><dt><span class="sect1"><a href="#steadyStateErrors">Steady State Calculation Error Messages</a></span></dt><dt><span class="sect1"><a href="#parameterFittingErrors">Parameter Fitting Error Messages</a></span></dt><dt><span class="sect1"><a href="#copasiObjectErrors">COPASI Object Error Messages</a></span></dt><dt><span class="sect1"><a href="#lyapunovErrors">Lyapunov Exponent Calculation Error Messages</a></span></dt></dl></dd><dt><span class="bibliography"><a href="#d0e8263">Bibliography</a></span></dt></dl></div><div class="list-of-tables"><p><b>List of Tables</b></p><dl><dt>1.1. <a href="#d0e1107">Standard Operators</a></dt><dt>1.2. <a href="#d0e1151">Misc. Functions</a></dt><dt>1.3. <a href="#d0e1200">Trigonometric Functions</a></dt><dt>1.4. <a href="#d0e1334">Logical Functions</a></dt><dt>1.5. <a href="#d0e1398">Miscellaneous</a></dt><dt>1.6. <a href="#d0e1427">Built-in Constants</a></dt><dt>5.1. <a href="#d0e3330">Preprocessor defines</a></dt></dl></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="modelCreation"/>Chapter 1. Model Creation</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="sect1"><a href="#introduction">Introduction</a></span></dt><dt><span class="sect1"><a href="#commandLineSwitches">Commandline Version and Commandline Options</a></span></dt><dt><span class="sect1"><a href="#generalGUILayout">COPASI GUI Elements</a></span></dt><dt><span class="sect1"><a href="#generalSettings">General Model Settings</a></span></dt><dt><span class="sect1"><a href="#addingCompartments">Adding and Editing Compartments</a></span></dt><dt><span class="sect1"><a href="#addingSpecies">Adding and Editing Species</a></span></dt><dt><span class="sect1"><a href="#addingReactions">Adding and Editing Reactions</a></span></dt><dt><span class="sect1"><a href="#globalParameters">Global Parameters</a></span></dt><dt><span class="sect1"><a href="#parameterView">Parameter View</a></span></dt><dt><span class="sect1"><a href="#addingFunctions">Adding and Editing User Defined Functions</a></span></dt><dt><span class="sect1"><a href="#usingSliders">Defining and Using Sliders</a></span></dt><dt><span class="sect1"><a href="#tutorialWizard">Using the Tutorial Wizard</a></span></dt></dl></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="introduction"/>Introduction</h2></div></div></div><p>The COPASI graphical user interface has been written using the <a href="http://www.trolltech.com" target="_top">Qt toolkit</a>. This allows us to release COPASI on all platforms that Qt supports.</p><p>
It also has the advantage that COPASI essentially behaves the same on all platforms supported, while still showing platform specific behavior. E.g. on a computer running Mac OS X, the user will have the menu at the top of the screen and the menu entry for the about dialog will appear in the COPASI menu rather than the help menu.</p><p>In the following sections, we will explain how to use the graphical user interface of COPASI. Everything should be applicable to all supported platforms. If there is a difference for some platforms we will try to point that out explicitly.    
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="commandLineSwitches"/>Commandline Version and Commandline Options</h2></div></div></div><p>
COPASI comes in two versions. One with a (hopefully) nice GUI for interactive work and one without a GUI for batch processing of model files. Both versions support the same set of commandline arguments, although some do not make sense for the GUI version and will be ignored.
</p><p>
In addition to the commandline options, you can specify one or more COPASI (or Gepasi) files after the commandline options which will then be processed.
Specifying more than one file again only makes sense for the commandline version of COPASI. For each of the files, the activated tasks will be run. The commandline options for importing and exporting SBML as well as the --save option are ignored if more than one file is specified.
Since the GUI version of COPASI can only handle one file at a time, it only makes sense to specify one file after the commandline options.
</p><div class="variablelist"><p class="title"><b>Commandline options</b></p><dl><dt><span class="term">--help</span></dt><dd><p>
Shows the usage of the program and the allowed commandline options. 
</p></dd><dt><span class="term">--home</span></dt><dd><p>
This can be used to tell COPASI where your home directory is located. Normally you don't have to use this. 
</p></dd><dt><span class="term">--configdir</span></dt><dd><p>
This can be used to specify the directory where Copasi stores its configuration files. Normally this is called .copasi and is located in the users home directory. But if you want Copasi to use a different one, you can specify it with this switch.   
</p></dd><dt><span class="term">--configfile</span></dt><dd><p>
This can be used to specify the filename where Copasi loads and stores its configuration. Normally this is called copasi and is located in the directory specified with --configdir. But if you want Copasi to use a different filename, you can specify it with this switch.   
</p></dd><dt><span class="term">-c, </span><span class="term">--copasidir</span></dt><dd><p>This specifies the directory where COPASI  has been installed. It is needed to find e.g. help files. On Windows and Mac OS X this is set automatically. On Linux it has to be specified if you want to use certain features. The GUI version of COPASI will issue a warning on startup if this has not been set. The commandline version does not need this directory to be specified and therefore ignores this option.</p></dd><dt><span class="term">--exportBerkeleyMadonna</span></dt><dd><p>With this option you can specify a name for the Berkeley Madonna file Copasi should export. This is useful if you want to export some Copasi files to Berkeley Madonna file format in a batch job. This only makes sense for the commandline version and it will be ignored by the GUI version.</p></dd><dt><span class="term">--exportC</span></dt><dd><p>With this option you can specify a name for the C source file Copasi should export. This is useful if you want to export some Copasi files to C sourcecode in a batch job. This only makes sense for the commandline version and it will be ignored by the GUI version.</p></dd><dt><span class="term">-e, </span><span class="term">--exportSBML</span></dt><dd><p>With this option you can specify a name for the SBML file COPASI should export. This is useful if you want to export some COPASI files to SBML in a batch job. This only makes sense for the commandline version and it will be ignored by the GUI version.</p></dd><dt><span class="term">--license</span></dt><dd><p>With this commandline option, Copasi will print its license and exit.</p></dd><dt><span class="term">-i, </span><span class="term">--importSBML</span></dt><dd><p>This options lets you specify an SBML file that COPASI shall import.</p></dd><dt><span class="term">-s, </span><span class="term">--save</span></dt><dd><p>This option is used to specify the name file where COPASI should store a model. This is useful if you intend to convert some SBML files to COPASI files in a batch job. This also makes sense only for the commandline version and will be ignored by the GUI version.</p></dd><dt><span class="term">-t, </span><span class="term">--tmp</span></dt><dd><p>
This option can be used to specify a temporary directory where COPASI will auto-save some data periodically. Normally COPASI uses the systems temporary directory (e.g. /tmp/ under Linux).
</p></dd><dt><span class="term">--verbose</span></dt><dd><p>This commandline option tells Copasi to print more output on what it is doing to stdout</p></dd></dl></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="generalGUILayout"/>COPASI GUI Elements</h2></div></div></div><p>
    The COPASI graphical user interface essentially consists of four elements.</p><p>  
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Layout_01.png" align="middle" alt="COPASI GUI elements."/><div class="caption"><p>Elements of the COPASI user interface</p></div></div></div><p>
</p><p>
On the top of the main window, you have the menu bar (on the Mac, the menu bar is on the top of the screen), below that, you have a tool bar with some common tasks like opening a file or saving a file. The rest of the window is vertically divided into two parts by a slider. The size of the two elements can be adjusted by moving the bar that separates them. The left element is called the object tree and it shows your current model and the tasks that you can perform on this model. Depending on the element that is selected in the object tree, the view on the right will change in order to enable you to edit the model or run and modify the task you selected in the object tree.</p><p>If you start COPASI without any command line argument, COPASI will start with a new model. The root of the object tree will be selected and on the right side of the main window, you will see the COPASI logo.</p><p>The object tree has five branches below the root element. The first one contains all objects that belong to the current model. The second and third ones contain all tasks that COPASI can execute, the fourth one contains the different output objects COPASI can handle and the last branch contains all the (kinetic) functions that are defined. These include the build in functions as well as functions defined by the user.</p><p>If you now click on the <span class="guibutton">Model</span> branch, the view to the right of the object tree will change and you will see a screen that allows you to make <a href="#generalSettings">model settings</a>. In the following sections, we will describe the individual dialogs that you can open by selecting different branches in the object tree. During this explanation, you will learn how to create a model in COPASI and run different tasks on this model like calculating a trajectory.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="generalSettings"/>General Model Settings</h2></div></div></div><p>
    If you click on the <span class="guibutton">Model</span> branch of the object tree which was explained in the <a href="#generalGUILayout">COPASI GUI Elements</a> section, you activate the dialog that lets you specify certain parameters for your model like its name and the units that are to be used for time, volume and concentration quantities throughout the current model. You can also give a textual description of your model that is more expressive than reactions and equations. You could for example state which part of the metabolism the model describes (e.g. glycolysis) and add some references to articles related to the model. This will help others (and yourself) to understand and identify your models.
</p><p>   
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/General_01.png" align="middle" alt="Dialog for general model settings"/><div class="caption"><p>Dialog for general model settings</p></div></div></div><p>
</p><p>
</p><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Caution</h3><p>You should be aware that changing the default units actually changes the model. If you for example change the default volume units from liters to milliliters, all the particle numbers in your model change by a factor of 1000.</p></div><p>
</p><p>
COPASI internally represents amounts of species by particle numbers. If a concentration has to be displayed or is needed for some output this is calculated from the particle number, the volume of the compartment the species belongs to and Avogadro's number (<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mrow><mml:mn>6.0221415</mml:mn><mml:mo>*</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mn>23</mml:mn></mml:msup> <mml:mfrac> <mml:mi>particles</mml:mi><mml:mi>Mole</mml:mi></mml:mfrac></mml:mrow></mml:math>). Lets assume that you have set your default volume units to fl and your default substance units to nMol and species A is present in the amount of <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mrow><mml:mn>1.0</mml:mn><mml:mo>*</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mn>15</mml:mn></mml:msup><mml:mi> </mml:mi><mml:mi>particles</mml:mi></mml:mrow></mml:math>. Further assuming that the volume of the compartment containing A is set to <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mn>1.0</mml:mn></mml:math> (fl), A would be present in a concentration of 
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
  <mml:mfrac>
    <mml:mrow>
      <mml:mn>1.0</mml:mn><mml:mo>*</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mn>15</mml:mn></mml:msup><mml:mi> </mml:mi><mml:mi>particles</mml:mi>
    </mml:mrow>
    <mml:mrow>
      <mml:mn>6.0221415</mml:mn><mml:mo>*</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mn>23</mml:mn></mml:msup><mml:mi> </mml:mi><mml:mfrac><mml:mi>particles</mml:mi><mml:mi>Mole</mml:mi></mml:mfrac>
      <mml:mo>*</mml:mo>
      <mml:mn>1.0</mml:mn><mml:mi> </mml:mi><mml:mi> fl</mml:mi>
    </mml:mrow>
  </mml:mfrac>
</mml:math>
. Since the default substance unit is set to nMol instead of Mole we have to multiply the result by <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mrow><mml:mn>1.0</mml:mn><mml:mo>*</mml:mo><mml:msup><mml:mn>10</mml:mn><mml:mn>9</mml:mn></mml:msup></mml:mrow></mml:math>. So COPASI would display a concentration of <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mn>1.661</mml:mn><mml:mrow><mml:mi> </mml:mi><mml:mfrac><mml:mi>nMol</mml:mi><mml:mi>fl</mml:mi></mml:mfrac></mml:mrow></mml:math>.       
</p><p>
With the dropdown list labeled <span class="guilabel">Rate Law Interpretation</span> you can specify how Copasi should interpret the kinetic rate laws you specify for your reactions. Per default, Copasi will interpret all rate laws as deterministic rate laws. Since Copasi allows the user to simulate a model either deterministically or stochastically, Copasi has to make some corrections to determinisitic rate laws when using them for a stochastic simulation. This functionality sometimes interferes with rate laws that have been written for stochastic simulation and where the before mentioned corrections have already been made by the modeler. So if you have a model with rate laws that have been written be used in a stochastic simulation, you have to specify this by selecting stochastic from this dropdown list. If you do this, Copasi will not apply any corrections to the rate laws specified in the model when doing stochastic simulation.
</p><p>
With the edit field labeled <span class="guilabel">Initial Time</span> the user can tell Copasi to take the given value as the initial time for tasks like time course. For example if you already have run a time course simulation for 1000 seconds in another program and your model values reflect the state of the model after those 1000 seconds of simulation, you can continue your simulation at that timepoint by setting the initial time to 1000. (This assumes that the models time units in the same widget are set to seconds.)
If you run a time course simulation and check the <span class="guilabel">update model</span> box there, Copasi will automatically set the intial time to the endtime of the time course simulation after running it. For more information on running time course simulation is Copasi see <a href="#calculatingTrajectory">Running a Time Course Simulation</a>
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="addingCompartments"/>Adding and Editing Compartments</h2></div></div></div><p>
    In COPASI, most of the time there are several ways to do something and you just choose the way you prefer. This is especially true for defining the elements of the model.</p><p>Actually if you are just defining a model that has a single compartment, you will most likely not even bother to add the compartment explicitly, but I will come back to this in the <a href="#addingSpecies">Adding and Editing Species</a> and <a href="#addingReactions">Adding and Editing Reactions</a> sections.</p><p>Although you will probably not add compartments to often, it is good to know how it is done, especially since adding other components of the model, e.g. species or reactions, works essentially the same.</p><p>There are three methods to add a new compartment to a model, but for all three, we have to navigate to the <span class="guibutton">Compartments</span> branch of the object tree which is located under the <span class="guibutton">Model-&gt;Biochemical</span> branch. So first open the <span class="guibutton">Model</span> branch and there open the <span class="guibutton">Biochemical</span> branch by clicking on the expansion sign in front of the branch name, or by double clicking on the branch name. </p><p>  
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Compartments_01.png" align="middle" alt="compartment table without entries"/><div class="caption"><p>empty compartment table</p></div></div></div><p>
</p><p>
If you start with a new model and you select the <span class="guibutton">Compartments</span> branch, you will get an empty table with three columns. The columns are named <span class="guilabel">Status</span>, <span class="guilabel">Name</span> and <span class="guilabel">Volume</span>. <span class="guilabel">Name</span> is the actual name of the compartment and <span class="guilabel">Volume</span> is its volume given in the volume units defined in the <a href="#generalSettings">model settings</a> dialog. The meaning of the <span class="guilabel">Status</span> column will be explained shortly.</p><p>The most obvious way to add a new compartment is to click the <span class="guibutton">New</span> button on the bottom of the window. This will create a new compartment that is added to the table with a status of <span class="emphasis"><em>new</em></span>.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Compartments_02.png" align="middle" alt="compartment table with newly added compartment"/><div class="caption"><p>compartment table with new compartment</p></div></div></div><p>
</p><p>
A status of new means that the compartment has been created, but is has not been added to the model yet. It will get added to the model if you either click on the <span class="guibutton">commit</span> button on the bottom of the screen, if you select another element in the object tree on the left, or if you double click on the table. Lets assume you clicked on the <span class="guibutton">commit</span> button, you will notice that the status of the new compartment is no longer defined as new since it has been added to the model.</p><p>While the status of a compartment is shown as <span class="emphasis"><em>new</em></span>, you can remove the compartment from the table by clicking the <span class="guibutton">revert</span> button which will cancel all modifications you made to the compartments that have not been committed yet.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Compartments_03.png" align="middle" alt="compartment table with deleted compartment entry"/><div class="caption"><p>compartment table with deleted compartment</p></div></div></div><p>
</p><p>
If you have already committed the compartment, you can delete it by selecting the table row (or one cell of the table row) that contains the compartment you want to delete and clicking the <span class="guibutton">delete</span> button. You will notice that the compartment does not get deleted at once, but rather the status changes to <span class="emphasis"><em>deleted</em></span>. You can still undo the delete by clicking the <span class="guibutton">revert</span> button or the <span class="guibutton">delete/undelete</span> button, or you can finalize the delete action by clicking on the <span class="guibutton">commit</span> button. Again leaving this dialog by selecting another object in the object tree or double clicking on the table has the same effect as clicking on the <span class="guibutton">commit</span> button.</p><p>The <span class="guibutton">clear</span> button is just a convenience function to delete all compartments. If you click on it, the status of all compartments in the table will be changed to <span class="emphasis"><em>deleted</em></span> and a subsequent <span class="guibutton">commit</span> will remove the compartments from the model.</p><p>The most convenient way to add a compartment is to just click on an empty name cell in the table and type the name of the compartment. Once you leave the cell by either hitting the return or the tab key or by clicking somewhere else, the compartment appears in the table with a status of <span class="emphasis"><em>new</em></span>. Actually hitting the return key after typing the name brings you directly into the next row and you can continue adding compartments until all compartments are defined. You now only have to commit your changes in one of the ways mentioned above and all the compartments get added to the model.</p><p>The third way to add a new compartment is to double click on an empty row in the table. This is essentially the same as clicking the <span class="guibutton">new</span> button and double clicking on the newly added compartment entry.</p><p>    
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Compartments_04.png" align="middle" alt="dialog for changing compartment parameters"/><div class="caption"><p>compartment definition dialog</p></div></div></div><p>
</p><p>
Double clicking on any compartment entry in the table will bring you to another input dialog that lets you specify the parameters of the compartment. For a compartment, there are only two parameters that the user can change. One is the name of the compartment and the other is the volume.</p><p>If there are already species defined that are part of the compartment being edited, they are listed in the text widget at the bottom of the dialog called "Metabolite Name".</p><p>The field labeled <span class="guilabel">Transient Volume</span> specifies the volume the compartment has right now, e.g. during or at the end of a simulation. Since the current version of Copasi does not support variable compartment volumes yet, this will always be the same as the initial volume.</p><p>As you might already have noticed, this dialog for changing compartment parameters is associated with the individual compartment leaves in the object tree. So if you want to change the parameters of a compartment, you can also navigate to the leave in the object tree that represents the compartment you want to change instead of double clicking on an entry in the compartment table.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="addingSpecies"/>Adding and Editing Species</h2></div></div></div><p>
    Adding new species works exactly the same as adding new compartment, so I suggest reading the <a href="#addingCompartments">Adding and Editing Compartments</a> section if you haven't already done so. Here we will just cover the differences between adding a compartment and adding a species.</p><p>    
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Metabolites_01.png" align="middle" alt="metabolites table"/><div class="caption"><p>metabolites table with one entries</p></div></div></div><p>
</p><p>
First of all in order to add a new species or metabolite, as it is called in COPASI, you have to navigate to the <span class="guibutton">Metabolites</span> branch of the object tree which is located in the <span class="guibutton">Model-&gt;Biochemical</span> branch directly below the <span class="guibutton">Compartments</span> branch. Here again you see a table, but this table consists of eight columns. This is due to the fact that a metabolite has more parameters than a compartment. The <span class="guilabel">Status</span> and <span class="guilabel">Name</span> columns should already be familiar from the compartments table. The other six columns specify the initial concentration of the metabolite, the transient concentration and if the metabolite is fixed (i.e. its concentration does not change during the course of a simulation). The second <span class="guilabel">Status</span> column might be a little confusing, but it indicates whether the metabolite is an independent or a dependent metabolite as opposed to the first <span class="guilabel">Status</span> column that indicates whether a metabolite has been added to the model yet or is about to be deleted from the model as described in the <a href="#addingCompartments">Adding and Editing Compartments</a> section. The column named <span class="guilabel">Compartment</span> shows the name of the compartment the metabolite belongs to and the <span class="guilabel">Rate</span> column shows the reaction rate of the metabolite. For newly created metabolites the rate will be empty since it needs to be calculated first, e.g. during a <a href="#calculatingTrajectory" title="Running a Time Course Simulation">time course simulation</a>.</p><p>When a metabolite is added and the model does not contain a compartment yet, COPASI will automatically add a new compartment to the model and the metabolite will be added to this compartment. If there already is one or more compartments, the metabolite will be added to the first compartment in the list. This can be changed later.</p><p>To add a new metabolite you have the same three ways as for adding compartments and if you are not familiar with those, I recommend reading the <a href="#addingCompartments">Adding and Editing Compartments</a> section.</p><p>    
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Metabolites_02.png" align="middle" alt="dialog for changing metabolite parameters"/><div class="caption"><p>metabolite definition dialog</p></div></div></div><p>
</p><p>
    Editing the parameters of a metabolite also works exactly the way it does for compartments. Either you double click on a metabolite entry in the table, or you use the object tree to navigate to the metabolite leaf you intend to edit. Some of the parameters of a metabolite like the <span class="guilabel">Model Status</span> are calculated automatically and can not be changed by the user. The parameters that you can change are the <span class="guilabel">Name</span> of the metabolite, the <span class="guilabel">Compartment</span> it belongs to, whether it is a fixed metabolite and its <span class="guilabel">initial concentration</span>. Instead of changing the <span class="guilabel">initial concentration</span>, you can also change the <span class="guilabel">initial particle number</span>. If you change one of those two, the other will be updated automatically. The volume to calculate particle numbers from concentration and vice versa comes from the compartment associated with the metabolite.
The list at the bottom of the metabolite widget shows the reactions in which this metabolite participates.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="addingReactions"/>Adding and Editing Reactions</h2></div></div></div><p>
    Again adding reactions essentially works the same way as adding compartments or metabolites. When you navigate to the <span class="guibutton">Reactions</span> branch of the object tree which is located under the <span class="guibutton">Model-&gt;Biochemical</span> branch, you will see a table with five columns. The first two are again <span class="guilabel">Status</span> and <span class="guilabel">Name</span> of the reaction. The third column called <span class="guilabel">Equation</span> describes the chemical formula and maybe additional modifiers of the reaction. The fourth column states the name of the kinetics for the reaction which depends on the equation. We will come to this in a second. The last column shows the <span class="guilabel">flux</span> through this reaction. The flux can not be set by  the user but is calculated automatically when you <a href="#calculatingTrajectory" title="Running a Time Course Simulation">do a time course simulation</a>.
   </p><p>    
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Reactions_01.png" align="middle" alt="reaction table without entries"/><div class="caption"><p>empty reaction table</p></div></div></div><p>
</p><p>
    The easiest way to add a reaction is to type the chemical equation into an empty equation cell in the table. After you typed the equation, you hit the return key and automatically land in the next row where you can type the next reaction equation. This way you can enter all the reactions that make up your model. When you are finished with typing the reaction equations, you commit all the reactions. If any of the reactions contain metabolites that are not already present in the model, they are added automatically. If there was no compartment before, a compartment is also added and all new metabolites get added to this compartment. If there is already one or more compartments, all new metabolites get added to the first compartment that is listed in the object tree.
</p><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Caution</h3><p>
When typing reaction equations you should keep in mind that metabolite names in COPASI can contain characters like "+" or even white-spaces. Since these characters would make it very hard if not impossible to parse the chemical reaction equation, you have to place those metabolite names in double quotes. E.g. "Metabolite 1" + "Metabolite 2" -&gt; "Metabolite 3". No matter if your species names contain special characters or not, the species names have to be separated from the reaction symbols ( "+" , "=" and "-&gt;" ) by white-spaces.
</p></div><p>
    Each new reaction gets a default kinetic which is irreversible mass action for reactions that contain a substrate. For reaction that only have a product (e.g. influx into a system) a constant flux kinetic is chosen.</p><p>    
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Reactions_02.png" align="middle" alt="dialog for changing reaction parameters"/><div class="caption"><p>reaction definition dialog</p></div></div></div><p>
</p><p>
    Double clicking on an entry in the table will bring you to another dialog that lets you change certain parameters of the reaction. You can change the name of the reaction, the chemical equation and whether the reaction is reversible or not. Changing the chemical equation and the reversibility of a reaction influences the type of kinetics you can choose for the reaction. Each kinetic function defines how many substrates, products and modifiers it expects. Additionally it defines whether it can be used for reversible or irreversible reactions only or if it can be used on either. So depending on how many substrates, products and modifiers your kinetic equation has and whether it is reversible or not, only a subset of the defined kinetic functions will be available in the <span class="guilabel">Kinetics</span> combo box.
    If the kinetic function you want to assign to the reaction is not available yet, you can add it by clicking on the <span class="guibutton">New Rate Law</span> button (see also <a href="#addingFunctions">Adding and Editing User Defined Functions</a>). 
    Depending on the kinetic function you chose, you get a selection of parameters in the table named <span class="guilabel">Symbol Definition</span>, all functions parameters get a default value of 0.1 which can be changed by clicking into the corresponding cell and typing a new value.</p><p>Per default all parameters to a kinetic function are local parameters and they exist only in the scope of the rate law of one reaction. Sometimes it is of advantage to use the same parameter in the rate laws for several reactions. This way if you want to change to value of this parameter, you only have to change it in once insted of having to change it in every reaction it occurs in individually. Parameters that can be used in more then one reaction are called global parameters in Copasi. How you add a global parameter to your model is described in the section called ???. Let us for the moment assume you already added such a global parameter to your model and now want to use it in a rate law. Each parameter in the <span class="guilabel">Symbol Definition</span> table has a checkbox labeled <span class="guilabel">global</span>. When you check this box, Copasi knows that the parameter that belongs to it is a global parameter and lets you select a global parameter from a list of global parameters that have been defined in the model. If none have been defined yet, the list contains only an entry termed <span class="guilabel">unknown</span>. In this case, you will have to define one or more global parameters first and then come back to the reaction where you want to use it. If the name of the global parameter is set to the <span class="emphasis"><em>unknown</em></span> term, Copasi will reset the type of parameter to local if you leave the reaction widget.</p><p>So far we did not go into the details of how chemical equations are to be specified. Chemical equations have a simple schema. First you state all the substrates separated by  "+" characters. Please make sure that you separate the name of the substrate and the "+" character by at least one space character, otherwise COPASI will interpret the "+" sign as belonging to the metabolites name. (Having the "+" character as part of a metabolites name is allowed in COPASI!) after the list of substrates, you specify either an equals ("=") character if the reaction is reversible or the character combination "-&gt;" if the reaction is irreversible. This is followed by the list of products which must also be separated by the "+" character. Again make sure you have spaces around the separating "+" characters. Optionally this term can be followed by a semicolon and a list of modifiers which are separated by spaces. Either the list of substrates or the list of products may also be empty, but at least one of them must be present. Lets look at two examples:
</p><div class="orderedlist"><ol type="a"><li><p>Metabolite A is irreversibly converted into Metabolite B. The chemical equation you would type is "A -&gt; B".</p></li><li><p>Metabolite A and B are reversibly converted to Metabolite C, the reaction has to modifiers C and D. The chemical equation for this in COPASI would be: "A + B = C; C D"</p><p>Note that one of the modifiers is the product!</p></li></ol></div><p>   
</p><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Caution</h3><p>If the reaction takes place in one compartment, the reaction kinetic specifies a rate of concentration change, whereas if the reaction takes place in several compartments, the kinetic specifies the amount of substance change over time.</p><p>E.g. in the reaction A -&gt; B, if A and B are in the same compartment, the kinetic function for the reaction returns its result in Mol/(l*s). If A and B reside in different compartments, the result is returned in Mol/s. (This assumes that your default units are set to Mol, l and s.)</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="globalParameters"/>Global Parameters</h2></div></div></div><p>
In the model tree right below the <span class="guibutton">Reaction</span> branch is the <span class="guibutton">Global parameters</span> branch. If you select this branch, you see a table with all the global parameters that have been defined in your model. When you start a new model this table, just like all the others so far, is empty. The table has four columns and the ones named <span class="guilabel">Status</span> and <span class="guilabel">Name</span> should by now be already familiar.
</p><p>
As with all other model elements, you can choose how you want to add a global parameter. The most convenient way is to just enter a name in an empty cell of the column termed <span class="guilabel">Name</span>.
</p><p>

</p><p>
Contrary to all other model elements we have created so far, selecting the newly created global parameter in the tree view will not open a new widget. You can set all attributes of the global parameter directly in the table. And the only two attributes that can be changed are the name and the initial value of the parameter. For future version of Copasi it is planned to support parameters that change during a time course simulation, but for now the transient value of a parameter will always be identical to the initial value. 
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="parameterView"/>Parameter View</h2></div></div></div><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Parameters_01.png" align="middle" alt="Parameter View"/><div class="caption"><p>Parameter View</p></div></div></div><p>
</p><p>
    The parameter view widget can be displayed by selecting the leaf called <span class="guilabel">Parameter overview</span> on the Model branch which is located right underneath the <span class="guilabel">Global parameters</span> leaf. This widget allows you to view and edit all parameters of the model in one place. This saves you from moving around the model tree if you e.g. first have to edit the initial concentrations for some metabolites and afterward parameters of one or more reactions.
    The view shows you the initial concentrations for the metabolites at the top followed by the initial time and the volumes of all the compartments and at the bottom the kinetic parameters of all reactions.
    In order to change some value, you double click on it which lets you input a new value. On hitting the return key or clicking somewhere else, the new value is not written to the object directly, but a '*' character appears in front of the name of the changed parameter. If you now leave this widget or press the commit button at the bottom of the dialog, the new value is written to the corresponding object in the model.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="addingFunctions"/>Adding and Editing User Defined Functions</h2></div></div></div><p>COPASI already defines a large set of commonly used kinetic functions to choose from. Nevertheless sometimes you will have to define your own kinetic function to solve a specific problem. The list of defined functions is located at the last branch in the object tree.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Functions_01.png" align="middle" alt="function table with predefined functions"/><div class="caption"><p>function table</p></div></div></div><p>
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Functions_02.png" align="middle" alt="dialog for the definition of functions"/><div class="caption"><p>function definition dialog</p></div></div></div><p>
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Functions_03.png" align="middle" alt="function definition dialog with committed function"/><div class="caption"><p>function definition dialog with graphical display of the function</p></div></div></div><p>
</p><p>
You can add a new function either by double clicking on an empty table row or by clicking on the <span class="guibutton">New</span> button on the bottom of the screen.
In the function definition dialog, you give your function a name in the <span class="guilabel">Function Name</span> field. This name has to be unique within the list of defined functions. Next, you have to specify a formula that defines the reaction rate of your kinetic function in the <span class="guilabel">Formula</span> field. The function string only covers the right side of the rate function. So for Michaelis-Menten which is defined as  

  <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
    <mml:mrow>
      <mml:mi>v</mml:mi>
      <mml:mo>=</mml:mo>
      <mml:mrow>
        <mml:mi>V</mml:mi>
        <mml:mo>*</mml:mo>
        <mml:mrow>
          <mml:mo>(</mml:mo>
            <mml:mrow>
             <mml:mi>S</mml:mi>
             <mml:mo>/</mml:mo> 
              <mml:mrow>
                <mml:mo>(</mml:mo>
                  <mml:mrow>
                    <mml:msub>
                      <mml:mi>K</mml:mi>
                      <mml:mi>m</mml:mi>
                    </mml:msub>
                    <mml:mo>+</mml:mo>
                    <mml:mi>S</mml:mi>
                  </mml:mrow>    
                <mml:mo>)</mml:mo>    
              </mml:mrow>
            </mml:mrow>      
          <mml:mo>)</mml:mo>
        </mml:mrow>
      </mml:mrow>
    </mml:mrow>
  </mml:math>

 you would enter 

  <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
    <mml:mrow>
      <mml:mi>V</mml:mi>
      <mml:mo>*</mml:mo>
      <mml:mrow>
        <mml:mo>(</mml:mo>
          <mml:mrow>
            <mml:mi>S</mml:mi>
	    <mml:mo>/</mml:mo>
            <mml:mrow>
              <mml:mo>(</mml:mo>
                <mml:mrow>
                  <mml:msub>
                    <mml:mi>K</mml:mi>
                    <mml:mi>m</mml:mi>
                  </mml:msub>
                  <mml:mo>+</mml:mo>
                  <mml:mi>S</mml:mi>
                </mml:mrow>    
              <mml:mo>)</mml:mo>    
            </mml:mrow>
          </mml:mrow>      
        <mml:mo>)</mml:mo>
      </mml:mrow>
    </mml:mrow>
  </mml:math>

into the <span class="guilabel">Formula</span> field. While you are typing the formula, COPASI already tries to parse the equation and extract the parameters. All parameters COPASI finds are listed in the <span class="guilabel">Parameters</span> table below the <span class="guilabel">Formula</span> field. Per default, all variables found are defined as being <span class="emphasis"><em>Parameters</em></span>. You have to specify which of them really are parameters and which are substrates, products or modifiers. This mapping of variable names to a specific function within the equation also defines the type of reactions this function can be used for. E.g. if you define your function to contain two substrates and a modifier, you can later only use it for reactions that really do have two substrates. </p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>The restrictions on the number of modifiers is not as strict since substrates and reactants could act as modifiers. So the above mentioned rate law could be used on reactions that do not explicitly specify a modifier.</p></div><p> You can also see this in the <span class="guilabel">Application restrictions</span> table below the <span class="guilabel">Parameters</span> table. Let's say you define the function 

  <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
    <mml:mrow>
      <mml:mi>A</mml:mi>
      <mml:mo>*</mml:mo>
      <mml:mi>B</mml:mi>
    </mml:mrow>
  </mml:math>  

 and define <span class="emphasis"><em>A</em></span> and <span class="emphasis"><em>B</em></span> to be substrates, you will see that the <span class="guilabel">Application restrictions</span> say that there must be exactly two substrates in the reaction for that kinetics to be applicable. After defining this function, you will be able to use it for all chemical reaction that have exactly two substrates. Last, but not least, you have to define whether this function can be applied to reversible, irreversible or both reaction types by selecting the <span class="guilabel">reversible</span>, <span class="guilabel">irreversible</span> or <span class="guilabel">General</span> radio button respectively. 
You can also call other functions from function definitions. There are four things you have to watch out for when you call a function within another function.
</p><div class="orderedlist"><ol type="1"><li><p>
Recursive function calls are not permitted. That is a function may not call itself, neither directly nor by calling another function that might call the first function again further along the line.
</p></li><li><p>
You have to specify the correct number of arguments to the function called.
</p></li><li><p>
You have to specify the correct argument types to the function call. I.e. if you call "Henry-Michaelis-Menten (irreversible)" from within another function, you have to make sure that the first call argument has a usage of "Substrate" and the other two have the usage "Parameter".
</p></li><li><p>
Which brings me to the last point. The built in function names in COPASI often use characters like "-" or even spaces, so if you want to call one of those functions, you have to quote this function name. So calling "Henry-Michaelis-Menten (irreversible)" from another function would look like this:
</p><p>
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
    <mml:mrow>
      <mml:mi>"Henry-Michaelis-Menten (irreversible)"</mml:mi>
      <mml:mo> ⁡ </mml:mo>
      <mml:mo> ( </mml:mo>
      <mml:mi>S</mml:mi>
      <mml:mo> , </mml:mo>
      <mml:mi>Km</mml:mi>
      <mml:mo> , </mml:mo>
      <mml:mi>V</mml:mi>
      <mml:mo> ) </mml:mo>
    </mml:mrow>
  </mml:math>  
</p></li></ol></div><p>
 After you commit the function, you can use it for the definition of reactions.</p><p>
The operators and functions that COPASI knows and therefore can be used to create user defined functions are the following:

</p><div class="table"><a id="d0e1107"/><p class="title"><b>Table 1.1. Standard Operators</b></p><table summary="Standard Operators" border="1"><colgroup><col/><col/></colgroup><thead><tr><th align="left">Operator/Function</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">plus operator</td></tr><tr><td align="left">-</td><td align="left">minus operator</td></tr><tr><td align="left">/</td><td align="left">division operator</td></tr><tr><td align="left">*</td><td align="left">multiplication operator</td></tr><tr><td align="left">%</td><td align="left">modulus operator</td></tr><tr><td align="left">^</td><td align="left">power operator</td></tr></tbody></table></div><p>
</p><p>
</p><div class="table"><a id="d0e1151"/><p class="title"><b>Table 1.2. Misc. Functions</b></p><table summary="Misc. Functions" border="1"><colgroup><col/><col/></colgroup><thead><tr><th align="left">Operator/Function</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">abs / ABS</td><td align="left">absolute value</td></tr><tr><td align="left">floor / FLOOR</td><td align="left">floor value</td></tr><tr><td align="left">ceil / CEIL</td><td align="left">next highest integer</td></tr><tr><td align="left">factorial / FACTORIAL</td><td align="left">factorial function</td></tr><tr><td align="left">log / LOG</td><td align="left">natural logarithm</td></tr><tr><td align="left">log10 / LOG10</td><td align="left">logarithm for base 10</td></tr><tr><td align="left">exp / EXP</td><td align="left">exponent function</td></tr></tbody></table></div><p>
</p><p>
</p><div class="table"><a id="d0e1200"/><p class="title"><b>Table 1.3. Trigonometric Functions</b></p><table summary="Trigonometric Functions" border="1"><colgroup><col/><col/></colgroup><thead><tr><th align="left">Operator/Function</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">sin / SIN</td><td align="left">sine function</td></tr><tr><td align="left">cos / COS</td><td align="left">cosine function</td></tr><tr><td align="left">tan / TAN</td><td align="left">tangent function</td></tr><tr><td align="left">sec / SEC</td><td align="left">secand function</td></tr><tr><td align="left">csc / CSC</td><td align="left">cosecand function</td></tr><tr><td align="left">cot / COT</td><td align="left">cotangent function</td></tr><tr><td align="left">sinh / SINH</td><td align="left">hyperbolic sine function</td></tr><tr><td align="left">cosh / COSH</td><td align="left">hyperbolic cosine function</td></tr><tr><td align="left">tanh / TANH</td><td align="left">hyperbolic tangent function</td></tr><tr><td align="left">sech / SECH</td><td align="left">hyperbolic secand function</td></tr><tr><td align="left">csch / CSCH</td><td align="left">hyperbolic cosecand function</td></tr><tr><td align="left">coth / COTH</td><td align="left">hyperbolic cotangent function</td></tr><tr><td align="left">asin / ASIN</td><td align="left">arcsine function</td></tr><tr><td align="left">acos / ACOS</td><td align="left">arccosine function</td></tr><tr><td align="left">atan / ATAN</td><td align="left">arctangent function</td></tr><tr><td align="left">arcsec / ARCSEC</td><td align="left">arcsecand function</td></tr><tr><td align="left">arccsc / ARCCSC</td><td align="left">arccosecand function</td></tr><tr><td align="left">arccot / ARCCOT</td><td align="left">arccotangent function</td></tr><tr><td align="left">arcsinh / ARCSINH</td><td align="left">hyperbolic arcsine function</td></tr><tr><td align="left">arccosh / ARCCOSH</td><td align="left">hyperbolic arccosine function</td></tr><tr><td align="left">arctanh / ARCTANH</td><td align="left">hyperbolic arctangent function</td></tr><tr><td align="left">arcsech / ARCSECH</td><td align="left">hyperbolic arcsecand function</td></tr><tr><td align="left">arccsch / ARCCSCH</td><td align="left">hyperbolic arccosecand function</td></tr><tr><td align="left">arccoth / ARCCOTH</td><td align="left">hyperbolic arccotangent function</td></tr></tbody></table></div><p>
</p><p>
</p><div class="table"><a id="d0e1334"/><p class="title"><b>Table 1.4. Logical Functions</b></p><table summary="Logical Functions" border="1"><colgroup><col/><col/></colgroup><thead><tr><th align="left">Operator/Function</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">and / AND</td><td align="left">logical and (&amp;)</td></tr><tr><td align="left">or / OR</td><td align="left">logical or (|)</td></tr><tr><td align="left">xor / XOR</td><td align="left">logical xor</td></tr><tr><td align="left">not / NOT</td><td align="left">logical negation</td></tr><tr><td align="left">le / LE</td><td align="left">smaller or equal (&lt;=)</td></tr><tr><td align="left">lt / LT</td><td align="left">smaller (&lt;)</td></tr><tr><td align="left">ge / GE</td><td align="left">greater or equal (&gt;=)</td></tr><tr><td align="left">gt / GT</td><td align="left">greater (&gt;)</td></tr><tr><td align="left">ne / NE</td><td align="left">not equal (!=)</td></tr><tr><td align="left">eq / EQ</td><td align="left">equal (=)</td></tr></tbody></table></div><p>
</p><p>
</p><div class="table"><a id="d0e1398"/><p class="title"><b>Table 1.5. Miscellaneous</b></p><table summary="Miscellaneous" border="1"><colgroup><col/><col/></colgroup><thead><tr><th align="left">Operator/Function</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">if / IF</td><td align="left">if statement for the construction of piecewise defined functions etc.</td></tr><tr><td align="left">()</td><td align="left">parenthesis for grouping of elements</td></tr></tbody></table></div><p>

</p><p>Basic function names can be written with either all lowercase letters or all letters uppercase. Mixing of upper and lowercase letters is not allowed and will lead to errors.
</p><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Caution</h3><p>
Although COPASI allows the usage of discontinuous functions (ceil, floor, factorial, etc) all integration is done by LSODA which officially can not handle discontinuous functions. Nevertheless in most cases this will lead to correct results, however you should be aware of the fact that the usage of discontinuous functions in COPASI can lead to errors. Later versions of COPASI will use different integration methods that will be able to deal with discontinuous functions.  
</p></div><p>
In addition to the function above, COPASI knows some predefined constant names:
</p><div class="table"><a id="d0e1427"/><p class="title"><b>Table 1.6. Built-in Constants</b></p><table summary="Built-in Constants" border="1"><colgroup><col/><col/></colgroup><thead><tr><th align="left">Name</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">pi / PI</td><td align="left"> quotient of a circles circumference and its diameter ( 3.14159...) </td></tr><tr><td align="left">exponentiale / EXPONENTIALE</td><td align="left"> Euler's number ( 2.7183... ) </td></tr><tr><td align="left">true / TRUE</td><td align="left">boolean true value for conditional expressions</td></tr><tr><td align="left">false / FALSE</td><td align="left"> boolean false value for conditional expressions</td></tr><tr><td align="left">infinity / INFINITY</td><td align="left"> positive infinity </td></tr></tbody></table></div><p>
</p><p>Again, built-in constant names can be written with either all lowercase letters or all letters uppercase. Mixing of upper and lowercase letters is not allowed and will lead to errors.
</p><p>
In addition to defining "normal" functions, COPASI allows the definition of piecewise defined functions. Piecewise defined functions are constructed with the IF statement. The IF statement in COPASI is used like a function with three arguments. The first argument is a conditional expression that evaluates to either TRUE or FALSE, the second argument is an expression that is evaluated if the condition evaluates to TRUE otherwise the third argument, which can also be an expression, determines the value of the function. The second and third argument to the IF statement must evaluate to a double value, that means it can not be a conditional expression like the first argument. On the other hand, the second and third arguments themselves can be IF statements. So in order to make this a little more clear, we will look at how one would implement the Heaviside step function in COPASI:
</p><p>
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
    <mml:mrow>
      <mml:mi>if</mml:mi>
      <mml:mo>(</mml:mo>
      <mml:mrow>
        <mml:mi>x</mml:mi>
        <mml:mo> lt </mml:mo>
        <mml:mn>0.0</mml:mn>
      </mml:mrow>
      <mml:mo>, </mml:mo>
      <mml:mn>0.0</mml:mn>
      <mml:mo>, </mml:mo>
      <mml:mi>if</mml:mi>
      <mml:mo>(</mml:mo>
      <mml:mrow>
         <mml:mi>x</mml:mi>
         <mml:mo> gt </mml:mo>
         <mml:mn>0.0</mml:mn>
      </mml:mrow>
      <mml:mo>, </mml:mo>
      <mml:mn>1.0</mml:mn>
      <mml:mo>, </mml:mo>
      <mml:mn>0.5</mml:mn>
      <mml:mo>)</mml:mo>
      <mml:mo>)</mml:mo>
    </mml:mrow>
  </mml:math>  
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="usingSliders"/>Defining and Using Sliders</h2></div></div></div><p>Sliders are user interface elements that let the user change model values without having to go to the corresponding dialog first. This way the user can change certain model values and immediately see the result this has on e.g. a time course simulation. The use of sliders is not limited to the time course task, but they can also be used for the steady state task and the metabolic control analysis.</p><p>Per default, the slider dialog is hidden, if you want it to be displayed, you have to activate it by toggling the corresponding menu entry in the <span class="guimenu">tools</span> menu or through the slider button in the tool-bar. Depending on what element is selected in the object tree, the dialog will be disabled and a text will be displayed within the dialog that tells you so. If you select a task (or an element below the task) that supports sliders, the sliders dialog will be enabled.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Sliders_01.png" align="middle" alt="Linux screenshot that shows COPASI with a plot window and the slider dialog"/><div class="caption"><p>COPASI with plot window and sliders</p></div></div></div><p>
</p><p>
Once the slider dialog has been activated, you can add new sliders with the <span class="guibutton">new slider</span> button at the top of the slider dialog. To edit the parameters of an already defined slider, just click on the <span class="guibutton">edit</span> button, which is located on the right side of the slider towards the bottom. If you no longer need a slider you have defined, you can close it by clicking on the <span class="guibutton">close</span> button which is the top button on the right side of the slider. 
Alternatively you can now add and modify existing sliders via a context menu. The context menu can be activated with the right mouse button (CTRL + Mouse button for single button mice on Macs!). If you right click on an existing slider, the menu will offer the possibilities to <span class="guisubmenu">delete</span> this slider or to <span class="guisubmenu">edit</span> it. If you right click into the dialog window where there is no slider, you will be offered the possibility to define a new slider.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Sliders_02.png" align="middle" alt="basic dialog for the definition of a slider"/><div class="caption"><p>basic slider definition dialog</p></div></div></div><p>
</p><p>
Once you are in the dialog for the definition of a new slider, you have to choose an object to manipulate via the slider. This object can be selected from the selection dialog that pops up when you click on the <span class="guibutton">choose object</span> button. The selection tree is the same as the ones you get when <a href="#plotDefinitions" title="Defining Plots">selecting objects for a report definition</a>. The selection dialog also offers an expert mode in case the object you want to manipulate with the slider is not present in the simplified tree. Usually the objects that you want to modify in  the time course simulation are one or several of the reaction parameters. This way you can interactively see how the behavior of your model changes when you change a specific parameter. In combination with plots this is a very powerful way to examine the behavior of your model.</p><p>After you have selected an object, you can set the parameters for the slider. You specify the range the slider has to cover in the <span class="guilabel">Minimum Value</span> and <span class="guilabel">Maximum Value</span> fields. Additionally you can specify if the slider shall have a logarithmic or a linear scale. Per default sliders have a linear scale. Normally a slider will be available for all tasks that support sliders. An exception to this are slider for objects that are directly associated with a specific task, e.g. the number of steps in a time series, if you choose such an object for a slider, the slider will only be available for this task.  
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Sliders_03.png" align="middle" alt="extended dialog for the definition of a slider"/><div class="caption"><p>extended slider definition dialog</p></div></div></div><p>
</p><p>
At the bottom of the dialog there is a button labeled <span class="guilabel">Advanced</span>. If you click on this button more options that influence the sliders behavior will show up. Clicking the button a second time will hide these options again.
The advanced options contain mostly fields that let you modify how many steps the slider has (see explanation below).
The <span class="guilabel">Object Value</span> field determines the current value of the object that is associated with the slider. In the <span class="guilabel">Number of minor ticks</span> field you specify how many minor ticks your slider will have. And in the <span class="guilabel">Tick-size factor</span> field you specify how many minor ticks make a major tick. Major ticks can be used to coarsely go through the range of the slider whereas minor ticks allow you to step through the range in a more fine grained fashion. Instead of specifying the number of minor ticks, you can specify the size of a minor tick. If you change either of those two values, the other one will be adjusted accordingly. The formula is 

  <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
    <mml:mrow>
      <mml:mi>minor tick size</mml:mi>
      <mml:mo>=</mml:mo>
      <mml:mrow>
        <mml:mo>(</mml:mo>
          <mml:mrow>
            <mml:mi>Maximum Value</mml:mi>
            <mml:mo>-</mml:mo>
            <mml:mi>Minimum Value</mml:mi>
          </mml:mrow>      
        <mml:mo>)</mml:mo>
        <mml:mo>/</mml:mo>
        <mml:mi>number of minor ticks</mml:mi>
      </mml:mrow>
    </mml:mrow>
  </mml:math>

.
Once you have made all the settings, you confirm the slider definition with the <span class="guibutton">OK</span> button. A new slider will appear in the slider dialog.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Sliders_04.png" align="middle" alt="slider dialog with three sliders"/><div class="caption"><p>slider dialog with three sliders</p></div></div></div><p>
</p><p>
Each slider shows the name of the object, the current value and the range in its label. If the current value of the slider is outside of the defined range, a corresponding warning will be shown.
The slider dialog has a check box called <span class="guilabel">update automatically</span> if this box is checked, COPASI will run the corresponding task each time you release a slider handle after moving it. If you don't want COPASI to automatically run the task each time you change a sliders value, you can uncheck this box and run the task manually by clicking on the <span class="guibutton">run task</span> button.</p>
If the value of an object for which a slider has been defined changes when a task is run, the slider will automatically show the new value. If the check box called <span class="guilabel">update ranges</span> is checked, the sliders will automatically adjust their range if the value falls outside of the defined range. If the new value is larger than the old maximum value, the new maximum will be set to twice the new value. Likewise if the new value falls below the old minimum value, the new minimum will be set to half the current value.
<p>Modifying a slider is essentially the same as defining a slider. The only difference being that you can not change the object the slider is connected to. In order to do that, you have to delete the slider and define a new slider for the new object.
</p><p>
Most people will probably use the sliders in combination with the mouse, dragging the sliders pointer to the desired new value. Since this way of using a slider is rather coarse, especially if the slider contains a large number of steps, you can also use the keyboard to change a sliders value. In order to do this, the slider you want to manipulate needs to have the keyboard focus. To give the keyboard focus, you have to hit the TAB key several times until the slider is surrounded by a small frame. Once the slider has this frame, you can increment and decrement the sliders value via the cursor and the page up/down keys on the keyboard. The cursor keys are used to change the value in small steps, the page up/down keys can be used to change the value in larger steps (see the explanation for major and minor keys above). 
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="tutorialWizard"/>Using the Tutorial Wizard</h2></div></div></div><p>COPASI also includes a short tutorial on how you create a model and run a time course simulation with plotting. You can start the wizard from the <span class="guimenu">help</span> menu. The corresponding menu entry is called <span class="guimenuitem">Simple Wizard</span>.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Wizard_01.png" align="middle" alt="tutorial wizard dialog screenshot"/><div class="caption"><p>tutorial wizard</p></div></div></div><p>
</p><p>
The wizard leads you in six steps from creating a model to doing a time course simulation of the model and plotting the results of the time course.</p><p>On the left side of the wizard there are six buttons that correspond to the six steps. When you first open the wizard, step one is selected and the widget on the right shows some documentation that you should read and possibly repeat the steps explained. Once you are finished with step 1, you can either click directly on the button that corresponds to step 2, or you can click the <span class="guibutton">forward</span> button which will always bring you to the next step. If you would like to reread something from an earlier step, you can move to the specific step with the buttons or use the <span class="guibutton">forward</span> and <span class="guibutton">backward</span> buttons to navigate.
</p></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="outputGeneration"/>Chapter 2. Generating Output</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="sect1"><a href="#predefinedReports">Predefined reports</a></span></dt><dt><span class="sect1"><a href="#outputAssistant">Using the Output Assistant</a></span></dt><dt><span class="sect1"><a href="#manualOutputDefinitions">Defining Output Manually</a></span></dt><dd><dl><dt><span class="sect2"><a href="#reportDefinitions">Defining Reports</a></span></dt><dt><span class="sect2"><a href="#plotDefinitions">Defining Plots</a></span></dt></dl></dd></dl></div><p>After you have <a href="#addingReactions" title="Adding and Editing Reactions">defined all reactions</a> that make up your model, you could go ahead and do some calculations with your model. For some of the task this is fine since they show you the results in a separate results dialog and it might not be necessary to store those results into a file. For other tasks, like e.g. a time course, it is very likely that you want to store the resulting trajectory in a file or plot the result for visual inspection. So if you want COPASI to store the results or do a plot of them, you have to define either a report and associate it with a file or define a plot. (In the <a href="#calculatingTrajectory">Running a Time Course Simulation</a> section we will also offer an alternative, albeit less flexible, way for storing the results of a time course simulation.)
</p><p>
COPASI already has a list of predefined reports suitable for some of the calculation task. These are described in the next paragraph.  If you want to create your own plots or reports you can either use the output assistant (the easy way) or you can define the output manually (the flexible way), as described in the <a href="#manualOutputDefinitions">Defining Output Manually</a> section. 
</p><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="predefinedReports"/>Predefined reports</h2></div></div></div><p>
For some of the calculation tasks predefined reports exist in COPASI. They are automatically created when COPASI is started or when a file is loaded that does not already contain them. These reports have the same name as the task they are suitable for. E.g. the predefined report for steady state calculations is "Steady-State".
The predefined reports print a description of the settings you provided for the calculation, usually (if it applies for the specific calculation) a table with intermediate results, and in the end a detailed report of the result.
The report definitions can be changed or deleted using the mechanism described in the <a href="#manualOutputDefinitions">Defining Output Manually</a> section. If you changed one of the predefined reports and want to go back to the original, just delete the report definition and save the file. When you load it again the now missing default report will be generated automatically.
</p><p>
If you want to use the predefined reports you have to make sure that the report is selected for a task and that a filename is associated with it. For this you can use the "Report" button as described in the sections about the specific calculation tasks below.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="outputAssistant"/>Using the Output Assistant</h2></div></div></div><p>
The output assistant presents the easiest way to generate your own output definitions which you can later adapt to your wishes using the techniques described in <a href="#manualOutputDefinitions">Defining Output Manually</a>.
Almost all task dialogs in COPASI have a button at the lower right that is labeled <span class="guibutton">Output Assistant</span>. If you click on this button, a new dialog will open that presents you with a list of predefined output definitions on the left. If you select one of the output definitions from the list, you will get a short description of what the output does on the right side of the dialog. Above the description is the title of the output definition. This title can be changed in order to be able to identify the different output definitions in case you are planning on creating more than one output definition of a certain type. Using this dialog both plots and reports can be created. 
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/OutputAssistant_01.png" align="middle" alt="Output Assistant Window"/><div class="caption"><p>output assistant selection dialog</p></div></div></div><p>
</p><p>
Creating an instance of the selected output objects is as easy a clicking on <span class="guibutton">Create!</span> at the bottom of the dialog. Once you clicked this button, a new report or plot, depending on what you selected in the dialog, will appear in the corresponding branch of the <span class="guilabel">Output</span> section of the model tree. The Output branch is the second to last branch in the tree on the left. The name of the output definitions will be the title of the object which you selected from the list. If another output definition in this section already has the same name, a postfix will be appended to the name. The so created output can now be edited or deleted. If the newly created output is a report it will automatically be selected as the active report for the current task. You then still have to select a filename for the output using the "report" button. This is described in the sections about the specific calculation tasks below. 
How output definitions are created, edit and deleted manually is the topic of the next sections.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="manualOutputDefinitions"/>Defining Output Manually</h2></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="reportDefinitions"/>Defining Reports</h3></div></div></div><p>
This section describes how to create or edit a report definition. Keep in mind that you still have to select this report for the specific calculation task you want to perform. You can do this (and also choose a filename to write to) using the "Report" button as described below in the sections about the different tasks.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Reports_01.png" align="middle" alt="report table with default reports"/><div class="caption"><p>Report Table with default Reports</p></div></div></div><p>
</p><p>
The dialog for defining report definitions is located under the <span class="guibutton">Output-&gt;Reports</span> branch in the object tree. Double clicking on an empty row in the table creates a new report object and opens the dialog for modifying the report definition. In this dialog, you can specify a name for the report in the <span class="guilabel">Name</span> field. From the <span class="guilabel">Task</span> drop-down list, you can choose for which kind of task this report should be written, so if you want to store the result of a time course, you choose <span class="emphasis"><em>Time-Course</em></span> here. The report usually stores the results of its task as a table; the standard separator character for elements in this table is the tab character (\t). If you want to have another character as the separator field, you have to uncheck the <span class="guilabel">&lt;tab&gt;</span> check box and specify the separator character or string you want in the <span class="guilabel">Separator</span> field.
</p><p>Beside the <span class="guilabel">&lt;tab&gt;</span> check box there is another input field labeled <span class="guilabel">Precision</span> with this field you can specify how many significant digits are used for numerical output. The default value is 6.
</p><p>
</p><p>
If you want to, you can also add a comment for the report, e.g. you could state what this report is supposed to represent.  
</p><p>
Next you have to define the objects that you want to appear in the report. There are two modes to define a report definition. Per default, the report is laid out as a table. E.g. the report for a time course simulation will write one line per time step and each line will typically contain the time followed by one or more metabolite concentrations. In the advanced mode, which you enter by clicking on the button labeled <span class="guibutton">Advanced</span>, the report is split up into three sections, a header, a body and a footer. You can define the output for each of the sections separately by clicking on the corresponding tab. In order to get back to the standard table layout, you have to click on the <span class="guibutton">Advanced</span> again. COPASI will warn you that you might loose some information by converting from the advanced report definition format to the table format.
</p><p>
Let's discuss how to define a report definition with table layout first since you will probably use this most of the time.
To add a new object to the report definition, you have to click on the button labeled <span class="guibutton">item</span>. This will open the object browser dialog.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Reports_02.png" align="middle" alt="simple selection dialog"/><div class="caption"><p>simple selection dialog</p></div></div></div><p>
</p><p>
The selection dialog shows a tree that contains what we think are the objects that would be most commonly used in generating report, plots, sliders etc. You select objects by clicking on the corresponding leave in the selection dialogs tree view. For plots and report, the simple selection dialog will allow you to select several objects at once. To select a continuous range of objects, you select the first object of the range, then you press and hold the SHIFT button and select the last object in the range. You can also make non-continuous selection by holding down the CTRL key while clicking on the object to select/deselect. Also selecting a whole branch in the selection dialog will select all the leaves under that branch.
</p><p>
If this simple selection dialog does not contain the object that you want to include in your report, you can activate an extended selection tree by activating the <span class="guibutton">expert mode</span> check box. The tree you now see contains all objects COPASI knows about. In this tree, the objects that belong to your model are located in the branch that corresponds to the name of your model. The position of that branch varies since the branches are sorted alphabetically. The selection you might already might have made in the simple selection tree should be preserved and vice versa. Any selection you make in the full tree is preserved when you switch back to the simple tree. Each branch of the full tree has a check box up front which can assume three states. The unchecked state means that no objects in this subtree are selected. A check mark on a black background means that the whole subtree is selected, i.e. all objects in this subtree are selected. A check mark on a gray background means that part of the subtree is selected.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Reports_03.png" align="middle" alt="object browser dialog expert mode"/><div class="caption"><p>object browser dialog expert mode</p></div></div></div><p>
</p><p>
Due to the model structure, most objects appear more than once in the tree. So if you select some object, you should not be surprised, if more than the selected object suddenly change their selection state. E.g. if you select the whole <span class="guibutton">Compartments</span> subtree of your model, all the metabolites which are part of the compartments get selected as well which means that on selecting the <span class="guibutton">Compartments</span> branch, the whole <span class="guibutton">Metabolites</span> branch changes its state to selected.</p><p>
Let's assume you want to define the report for a trajectory task. In this case, you will probably want the time and some or all of the transient concentrations of the metabolites in your report. The time for the time course is the last item in the model branch, you select it by clicking on the check box in front of the name. If you want to add the concentrations of all metabolites, you open the <span class="guibutton">Metabolites</span> sub-branch in the <span class="guibutton">Model</span> branch and open the <span class="guibutton">Select by attribute</span> branch. There you can select the <span class="guibutton">Concentration</span> attribute. Selecting the <span class="guibutton">Concentration</span> attribute will select the concentrations for all metabolites. If you only want to have some of the metabolites in your report, you open the sub-branches of the metabolites you want in the <span class="guibutton">Metabolites</span> branch and select the <span class="guibutton">Concentration</span> attribute only for those metabolites. If your model contains many metabolites and you want to have all but one in your report, it is often easier to first select all concentrations via the <span class="guibutton">Select by attribute</span> branch and then deselect the ones you don't want, rather then selecting the individual concentrations you want. Once you are finished with selecting the objects for your report, you confirm the selection by clicking the <span class="guibutton">OK</span> button in the selection dialog. The objects you selected will now appear in the list box of the report definition dialog. </p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Reports_04.png" align="middle" alt="report definition dialog"/><div class="caption"><p>report definition dialog</p></div></div></div><p>
They will appear in the report in the same order as they appear in this list. To reorder the entries in the list, you can select individual entries and move them up and down in the list with the according buttons to the left of the list. For example it might be a good idea to move the time object to the top of the list so that it will appear as the first table column in the file since this is the way most programs would expect it. Also in order to delete unnecessary items, you just select them and click on the <span class="guibutton">Delete</span> button. 
The only thing that is now left is to connect this report to a file. This has to be done in the dialog for the specific task and we will cover this when we explain how to run the individual tasks.
</p><p>
The report we just defined will be written in the form of a table. So if this was a report for a time course simulation, the final output would have one line per time step of the simulation and in each line, each object that is in the list would be written once separated by whatever you defined as your separation character (Normally this would be the &lt;TAB&gt; character).
</p><p>
Per default, the check box labeled <span class="guilabel">Title Row</span> is activated which means that COPASI will write a header line before the table with the names of the objects that make up the individual columns. If you don't want such a header in the output you have to deactivate this check box.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Reports_05.png" align="middle" alt="advanced report definition dialog"/><div class="caption"><p>advanced report definition</p></div></div></div><p>
As stated above, the advanced report definition allows you to define the output for the three parts of the report separately. The header part of the report is written once before the corresponding task, the output of the body elements occurs once per step of the corresponding task, e.g. for the time course once every time step and the footer is written once after the task has finished. In this sense, the standard table report definition is nothing but an advanced report definition with a title header and a body that consists of the time and some metabolite concentrations separated by separator items. The footer is empty.
If you write your own advanced report definition, you are responsible to add separator tags where appropriate. An advantage to the standard report definition is that you can add arbitrary text to any of the three sections. Everything else works as described for the standard report definition, you can add and delete items by selecting them from the object browser dialog. And just like in the standard report definition, you can move these items up and down by selecting them and clicking on the <span class="guibutton">up</span> or <span class="guibutton">down</span> button. Separator items can be added by clicking on the <span class="guibutton">Separator</span> button. The symbol or text that makes up the separator item is again defined by the check box and the adjacent input field towards the top of the report definition dialog.  
</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="plotDefinitions"/>Defining Plots</h3></div></div></div><p>Plotting is another form of output that COPASI can do. Most of the time, you probably want to plot some or all of the metabolites concentrations during a time course simulation and as described above, this is easiest done by choosing that predefined plot template from the <a href="#outputAssistant" title="Using the Output Assistant">Output Assistant</a>. But since the output assistant can not cover all possible plots sometimes you will have to define your own plots.</p><p>
Currently, COPASI only supports two dimensional plotting. To define a plot, you open the plot definition dialog which you reach by selecting the <span class="guibutton">Output-&gt;Plots</span> branch in the object tree. A plot in COPASI is made up of a number of curve or histogram objects. In order to add a new curve object you click on the <span class="guibutton">New curve...</span> button. A selection dialog similar to the one described for the <a href="#reportDefinitions" title="Defining Reports">creation of reports</a> will appear. The major difference is that you now have two tree views side by side instead of one as for the report definitions. The left tree is a single selection dialog and it lets you specify the object that is to be drawn along the x axis. For a plot of concentration against time this would be the simulation time. The right tree is again a multi-selection tree that lets you specify what is to be drawn along the y-axis. Again for a plot of concentrations against time this would be one or more concentrations of metabolites. Just as described for the report definitions, you can switch between a simple tree and the full tree, but for most plots the simple tree will be enough.</p><p>Once you have finished your selection, you click on the <span class="guibutton">OK</span> button which will take you back to the curve definition dialog. For each object selected in the right tree, you will now see one tab which represent the corresponding curve object for the plot. To remove one of the curves, you have to select the tab that corresponds to the curve you want to remove and then click on the <span class="guibutton">Delete curve</span> button. The next time you do a <a href="#calculatingTrajectory" title="Running a Time Course Simulation">time course simulation</a>, each plot that is marked as active will be plotted automatically. How you define a plot as being active will be explained below.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Plots_01.png" align="middle" alt="empty plot widget"/><div class="caption"><p>empty plot widget</p></div></div></div><p>
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Plots_03.png" align="middle" alt="selection dialog with some items selected"/><div class="caption"><p>simple selection dialog with selected items</p></div></div></div><p>
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Plots_04.png" align="middle" alt="expert selection dialog for curve objects"/><div class="caption"><p>selection dialog in expert mode</p></div></div></div><p>
</p><p>
Each curve object has a title, and the information what will be drawn on the x- and y-axis. Additionally you can specify whether the curve should be drawn as a line, as points or as symbols. This has to be specified for each curve separately. You can also specify if the plot should be drawn with a logarithmic scale for one or both of the axis. 
</p><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Caution</h3><p>On Mac OS X, the tab widget does not handle very wide tabs or many tabs well. This problem will be dealt with in upcoming versions of COPASI.</p></div><p>In the plot definition dialog, in addition to adding and removing curve objects, you can specify a name for the plot definition and you can specify whether the plot should be active or not with the <span class="guilabel">active</span> check box. (Only plots that are active are drawn when a <a href="#calculatingTrajectory" title="Running a Time Course Simulation">time course simulation</a> is run!)</p><p>Another way to specify whether a plot is active or not is in the plot table where all the plots are listed. Each row in the table contains a column named <span class="guilabel">active</span> that contains a check box with which you can toggle the state of a plot. If you changed the state of one or more plots, you have to commit these changes either by clicking the <span class="guibutton">Commit</span> button or any other action that is equivalent to pressing the <span class="guibutton">Commit</span> button (see <a href="#addingCompartments">Adding and Editing Compartments</a> section).
</p><p>In addition to curves, you can also tell COPASI to draw a histogram of the data generated during a time course simulation (see <a href="#calculatingTrajectory">Running a Time Course Simulation</a>) or a parameter scan (see <a href="#parameterScan">Doing a Parameter Scan</a>). A histogram draws a bar graph that shows how often the parameter took a certain value. To define a histogram instead of a curve you click on the <span class="guibutton">New Histogram...</span> button in the plot definition dialog. For the new histogram you can specify a title, the variable for which the histogram should be drawn and the increment of the value. The increment parameter tells COPASI how wide the individual bars of the histogram are going to be. Let's say the value of the parameter was in the range of 3 to 8 and you set the increment to 0.1, COPASI will draw a histogram with 50 bars, each bar representing a value range of 0.1 units. Curves and histograms can be combined in a single plot.
</p></div></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="simpleTasks"/>Chapter 3. Simple Tasks</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="sect1"><a href="#steadyStateAnalysis">Doing a Steady State Analysis</a></span></dt><dt><span class="sect1"><a href="#stoichiometryStateAnalysis">Elementary Modes and Mass Conservation</a></span></dt><dd><dl><dt><span class="sect2"><a href="#elementaryModes">Calculating Elementary Modes</a></span></dt><dt><span class="sect2"><a href="#massConservation">Calculating Mass Conservations</a></span></dt></dl></dd><dt><span class="sect1"><a href="#calculatingTrajectory">Running a Time Course Simulation</a></span></dt><dd><dl><dt><span class="sect2"><a href="#workingWithPlots">Working with Plots</a></span></dt></dl></dd><dt><span class="sect1"><a href="#calculatingMCA">Doing a Metabolic Control Analysis (MCA)</a></span></dt><dt><span class="sect1"><a href="#lyapunovExponents">Calculating Lyapunov Exponents</a></span></dt></dl></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="steadyStateAnalysis"/>Doing a Steady State Analysis</h2></div></div></div><p>In order to run a steady state analysis, you have to navigate to the <span class="guibutton">Task-&gt;Steady-State</span> branch in the object tree.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/SteadyStateTask_01.png" align="middle" alt="dialog for doing calculating a stability analysis"/><div class="caption"><p>steady state task dialog</p></div></div></div><p>
In the dialog that appears there, you can make several settings that influence the way the steady state analysis is calculated. First of all, you can decide whether COPASI should calculate the Jacobian matrix and/or do a stability analysis as well by checking the corresponding check box. The <span class="guilabel">executable</span> check box is used to instruct the commandline version CopasiSE to run this task if run on the corresponding file. In the <span class="guilabel">Parameter value</span> table you can also make several settings that influence the method for calculating the steady state itself. For a detailed description of those parameters see the corresponding methods part of this documentation. 
To finally run the steady state calculation, click on the <span class="guibutton">Run</span> button at the bottom of the screen. After the calculation, COPASI will jump to the results widget.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/SteadyStateTask_02.png" align="middle" alt="dialog that displays the results of the stability analysis"/><div class="caption"><p>results of the stability analysis</p></div></div></div><p>
</p><p>
The results widget for the steady state calculation contains several tabs for the individual results. The first and the second tab contain the concentrations and the particle number at the steady state respectively. The third tab contains the fluxes for the reactions at the steady state. It contains concentration fluxes as well as particle fluxes. The fourth and fifth tab only contain results if you told COPASI to calculate the Jacobian matrix. The fourth tab then shows the Jacobian for the full system and the fifth tab contains the Jacobian matrix for the reduced system. The sixth and last tab contains the results for the stability analysis if a stability analysis was requested.  
</p><p>
If you want to have output from the Steady State Task, you have to create an output definition as described in the <a href="#outputGeneration">Generating Output</a> section or you use the default report named "Steady State". The default report prints a message telling whether a steady state was found. It also reports the concentration, concentration rate, particle number, particle number rate, and transition time of all metabolites as well as the flux for all reactions. The easiest way to get a customized output is probably to use the output assistant which you activate via the <span class="guibutton">Output Assistant</span> button. This is described in the <a href="#outputAssistant">Output Assistant</a> section. All that is left to do in order to write the output to a specific file is to connect an output definition  with a file. This can be achieved by clicking on the <span class="guibutton">Report</span> button. This opens a dialog that lets you connect the report for a specific task to a file on your hard disk. First we choose a report that is suitable for the Steady State task from the drop down list at the top of the dialog. Next, we specify a file that will be used to store the report by clicking on the <span class="guibutton">browse</span> button and selecting the destination in the file dialog that opens. Per default, COPASI creates a new file or overwrites an existing file with the same name. Alternatively, you can tell COPASI to append the report to the end of an existing file by selecting the corresponding check box labeled <span class="guilabel">Append</span> at the bottom of the dialog. Once you are finished, you click on the <span class="guilabel">Confirm</span> button. If you now run the task, COPASI will write the output to the file you specified. 
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="stoichiometryStateAnalysis"/>Elementary Modes and Mass Conservation</h2></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="elementaryModes"/>Calculating Elementary Modes</h3></div></div></div><p>Letting COPASI calculate the elementary modes for the system is very easy. Select the <span class="guibutton">Tasks-&gt;Stoichiometry-&gt;Elementary Modes</span> in the object tree and click on the <span class="guibutton">Run</span> button in the dialog that appears.  
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ElementaryModesTask_01.png" align="middle" alt="dialog showing the calculated elementary modes for a model"/><div class="caption"><p>elementary analysis dialog with results</p></div></div></div><p>
</p><p>
The elementary modes found will be displayed directly in this dialog. Each elementary mode lists the reactions it consists of together with their chemical equations. 
</p><p>
If you want to have output from the Elementary Mode calculation, you have to create an output definition as described in the <a href="#manualOutputDefinitions">Defining Output Manually</a> section. The easiest way is probably to use the output assistant which you activate via the <span class="guibutton">Output Assistant</span> button. This is described in the <a href="#outputAssistant">Output Assistant</a> section. All that is left to do in order to write the output to a specific file is to connect an output definition  with a file. This can be achieved by clicking on the <span class="guibutton">Report</span> button. This opens a dialog that lets you connect the report for a specific task to a file on your harddisk. First we choose a report that is suitable for the elementary mode analysis task from the dropdown list at the top of the dialog. Next, we specify a file that will be used to store the report by clicking on the <span class="guibutton">browse</span> button and selection the destination in the file dialog that opens. Per default, Copasi creates a new file if the file does not exist, or asks wether the file should be overwritten. Alternatively, you can tell Copasi to append the report to the end of an existing file by selecting the corresponding check box labeled <span class="guilabel">Append</span> at the bottom of the dialog. Once you are finished, you click on the <span class="guilabel">Confirm</span> button. If you now run the task, Copasi will write the output to the file you specified. 
</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="massConservation"/>Calculating Mass Conservations</h3></div></div></div><p>Calculating mass conservations in COPASI is also very easy. Navigate to the <span class="guibutton">Tasks-&gt;Stoichiometry-&gt;Mass Conservation</span> branch in the object tree and click on the <span class="guibutton">Recalculate</span> button.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/MassConservationTask_01.png" align="middle" alt="dialog showing the results of a mass conservation calculation"/><div class="caption"><p>mass conservation task dialog with results</p></div></div></div><p>
</p><p>
If the model contains any mass conservation relations they will be listed in a table directly in this dialog. </p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/MassConservationTask_02.png" align="middle" alt="dialog that shows one single mass conservation relation"/><div class="caption"><p>single mass conservation dialog</p></div></div></div><p>
</p><p>
Every mass conservation relation also has a separate leave in the object tree below the current dialog. To see those, either navigate there in the object tree or double click on the entry in the table.
</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="calculatingTrajectory"/>Running a Time Course Simulation</h2></div></div></div><p>To do a time course simulation, you have to navigate to the corresponding task branch in the object tree which is located at <span class="guibutton">Tasks-&gt;Time Course</span>.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/TimeCourseTask_01.png" align="middle" alt="dialog for calculating a trajectory"/><div class="caption"><p>trajectory task dialog</p></div></div></div><p>
</p><p>
In the Time-Course widget you can change several parameters for the time course, e.g. the duration of the simulation and the number of intervals that are being calculated in the time range. Alternatively to setting the number of intervals, you can also set the size of the interval. If you set either one, the other will be updated accordingly. Also if you change the duration the number of intervals will stay the same, which means that the interval size will be adjusted. The checkbox labeled <span class="guilabel">store time series in memory</span> tells Copasi to keep the result of the time series calculation in memory in order to display it in a result dialog. Since this can be a large amount of data depending on the size of your model and/or the number of intervals you want Copasi to calculate, you should disable this if you think the result might not fit into memory. The consequence of disabling this checkbox is that you need to <a href="#reportDefinitions" title="Defining Reports">define a report</a> in order to store the results of the time course simulation.</p><p>Another thing that you can adjust in this dialog is the time at which Copasi starts to record the output. Normally Copasi will store all output and display it in the plot and reports if there are any or in the results dialog if that feature was not disabled (see above). With the <span class="guilabel">Start Output Delayed</span> checkbox and input field, you can specify that Copasi shall drop all results prior to a certain timepoint. E.g. you could decide that you want to run a time course simulation for 100 seconds but that you are only interested in the last 50 seconds of the simulation. In this case you would activate the <span class="guilabel">Start Output Delayed</span> checkbox and specify a delay of lets say 50. This delay will be used for all kinds of output.</p><p>The time course simulation does not necessarily start with 
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
  <mml:msub>
    <mml:mi>t</mml:mi>
    <mml:mn>0</mml:mn>
  </mml:msub>
  <mml:mo>=</mml:mo>
  <mml:mn>0</mml:mn>
</mml:math>
. The start time of the time couse simulation depends on the initial model time which can be specified in the <a href="#generalSettings" title="General Model Settings">general model settings dialog</a>.</p><p>Copasi supports four different methods for calculating time course simulations. Copasi can use the LSODA solver to calculate the time course deterministically or it can use a stochastic solver which uses the method described by <span class="emphasis"><em>Gibson and Bruck</em></span> to calculate the time course stochastically. Depending on the solver you have chosen, you can set several parameters in the <span class="guilabel">Parameter value</span> table that influence the way the method works. A detailed explanation of those parameters will follow in the methods part of this document.</p><p>In addition to purely deterministic or purely stochastic time course simulations, Copasi can also use a so called hybrid method to calculate a trajectory. This hybrid method splits the model in two segments according to the number of particles participating in a reaction. Reactions with many particles are simulated deterministically and those reactions with only a few particles are simulated stochastically. The boundaries of what is considered many or few particles can be set by the user. Depending on the nature of  the model, the hybrid simulation can lead to significant simulation speedup compared to purely stochastic simulation while still being more accurate than purely deterministic simulation for small particle numbers. However, the method should still be considered experimental. For a more detailed description of the method and the attributes that you can set see the methods section.</p><p>The hybrid solver comes in two flavors. One uses LSODA for deterministic simulation and is called <span class="emphasis"><em>Hybrid (LSODA)</em></span>, the other uses Runge-Kutta fourth order and is called <span class="emphasis"><em>Hybrid (Runge-Kutta)</em></span>.</p><p>If you haven't created a report definition yet, you can use the output assistant to easily create one by clicking on the corresponding button at the bottom of the time course dialog. Once you have <a href="#reportDefinitions" title="Defining Reports">created a report definition</a>, you have to associate this report definition with a file for COPASI to be able to write the results to that file. To do that, you click on the <span class="guibutton">Report</span> button.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/TimeCourseTask_02.png" align="middle" alt="dialog to associate a report with a file"/><div class="caption"><p>file association dialog for a time course report</p></div></div></div><p>
</p><p>
The dialog that pops up will let you choose the report you want to use (in case you created more than one) and lets you browse for a file to store the report to. Additionally, you can choose if you want to append the report to an already existing file. The default is to create a new file, or to overwrite an existing file. If you want to append to the selected file, you have to check the <span class="guilabel">Append</span> check box.</p><p>Once you made all the desired changes to the parameters, you can start the time course simulation by clicking on the run button. COPASI will show a progress bar while running the simulation, which might take some time depending on several factors like the hardware you are using, the simulation method you chose and/or the size of your model. Once COPASI finishes the calculation, you will find the results in the report file you defined and/or in a separate result dialog if you told COPASI to keep the results in memory.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/TimeCourseTask_03.png" align="middle" alt="dialog that shows the results of the trajectory task"/><div class="caption"><p>trajectory results</p></div></div></div><p>
</p><p>
The results dialog is located directly below the time course branch in the object tree. In this widget you can choose whether you want the results to be displayed as concentrations or as particle numbers and you have the possibility to store the results to a file. The advantage a report has over writing a file in the results widget is that you can choose exactly which metabolite concentrations you want to store whereas the results dialog always stores all metabolites concentrations. You also can't change the order in which the metabolite concentrations are written if you store the result from this dialog.   
</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="workingWithPlots"/>Working with Plots</h3></div></div></div><p>If you have an active plot defined while calculating a trajectory COPASI will draw the plot. The plot window has three elements. A tool bar at the top, that lets you print the plot or save the data into a file. The actual plot and a legend at the bottom. The legend at the bottom is interactive and drawing of certain curves can be toggled by clicking on the corresponding legend entry.</p><p>While moving the mouse cursor inside a plot widget, the mouse coordinates are displayed beside the mouse cursor. The numbers represent coordinates from the coordinate system of the plot.</p><p>In order to zoom further into a plot, you can select a rectangular area on the plot by clicking somewhere in the plot and dragging the pointer. The plot will now zoom into the area you just selected. To go back to the original plot, right click on the plot area. </p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>Macintosh users with single button mice use CTRL-click.</p></div><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Caution</h3><p>The qwt plot widget has some problems under Mac OS X. Especially zooming often leads to strange artifacts. Also the mouse coordinates that are normally drawn with the cursor are unreadable on COPASI for Mac OS X</p></div><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/PlotWindow_01.png" align="middle" alt="dialog window showing a plot"/><div class="caption"><p>COPASI plot window</p></div></div></div><p>
</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="calculatingMCA"/>Doing a Metabolic Control Analysis (MCA)</h2></div></div></div><p>COPASI can also do a Metabolic Control Analysis (MCA) for your model. The MCA task is located under <span class="guibutton">Tasks-&gt;Metabolic Control Analysis</span>.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/MCATask_01.png" align="middle" alt="dialog for running a metabolic control analysis"/><div class="caption"><p>MCA task dialog</p></div></div></div><p>
</p><p>In order to do a full MCA (elasticities and control coefficients), COPASI needs to look for a steady state first, otherwise COPASI can only calculate the elasticities. If you did not already <a href="#steadyStateAnalysis" title="Doing a Steady State Analysis">do a steady state calculation</a> right before so that the system already is in the steady state if one was found, you should enable the check box that tells COPASI to do a steady state calculation before calculating the MCA. Depending on whether COPASI needs to do a steady state analysis or not, you can change one or more parameters that influence the way the MCA and the steady state are calculated. The parameters for the steady state calculation or the same as for the steady state widget explained in the <a href="#steadyStateAnalysis">Doing a Steady State Analysis</a> section. 
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/MCATask_02.png" align="middle" alt="dialog showing the results of the metabolic control analysis"/><div class="caption"><p>MCA results</p></div></div></div><p>
</p><p>
To start the calculation, you click the <span class="guibutton">Run</span> button. After the calculation is finished, COPASI will automatically switch to the results dialog. The results dialog shows three tabs that contain the results for the elasticities, flux control coefficients and concentration control coefficients.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/MCATask_03.png" align="middle" alt="dialog showing the results of the MCA after no steady state was found"/><div class="caption"><p>MCA results at none steady state</p></div></div></div><p>
</p><p>
Depending on whether a steady state was found or not, only the elasticities tab might be enabled. COPASI will state that it could not find a steady state in a label right above the tabs. For all of the results, you can choose if you want COPASI to display them scaled or unscaled.
</p><p>
If you want to have output from the MCA, you have to create a report as described in the <a href="#outputGeneration">Generating Output</a> section or you decide to use the default report. The default report will output all matrices that are calculated as well as the steady state, if steady state calculation is requested.  All that is left to do in order to write the output to a specific file is to connect an output definition  with a file. This can be achieved by clicking on the <span class="guibutton">Report</span> button. This opens a dialog that lets you connect the report for a specific task to a file on your hard disk. First we choose a report that is suitable for the MCA task from the drop down list at the top of the dialog. The default report for MCA is called "Metabolic Control Analysis". Next, we specify a file that will be used to store the report by clicking on the <span class="guibutton">browse</span> button and selecting the destination in the file dialog that opens. Per default, COPASI creates a new file or overwrites an existing file with the same name. Alternatively, you can tell COPASI to append the report to the end of an existing file by selecting the corresponding check box labeled <span class="guilabel">Append</span> at the bottom of the dialog. Once you are finished, you click on the <span class="guilabel">Confirm</span> button. If you now run the task, COPASI will write the output to the file you specified. 
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="lyapunovExponents"/>Calculating Lyapunov Exponents</h2></div></div></div><p>The widget to calculate Lyapunov exponents in COPASI is located in the <span class="guibutton">Task</span> branch of COPASI's tree view. If you select the <span class="guibutton">Lyapunov Exponents</span> item in the tree, the corresponding widget will be displayed. The first input field in the widget labeled <span class="guilabel">Number of exponents</span> lets you specify how many Lyapunov Exponents are to be calculated. This number should be between 1 and the number of independent variables in the system (that is the number of metabolites that are not constant minus the number of mass conservation relations). If you specify a number that is higher than the number of independent variables in the system, COPASI will issue a warning telling you to lower the number and it will also tell what the maximal number should be. During the calculation of the Lyapunov Exponents, a time course simulation is carried out. If your model shows a long transient, you might want to exclude the beginning of the trajectory from the calculation of the Lyapunov exponents. For this, COPASI lets you specify at which time point the averaging for the Lyapunov exponents should start. You can specify this delay in the field labeled <span class="guilabel">"Start averaging after t= "</span>. If you check the <span class="guibutton">Use result as new initial state</span> check box, COPASI will use the state of the model after the simulation as the new initial state for all following calculation. Please note that all old model values are replaced. </p><p>With the check box labeled <span class="guilabel">calculate Divergence</span> you can activate the calculation of the average divergence. The divergence is calculated as the average over the trace of the Jacobian (see Lyapunov calculation method).  
</p><p>So far there is only one method available to calculate Lyapunov Exponents and this method is called <span class="emphasis"><em>Wolf Method</em></span>. For a more detailed description of the method and its parameters please see the corresponding methods section.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Lyapunov_01.png" align="middle" alt="Lyapunov task widget"/><div class="caption"><p>Lyapunov task widget</p></div></div></div><p>
</p><p>After clicking the <span class="guibutton">Run</span> button, COPASI will start the time course simulation in order to calculate the Lyapunov Exponents. Once the calculation is finished, COPASI will jump to the results window. The result window shows the calculated Lyapunov exponents in a table and beneath the table it shows the sum of the calculated exponents. If you told COPASI to calculate the divergence as well, this will be displayed underneath the sum display. If you told COPASI to calculate all Lyapunov exponents (as many as there are independent variables in the model), the sum of the exponents and the divergence should be equal; if it isn't COPASI will display a warning. Since the warning only makes sense if all exponents have been calculated, it will not be displayed otherwise because it is expected that the divergence and the sum differ in those cases.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Lyapunov_02.png" align="middle" alt="Results window for the Lyapunov Exponent calculation."/><div class="caption"><p>Results from a Lyapunov Exponent calculation.</p></div></div></div><p>
</p><p/></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="complexTasks"/>Chapter 4. Complex Tasks</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="sect1"><a href="#parameterScan">Doing a Parameter Scan</a></span></dt><dt><span class="sect1"><a href="#optimization">Running an Optimization Task</a></span></dt><dt><span class="sect1"><a href="#parameterEstimation">Parameter Estimation</a></span></dt></dl></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="parameterScan"/>Doing a Parameter Scan</h2></div></div></div><p>The leaf for parameter scans in the object tree is located under <span class="guibutton">Multiple Tasks -&gt; Parameter Scan</span>. At the top the dialog displays a box called <span class="guilabel">New scan item</span> together with a <span class="guibutton">create...</span>. and when the dialog is opened for the first time, the only item in the widget below is a green box called <span class="guilabel">Task</span>. This widget contains a drop down list with all the tasks that can be used in a scan. Additionally there is a check box called <span class="guilabel">always use initial conditions</span> and a check box called <span class="guilabel">output from subtask</span>.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_01.png" align="middle" alt="dialog showing scan task dialog when first opened"/><div class="caption"><p>Initial scan task dialog</p></div></div></div><p>
</p><p>
   The tasks for which scans can be conducted are steady state, time course, metabolic control analysis, and Lyapunov exponents calculations. So if we want to do a scan for a time course calculation, we choose "Time Course" from the drop down list in the <span class="guilabel">Task</span> widget. We will ignore the two check boxes for the time being and take a look at the drop down list at the top of the <span class="guilabel">Scan Task</span> dialog. This drop down list contains three entries named "Parameter Scan", "Repeat" and "Random distribution". Those are additional elements that can be added to the main widget below to form complex tasks. Let's look at one after the other and start with the "Parameter Scan". As it is right now, the scan task does not do anything since we haven't told it yet which parameter we want to scan. To define a parameter for the scan, you choose "Parameter Scan" from the drop down list at the top and press the create button. COPASI will add a new widget to the dialog that is called <span class="guilabel">Scan</span>. The <span class="guilabel">Scan</span> widget contains some empty line edit fields and a button labeled <span class="guibutton">...</span> and a check box labeled <span class="guilabel">logarithmic</span>. </p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_02.png" align="middle" alt="dialog showing scan task dialog with a Parameter Scan item"/><div class="caption"><p>scan task dialog with scan item</p></div></div></div><p>
</p><p>
The first thing you have to do is to select the parameter for the scan. You do this by clicking on the <span class="guibutton">...</span> button and selecting some parameter from the selection dialog that appears. Once you are finished with your selection and pressed the <span class="guibutton">OK</span> button, the name of the object you chose will appear in the line edit field beside the <span class="guibutton">...</span> button. In the line edit fields below you can now specify the minimal value the parameter will have during the scan as well as the maximal value. After choosing the object, these values will be set to half the objects value for the minimum and double the objects value for the maximum. In the <span class="guilabel">Interval</span> you can specify how many intervals COPASI uses during the scan to raise the value from minimum to maximum. Last but not least, the <span class="guilabel">logarithmic</span> check box determines whether the value is raised in linear steps if the box is unchecked or in logarithmic steps if the box is checked.  Now you are set to run your first simple scan by clicking on the <span class="guibutton">Run</span> at the bottom of the dialog. In order to actually see some result, you have to have some kind of output defined. The scan task can generate reports and, if a plot is defined, the scan task will do plotting while running the scan. If you did not change the number of intervals from the default, the scan task will run 10 time course simulations each with a different value for the chosen parameter and in turn you will see 10 plots overlaid in one plot window.
</p><p>
If you want to have output from the parameter scan, you have to create an output definition as described in the <a href="#outputGeneration">Generating Output</a> section. The easiest way is probably to use the output assistant which you activate via the <span class="guibutton">Output Assistant</span> button. This is described in the <a href="#outputAssistant">Output Assistant</a> section. All that is left to do in order to write the output to a specific file is to connect an output definition  with a file. This can be achieved by clicking on the <span class="guibutton">Report</span> button. This opens a dialog that lets you connect the report for a specific task to a file on your hard disk. First we choose a report that is suitable for the parameter scan task from the drop down list at the top of the dialog. Next, we specify a file that will be used to store the report by clicking on the <span class="guibutton">browse</span> button and selecting the destination in the file dialog that opens. Per default, COPASI creates a new file or overwrites an existing file with the same name. Alternatively, you can tell COPASI to append the report to the end of an existing file by selecting the corresponding check box labeled <span class="guilabel">Append</span> at the bottom of the dialog. Once you are finished, you click on the <span class="guilabel">Confirm</span> button. If you now run the task, COPASI will write the output to the file you specified. 
</p><p>
    So far we have only scratched the surface of the scan dialog. E.g. if you want to do a two-dimensional scan, i.e. a scan where two parameters are independently scanned, you can add a second <span class="guilabel">Scan</span> widget by adding it to the main dialog just like you did for the first parameter. You select "Parameter Scan" in the drop down list and push the <span class="guibutton">... Create!</span> button.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_03.png" align="middle" alt="dialog showing scan task dialog with two Parameter Scan items"/><div class="caption"><p>scan task dialog with two scan items</p></div></div></div><p>
</p><p>
After adjusting the minimum and maximum as well as the number of intervals, you can run the scan task again. COPASI will now do a scan for the first parameter while holding the second parameter constant at the minimum. Next, COPASI will raise the second parameter and do another scan from minimum to maximum for the first parameter. This way a full scan for the first parameter is done for every value of the second parameter. You have to be careful because assuming that you chose 10 intervals for both parameters, COPASI will run 100 time course simulations during this two-dimensional scan which can take a long time.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_04.png" align="middle" alt="dialog showing scan task dialog with a Random distribution item"/><div class="caption"><p>scan task dialog with random distribution item</p></div></div></div><p>
</p><p>
    The "Random distribution" item is similar to the "Parameter Scan" item. With the random distribution a parameter can be given a random value. After adding a "Random distribution" widget to the main dialog, you first have to choose a parameter for which a random value will be set. You can then choose from three distribution types to generate the random value. The three distributions are "Uniform distribution", "Normal Distribution" and "Poisson Distribution". Additionally you have to set the bounds within which the random value will be set (Uniform Distribution) or the mean and average values (Normal Distribution and Poisson Distribution). If all has been set and you press the <span class="guibutton">Run</span>, COPASI will set the parameter value to a random value from the chosen distribution and run one time course simulation.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_05.png" align="middle" alt="dialog showing scan task dialog with a Random distribution and Repeat item"/><div class="caption"><p>scan task dialog with random distribution and repeat item</p></div></div></div><p>
</p><p>
    The "Repeat" item can be used to repeat a certain action several times. E.g. if you add a <span class="guilabel">Repeat</span> widget above a "Random distribution" item, the parameter will be given a random value as many times as specified in the "Repeat" item and time course simulation is run with this value or one of the other tasks specified in the <span class="guilabel">Task</span> item at the bottom of the main widget.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_06.png" align="middle" alt="dialog showing scan task dialog with a more complex combination of actions"/><div class="caption"><p>scan task dialog with combination of actions</p></div></div></div><p>
</p><p>
Different items can be combined in many ways to achieve certain goals. E.g. you could run 10 parameter scans for a certain value each with a different random value for another parameter by combining a "Parameter Scan" item with a "Random distribution" item and a repeat item.
</p><p>
With the buttons on the left of each item other than the <span class="guilabel">Task</span> at the bottom, you can move the items up or down in the list or close an item you no longer need. The order of the items in the main widgets determines in which order COPASI will handle the actions. A widget is controlled by the widget above it. So a <span class="guilabel">Repeat</span> item acts on the widget directly below it. This can be rather important. Consider you have added a <span class="guilabel">Repeat</span> widget and a <span class="guilabel">Random distribution</span> widget to the main widget. Now the <span class="guilabel">Repeat</span> widget can be either above the <span class="guilabel">Random distribution</span> widget or below it and the results you get when you push the run button are very different. Lets first look at the case where the <span class="guilabel">Repeat</span> widget is above the <span class="guilabel">Random distribution</span> widget. If you push the run button, COPASI will run the task as many times as you have specified in the <span class="guilabel">Repeat</span> widget, each time with a different random value for the parameter you have chosen in the <span class="guilabel">Random distribution</span> widget. Now lets assume the <span class="guilabel">Repeat</span> is below the <span class="guilabel">Random distribution</span>. If you push the run button now, COPASI will also run the task as many times as you specified in the <span class="guilabel">Repeat</span> widget, the difference is that this time, the parameter value gets a random value before the repeat takes effect, i.e. all runs are done with the same random value for the chosen parameter. If you do this for a deterministic time course simulation and a concentration plot is defined, the difference becomes  obvious because in the first case, you will probably get X different curves, whereas in the second case you will get X times the same curve.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_07.png" align="middle" alt="dialog showing scan task dialog with a repeated random distribution"/><div class="caption"><p>scan task dialog with repeated random distribution</p></div></div></div><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_08.png" align="middle" alt="plot with 10 different curves"/><div class="caption"><p>plot with 10 different curves</p></div></div></div><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_09.png" align="middle" alt="dialog showing scan task dialog with a random distribution where the time course task is repeated"/><div class="caption"><p>scan task dialog with with random distribution where time course task is repeated</p></div></div></div><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_10.png" align="middle" alt="plot with 10 times the same curve"/><div class="caption"><p>plot with 10 identical curves</p></div></div></div><p>
</p><p>
What we have left out so far are the two check boxes at the bottom of the <span class="guilabel">Task</span> widget. The first check box is labeled <span class="guilabel">always use initial conditions</span>. If this check box is checked, each task that is run runs with the same initial conditions. If the check box is not checked, only the first task that runs uses the initial conditions from the model, each subsequent task uses the conditions as they are after the preceding task has finished. 
</p><p>
The second check box is labeled <span class="guilabel">output from subtask</span>. If it is checked, COPASI will plot or write the complete time series result each time a time series task runs. Correspondingly it will output intermediate results for the other tasks. So if during your scan, 10 time series are calculated, all ten are overloaded in the same window. If the check box is unchecked, COPASI will only plot the end result, i.e. the concentrations after the last step, of each time series. This applies to reports correspondingly. 
This feature is useful if you want to plot some calculation results as a function of the parameter that is scanned. So e.g. you could plot the end result of a steady state calculation on the y-Axis versus a kinetic parameter on the x-Axis. 
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="optimization"/>Running an Optimization Task</h2></div></div></div><p>
The optimization task lets you minimize a given objective function by scanning one or more parameters over a given range. This probably sounds rather cryptic, therefore, lets try to illustrate this with a simple example.
</p><p>
We assume you have a model that consists of several reactions and two of those reactions fluxes (R1, R2) depend on a certain parameter k (either directly or indirectly). Now you are interested in finding the optimal value of k so that the ratio of R1/R2 will be maximal. So lets see how you would do this in COPASI.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Optimization_01.png" align="middle" alt="MacOS screenshot that shows COPASI optimization dialog"/><div class="caption"><p>Optimization Dialog</p></div></div></div><p>
</p><p>
If you go to the optimization dialog which you can find in the tree under <span class="guilabel">Multiple Task</span>-&gt;<span class="guilabel">Optimization</span>, you will get a screen similar to the one above. At the top of the dialog, you can find an edit line called Expression where you have to input your objective function, that is the expression that COPASI will try to minimize during the optimization. In our case, we want to find the value of k where the ratio of R1 and R2 is maximal. At the beginning of this section, I stated that COPASI will minimize a given objective function, but we would like to maximize the objective function R1/R2. So how do we generate a function to be minimized out of the function R1/R2? This can be achieved in two ways, either we inverse the ratio in order to minimize R2/R1, or we add a "-" sign to our ratio R1/R2. (For the sake of simplicity, I will assume here that the fluxes R1 and R2 will always be positive.) For this example I will use the second possibility and therefore the objective function for COPASI to minimize will be -(R1/R2). Now you can't just enter this expression into the line edit field since COPASI does not associate the names R1 and R2 with the fluxes through your reactions. In order to build this expression, you have to start typing "-(" into the line edit field. Now, you have to press the button to the right of the line edit field which opens the object browser. In this object browser, you select the flux (particle or concentration) which belongs to R1 and press the <span class="guibutton">OK</span> button. Now you will get a string that corresponds to this flux object right after the part of the expression you already typed. You can now go on by typing "/" followed by the selection of the flux for R2. You end the expression by typing ")". Please be aware that you are allowed to edit the expression, but only those parts of the expression that do not belong to object representation strings. That means everything that has been inserted via selection from the object browser may not be modified. You may however delete complete identifier expressions.
</p><p>
This interface is work in progress and we hope to have a better solution in upcoming releases.
</p><p>
You can run an optimization task with several different methods which can be selected via the drop down list below the input field for the objective function. Each of those methods has a number of parameters which are documented in the methods chapter. 
</p><p>
The optimization task can also be run on either the "Time Course" or the "Steady-state" subtask. Which one is used for the optimization run can be selected via the correspondingly named check boxes. So for our example we would choose the "Time Course" subtask.
</p><p>
The only thing we have not done yet is to tell COPASI which
parameter(s) it should scan in order to minimize the objective
function. In the middle of the widget, there is another line edit
field right after <span class="guilabel">Object</span> where you can specify
which parameter is to be scanned. The selection is again done via
clicking on the button to the right of the edit field and selecting
the correct parameter from the object browser. Please note that is
possible to create multiple parameters at once. Below the Object you
can specify the upper and lower 
bounds for the parameter during the optimization. Those bounds can also be
expressions depending on other parameters. Per default, the check boxes
for -Infinity and +Infinity are selected as the boundaries. Since a
computer can't handle infinitely small or large numbers, 
the search will effectively proceed from the lowest possible to the
largest possible double precision number. If you want to specify your
own range, you first have to deselect the <span class="guilabel">+Inf</span> or
<span class="guilabel">-Inf</span> check box and then you can set your own
bounds. If you want to delete a parameter from the scan list, you just
select it and click on the <span class="guilabel">delete</span> button which
you find at the right side. If you want to scan more than one
parameter, you just add more by clicking on the
<span class="guibutton">new</span> button and add as many parameters as you
need. Please note, you may select multiple parameters and edit them
simultaneously. You can
also change the order in which the parameters are scanned by moving
them up or down in the list with the corresponding buttons at the
right side of the widget. This has only an effect if the parameter
boundaries of one parameter depend on another parameter. COPASI does
not currently determine such a dependency and it is left to the user
to order the parameters appropriately. 
</p><p>
In addition to parameters COPASI knows also about
constraints. Constraints are applied to the solution. i.e., they are
evaluated after the simulation which can currently be either a time
course or a steady state calculation. A possible constraint could be
that the steady state concentration of a metabolite is bounded. These
constraints are modified in the GUI in the same way as the parameters
by selection the <span class="guilabel">Constraints</span> tab.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Optimization_02.png" align="middle" alt="MacOS screenshot that shows the progress dialog during an optimization task run "/><div class="caption"><p>Optimization Progress Dialog</p></div></div></div><p>
</p><p>
Once you have set up all the parameters, you are ready to run the optimization task by clicking on <span class="guibutton">Run</span>. COPASI will now display a progress dialog which informs you about the progress of the calculation and about the best (smallest) value found for the objective function up to this step. Since this progress dialog will close once the optimization task has run, you probably also want to define a report to be written during the calculation. In many cases using the default report name "Optimization" is sufficient. The default report outputs a description of all the settings you provided for the optimization run. It prints intermediate results during the calculation every time the target value has improved. In the end it prints a summary of the result. The easiest way to define a customized report is to use the <a href="#outputAssistant" title="Using the Output Assistant">output assistant</a>. Alternatively, you can create a report manually as described in the <a href="#outputGeneration">Generating Output</a> section. Once you have created a report definition for the optimization task, you click on the <span class="guibutton">report</span> button at the bottom of the dialog. In the dialog that opens, you select the report you just created from the drop down list labeled <span class="guilabel">Report Definitions</span> and then you select a filename where the report is to be stored in the field labeled <span class="guilabel">Target</span>. You can either type a filename manually, or you can select one by clicking on the <span class="guibutton">browse</span> button. When you are finished, you click the <span class="guibutton">Confirm</span> button. Now the next time you run the optimization, a report will be stored in the location you specified.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="parameterEstimation"/>Parameter Estimation</h2></div></div></div><p>
Parameter estimation is the process of trying to calculate model parameters based on a dataset. This dataset can e.g. be the result of kinetic measurements or output from a trajectory calculated by some simulation software (e.g. COPASI). COPASI reads one or more such data sets and tries to fit one or more parameters that are specified by the user to those datasets. The methods COPASI uses to come up with good parameter values are the same as in the optimization task. For a description of the different methods, you should read the methods section of this document.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterEstimation_01.png" align="middle" alt="MacOS screenshot that shows COPASI Parameter Estimation dialog"/><div class="caption"><p>Parameter Estimation Dialog</p></div></div></div><p>
</p><p>
The dialog for the parameter estimation task can be activated by selecting the branch called <span class="guilabel">Parameter Estimation</span> under the <span class="guilabel">Multiple Tasks</span> branch of the tree view on the left side of the user interface.
First you can define which parameters COPASI shall try to fit. Each
parameter to be fitted can be added like in the Optimization. To do
this, click on the button beside the line edit labeled
<span class="guilabel">Object</span>, this will open a selection dialog where
you can choose the parameter. Additionally you can specify an upper
and a lower bound for the parameter. COPASI will only try to fit the
parameter within those bounds. Per default, the upper and lower bound
are + Infinity and - Infinity respectively. 
If you want to set your own bounds, disable the check boxes and enter
your own value in the edit field. The value for the lower bound goes
into the correspondingly labeled edit field, likewise for the upper
bound. 
You can also specify other objects from the model as bounds for the
parameter. To choose the value of another object as a bound for the
parameter, click on the button beside the edit field and choose the
object from the tree. You can restrict the effect of a parameter for a
subset of the experiments you are attempting to fit. To do this select
the <span class="guibutton">...</span> to the right of <span class="guilabel">Affected
Experiments</span>. A possible application is to fit different
initial values for each time course experiment. To help you in such a
case the <span class="guibutton">Duplicate for each Experiment</span> button will
create a copy of the current parameter for each specified experiment.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterEstimation_02.png" align="middle" alt="MacOS screenshot that shows COPASI Experimental Data dialog"/><div class="caption"><p>Experimental Data Dialog</p></div></div></div><p>
</p><p>
Once you added and defined all the parameters for the fitting, you have to add experimental data as a reference for the fitting process. For this, you click on the <span class="guibutton">Experimental Data</span> button at the top right of the dialog. A new dialog opens that lets you enter experimental data sets. To read a data file, click on the open button beside the label <span class="guilabel">File</span> at the top of the dialog and choose a file that contains experimental data from the file dialog.
The data file should contain experimental data grouped in experiments. To support automatic detection of experiments these must be separated by one or more empty lines. But manually definition of experiments is allowed. The data for an experiment must be a table of values. The columns of the table are separated by a user specifiable separation character. The default and recommended character is the &lt;tab&gt;-character. The first line of each experiment is treated as the row containing the column headings. However, this is only a default and the header row can be specified by the user. The header row may be anywhere in the file the data is contained. The purpose of the header row is to ease the interface to the data file and may be committed. To tell COPASI that no header row is included uncheck the box next to the header. 
Once COPASI has read a file, you have to specify some information for each experiment included in the file. To select an experiment you choose it from the right selection box. The first thing you need to specify is whether the data belongs to a steady state analysis or to a time course simulation. You also have to associate the individual rows of input data to elements of the model. For this, you click on the <span class="guibutton">...</span> button in each row and select the corresponding object in the selection dialog.
It is mandatory that COPASI knows about the meaning of each data column. The data in a column can have four different types, which are:
</p><div class="variablelist"><dl><dt><span class="term">ignored</span></dt><dd>
Values in columns marked ignored are not taken into account during parameter fitting. Columns of this type may not be associated with elements of the model.
  </dd><dt><span class="term">independent</span></dt><dd>
Independent data is data which needs to be set for the correct simulation of the experiment row. Possible model elements are initial concentrations or kinetic parameters. Note, for a time course experiment only the independent data in the first data row is set before the start of the simulation. Columns of this type must be associated with elements of the model.
  </dd><dt><span class="term">dependent</span></dt><dd>
The dependent data is the data, which COPASI tries to fit by minimizing the sum of squares between the simulated data and the experimental data. Columns of this type must be associated with elements of the model.
  </dd><dt><span class="term">Time</span></dt><dd>
This column type is only available for time course experiments. Obviously only one column with this data type may exist. COPASI attempts to automatically identify the column containing the time by looking at the column headers. You may correct COPASI's guess. This column may not be mapped to any model elements.
  </dd></dl></div><p>
</p><p>
If you don't want COPASI to use the whole dataset of an experiment,
but only a subset, you can specify the start and end line for this
subset. You also may delete experiments completely. If you do so, you
may notice that the <span class="guibutton">New Document</span> will be
enabled. Pressing it will add the first not used experiment of the
currently active file. Since it is commonly the case that all
experimental data within one file has the same format, COPASI allows you
to copy information of experimental data from the previous to the
current or form the current to the
next experiment within a file by selecting <span class="guibutton">from
previous</span> and <span class="guibutton">to next</span>. If COPASI
detects that experimental data descriptions are identical it will
automatically set the <span class="guibutton">from previous</span> check box
and disable editing the current experiment. Should you want to modify
it you will have to unmark the check box first.
</p><p>
If you have more than one file, you can load additional data files and process them in the same manner. Once you are finished defining your data sets for the fitting, you close the data dialog with the <span class="guibutton">OK</span> button. Before you can start the parameter estimation process, you have to choose the method by which the fitting will be done and maybe set some method parameters. Most of the time, the default parameter values should do. The method choosing is done at the bottom of the dialog by selecting the method from the drop down list. For an explanation of the individual methods, please consult the methods section.
</p><p>
If you want to have output from the parameter estimation task, you have to create an output definition as described in the <a href="#outputGeneration">Generating Output</a> section or you choose the default report named "Parameter Fitting". The default reports prints a description of the settings you provided for this parameter fitting run, intermediate results every time the target function improves, and a detailed result at the end.  The easiest way to get a customized output is probably to use the output assistant which you activate via the <span class="guibutton">Output Assistant</span> button. This is described in the <a href="#outputAssistant">Output Assistant</a> section. All that is left to do in order to write the output to a specific file is to connect an output definition  with a file. This can be achieved by clicking on the <span class="guibutton">Report</span> button. This opens a dialog that lets you connect the report for a specific task to a file on your hard disk. First we choose a report that is suitable for the parameter estimation task from the drop down list at the top of the dialog. Next, we specify a file that will be used to store the report by clicking on the <span class="guibutton">browse</span> button and selecting the destination in the file dialog that opens. Per default, COPASI creates a new file or overwrites an existing file with the same name. Alternatively, you can tell COPASI to append the report to the end of an existing file by selecting the corresponding check box labeled <span class="guilabel">Append</span> at the bottom of the dialog. Once you are finished, you click on the <span class="guilabel">Confirm</span> button. If you now run the task, COPASI will write the output to the file you specified. 
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterEstimation_05.png" align="middle" alt="MacOS screenshot that shows COPASI Parameter Estimation Results"/><div class="caption"><p>Parameter Estimation Results</p></div></div></div><p>
</p><p>
After running a Parameter Estimation task the result may be viewed by
selecting the <span class="guilabel">Result</span> widget. This result widget
contains multiple tabs. 
The overall fit and performance statistic are displayed in the
<span class="guilabel">Main</span> and detailed information about parameters,
experiments, and fitted values can be found under the corresponding
tabs. In addition, you look at the correlation matrix of the
parameters.
</p></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="importExport"/>Chapter 5. Importing and Exporting models</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="sect1"><a href="#sbmlImportExport">Importing and Exporting SBML files</a></span></dt><dt><span class="sect1"><a href="#cExport">Exporting C Source files</a></span></dt><dt><span class="sect1"><a href="#madonnaExport">Exporting Berkeley Madonna files</a></span></dt></dl></div><p>COPASI is one modeling and simulation tool among many and often people use more than one tool to create, investigate and simulate their models. In order to make it easier to exchange model files with other programs, COPASI supports reading and writing of several model file formats. Naturally COPASI can read and write it's own file format and it can read Gepasi files just as well although it will not write Gepasi files.
</p><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="sbmlImportExport"/>Importing and Exporting SBML files</h2></div></div></div><p>
In addition to those two file formats, COPASI can import SBML Level 1 and 2 files and it can export models as SBML Level 2 files as well as C source code or Berkeley Madonna files.</p><p>We hope that we will be able to support even more different file formats in the future.</p><p>COPASI is able to import <a href="http://www.sbml.org" target="_top">SBML</a> level 1 and level 2 files as well as export SBML level 2 files through the corresponding entries in the <span class="guimenu">File</span> menu. For the import and export the SBML Model is read with <a href="http://www.sbml.org/libsbml.html" target="_top">libsbml</a> and converted to the COPASI model structure and vice versa.</p><p>On exporting, COPASI converts its native model structure to an SBML model that is again written out using libsbml. Since the SBML model structure is converted into the COPASI model structure upon import, some of the information in the SBML file gets lost because COPASI does not support the corresponding model elements. Examples of data that gets lost are rules and events.</p><p>
Notes and Annotations from the original SBML file should be preserved when you import and reexport an SBML file as long as you do not delete the objects that contain the annotation in COPASI. But still if you have important annotations or notes in your SBML file make a backup of the file before you open it in COPASI since we can not guarantee that they will survive an import/export cycle.
</p><p>Likewise, SBML does not support all of the elements of a COPASI model so some information from the COPASI model also gets lost when exporting an SBML file. For example tasks, reports and plot definitions are not exported to SBML.</p><p>This is normally not a big problem since the essential parts of a model normally get imported or exported. A consequence however one should keep in mind is that if you import an SBML file into COPASI and later export it again, it might have lost some of the original information. So if your SBML model depends on rules and events, it is not suitable for import into COPASI; this will change in the future.
</p><p>
Upon import of an SBML file, COPASI tries to identify the function calls it read. That means if COPASI finds a reaction where the kinetic law consists of a single function call, COPASI tries to find out whether the function called corresponds to one of its built in functions. So for SBML files that have been exported from COPASI, the function calls can be identified upon re-import. Since all functions that can not be recognized have to be added to the global function database, this feature might save you some entries there and keep the global function database more manageable. The same goes for mass action kinetics. COPASI also tries to identify mass action kinetics on import but as opposed to other kinetics, COPASI also checks kinetic laws that don't only consist of a single function call.
</p><p>
This is still very rudimentary and we hope to improve this function recognition in the future so that also functions exported from other programs can be recognized.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="cExport"/>Exporting C Source files</h2></div></div></div><p>
Sometimes it is of advantage to have the differential equations that make up your model in the form of source code for some programming language. This allows you to integrate your model into some experimental analysis software that you might have written, or some analysis software that expect the input as C source code like <a href="http://sourceforge.net/projects/auto2000/" target="_top">Auto2000</a>.
</p><p>
So far COPASI only supports the export of C source code, source code for other programming languages might follow if there is need for it.
</p><p>
The C source file COPASI exports is split into several smaller parts which are encapsulated in #ifdef structures for the C preprocessor. The file consists of ten such sections which can be included in other files by defining the corresponding preprocessor constants at the place of inclusion. Example:</p><p>
</p><pre class="programlisting">
#define SIZE_DEFINITIONS
#include "SOURCE FILE"
#undef SIZE_DEFINITIONS
</pre><p>
</p><p>
The file contains the following sections: 
</p><p>
</p><div class="table"><a id="d0e3330"/><p class="title"><b>Table 5.1. Preprocessor defines</b></p><table summary="Preprocessor defines" border="1"><colgroup><col/><col/></colgroup><thead><tr><th align="left">Name</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">SIZE_DEFINITIONS</td><td align="left">Contains size definitions for the individual model elements, e.g. N_COMPARTMENTS for the number of compartments or N_REACTIONS for the number of reactions. All definitions are declared with preprocessor #define statements.</td></tr><tr><td align="left">METABOLITES</td><td align="left">Contains assignments for the metabolites initial concentrations. The assignments are of the form y[INDEX]=VALUE where INDEX is the index of the metabolite and VALUE is the initial concentration. This assumes that the including code has generated an array of double values of size N_METABS called y. N_METABS is part of the SIZE_DEFINITIONS section (see SIZE_DEFINITIONS above).</td></tr><tr><td align="left">INDEP_METABOLITES</td><td align="left">Contains assignments for the independent metabolites initial concentrations. The assignments are of the form x[INDEX]=VALUE where INDEX is the index of the independent metabolite and VALUE is the initial concentration. This assumes that the including code has generated an array of double values of size N_INDEP_METABS called x. N_INDEP_METABS is part of the SIZE_DEFINITIONS section (see SIZE_DEFINITIONS above).</td></tr><tr><td align="left">MOIETY</td><td align="left">Contains assignments for the moieties. The assignments are of the form y[INDEX]=RSIDE where INDEX is the index of the metabolite and RSIDE is the calculated value for the moiety, e.g. 0.2 - y[INDEX2]. y is the vector of metabolites (see METABOLITES above).</td></tr><tr><td align="left">COMPARTMENTS</td><td align="left">Contains assignments for the compartments initial volumes. The assignments are of the form c[INDEX]=VALUE where INDEX is the index of the compartment and VALUE is the initial volume. This assumes that the including code has generated an array of double values of size N_COMPARTMENTS called c. N_COMPARTMENTS is part of the SIZE_DEFINITIONS section (see SIZE_DEFINITIONS above).</td></tr><tr><td align="left">GLOBAL_PARAMETERS</td><td align="left">Contains assignments for the values of global kinetic parameters. The assignments are of the form gk[INDEX]=VALUE where INDEX is the index of the global parameter and VALUE is the value. This assumes that the including code has generated an array of double values of size N_GLOBAL_PARAMS called k. N_GLOBALPARAMS is part of the SIZE_DEFINITIONS section (see SIZE_DEFINITIONS above).</td></tr><tr><td align="left">KINETIC_PARAMETERS</td><td align="left">Contains assignments for the values of local kinetic parameters. The assignments are of the form k[INDEX]=VALUE where INDEX is the index of the local parameter and VALUE is the value. This assumes that the including code has generated an array of double values of size N_KIN_PARAMS called k. N_KIN_PARAMS is part of the SIZE_DEFINITIONS section (see SIZE_DEFINITIONS above).</td></tr><tr><td align="left">KINETIC_FUNCTIONS_HEADER</td><td align="left">This section contains the declarations of function definitions. The section has to be included before the function definitions section itself and before the differential equations section is included.</td></tr><tr><td align="left">KINETIC_FUNCTIONS</td><td align="left">This section contains the implementation of the function definitions.</td></tr><tr><td align="left">DIFFERENTIAL_EQUATIONS</td><td align="left">This section contains the set of differential equations. The result of the right hand side of each differential equation is stored in a variable dxdt[INDEX]. This assumes that the including program has created an array of double values called dxdt of size N_INDEP_METABS. N_INDEP_METABS is part of the SIZE_DEFINITIONS section (see SIZE_DEFINITIONS above).</td></tr></tbody></table></div><p>
</p><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Caution</h3><p>
Some models may contains constants or functions that are not included in the ANSI C standard. In order to be able to use exported C source code files with those constants and functions, the user has to provide them, e.g. by including a separate header file that defines those constants and/or functions. Currently those are the constants for pi, Euler's number, TRUE, FALSE and infinity as well as the functions "asinh", "acosh", "atanh", "sec", "csc", "cot", "sech", "csch", "coth", "arcsec", "arccsc",  "arccot", "asech", "acsch", "acoth", "factorial" and logical "xor".
</p></div><p>
In order to export the set of differential equations to a C source code file, you select the <span class="guisubmenu">Export ODEs</span> menu entry from COPASI's <span class="guimenu">File</span> menu. In the save dialog that shows up, you select <span class="emphasis"><em>C Files (*.c)</em></span> from the <span class="guilabel">File type</span> drop down and specify the name of the file you want to write the ODEs to. After clicking on the <span class="guibutton">Save</span> the ODEs will be saved to the specified file.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="madonnaExport"/>Exporting Berkeley Madonna files</h2></div></div></div><p><a href="http://www.berkeleymadonna.com/" target="_top">Berkeley Madonna</a> is a widely used commercial modeling and simulation tool for the Windows and Mac OS X operating systems. The input to Berkeley Madonna is a file that basically consists of a set of parameters, initial values, function definitions and ordinary differential equations. COPASI can generate these ordinary differential equations from the reactions of the model and export them together with the needed parameters in a format suitable to be read into Berkeley Madonna.</p><p>Since the way ordinary differential equations are specified is similar between different programs that take such input, it should be rather easy to adjust the exported file for import in other programs as for example the free <a href="http://www.math.pitt.edu/~bard/xpp/xpp.html" target="_top">xppaut</a> program or even <a href="http://www.wolfram.com/" target="_top">Mathematica</a>.</p><p>Names of model elements are replaced by generic names on export, future version of COPASI will try to keep the element names if possible.
</p><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Caution</h3><p>Berkeley Madonna does not support all mathematical functions available in COPASI if such a function is used in a model, COPASI will write the string "ILLEGAL FUNCTION" to the exported file instead of the name of the function. Naturally this will lead to an error message when one tries to load the file in Berkeley Madonna. Functions currently not supported by Berkeley Madonna are: sec, csc, cot, sech, csch, coth, arcsec, arccsc, arccot, arcsech, arccsch, arccoth, floor, ceil, factorial, modulus and logical xor 
</p><p>
The Constants for TRUE, FALSE, and Euler's number will be exported as numerical values where FALSE will be exported as 0 and TRUE will be exported as 1. Likewise infinity and "not a number" are exported as the strings "inf" and "nan" respectively.
</p><p>
COPASI adds comments to variables in the ODE by using the semicolon to separate the comment from the actual code. Since this feature has been added to Berkeley Madonna in Version 7.0 the exported code cannot be used with older versions of Berkeley Madonna.
</p></div><p>
In order to export the set of differential equations to a Berkeley Madonna file, you select the <span class="guisubmenu">Export ODEs</span> menu entry from COPASI's <span class="guimenu">File</span> menu. In the save dialog that shows up, you select <span class="emphasis"><em>Berkeley Madonna Files (*.mmd)</em></span> from the <span class="guilabel">File type</span> drop down and specify the name of the file you want to write the ODEs to. After clicking on the <span class="guibutton">Save</span> the ODEs will be saved to the specified file.</p></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="model"/>Chapter 6. The Model in COPASI</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="sect1"><a href="#compartments">Compartments</a></span></dt><dt><span class="sect1"><a href="#Metabolites">Metabolites</a></span></dt><dt><span class="sect1"><a href="#GlobalParameters">Global Parameters</a></span></dt><dt><span class="sect1"><a href="#Reactions">Reactions</a></span></dt><dt><span class="sect1"><a href="#Functions">Functions</a></span></dt><dt><span class="sect1"><a href="#deterministicModel">Deterministic Interpretation of the Model</a></span></dt><dt><span class="sect1"><a href="#stochasticModel">Stochastic Interpretation of the Model</a></span></dt></dl></div><p>
This section discusses the general properties of the model in COPASI and its
mathematical interpretation. Generally a model consists of metabolites which are
placed in a compartment. Metabolites are produced or consumed by reactions which
happen with a speed given by kinetic functions. This model is interpreted
mathematically in different ways in COPASI. 
</p><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="compartments"/>Compartments</h2></div></div></div><p>
Every metabolite in COPASI must be placed in a compartment. The compartment has
to have a well defined volume because COPASI relies on being able to calculate
particle numbers from concentrations and vice versa. 
COPASI does not really support models without concentrations (i.e. dealing only
with amounts of substance or particle numbers) but you can work around this
limitation by setting the volume to be 1.0. But if you do this keep in mind that
the dimensions of the different parameters as displayed in the COPASI GUI are
not correct.
The volumes of compartments are constant in this version of COPASI. 
</p><p>
If the (chemically) same metabolite is present in several compartments it is
treated as several metabolites in COPASI. E.g. if you have a model that contains
glucose inside a cell and outside a cell these are two metabolites in the model.
They can however have the same name.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="Metabolites"/>Metabolites</h2></div></div></div><p>
A metabolite is characterized by how much of it is present at a given time. This
can be expressed as a particle number or as a concentration. COPASI makes sure
that those two are consistent at any time. An initial value can be provided for
concentration or particle number of each metabolite. This initial value will be
used as a starting point for simulations or other calculations. 
A metabolite can be defined to be "fixed" which means it current value will
always be the same as the initial value, even if the metabolite participates in
a reaction.
</p><p>
Associated to the metabolites is also a value called transition time. It is
calculated as the current particle number of the metabolite devided by either
the sum of all reaction fluxes going into the metabolite or the sum of all
reaction fluxes going out of the metabolite, whichever is smaller (the fluxes
also epxressed in number of particles per second). The transition time gives a
rough heuristic measure for how long a particle of this metabolite will exist on
average before it is consumed. A short transition time in a stable steady state
may indicate that the equilibrium is a "fast" equilibrium which could be used
for a simplification of the model. Note however that this calculation is inexact
if any reversible reactions are involved.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="GlobalParameters"/>Global Parameters</h2></div></div></div><p>
The model also contains a list of global parameters. In this version of COPASI
they are always constant. They can be used as kinetic parameters in reactions.
The main use is if you want to use the same kinetic parameter in several
reactions, or if you want to change several parameters synchronously e.g. in a
parameter scan.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="Reactions"/>Reactions</h2></div></div></div><p>
A reaction is a process by which metabolites will be consumed or produced. It is
characterized by a description of how fast this happens. It contains a list of
substrates, i.e. the metabolites that are consumed if the reaction takes place,
along with the information about how many molecules of each substrate are
consumed when the reaction event happens once (the stoichiometry).
Correspondingly there is a list of products with the respective stoichiometries.
Reactions without substrates are possible, as well as reactions without
products. However reactions without substrates and without products are not
allowed. In addition so called modifiers can be specified which are neither
produced nor consumed in the reaction but which have influence on the speed of
the reaction.
</p><p>
The speed of the reaction is always specified by a reference to a kinetic
function. The kinetics can depend on the concentrations of the substrates,
products, and modifiers, on the volume of a compartment, on local or global
parameters, and on the simulation time. The difference between local and global
parameters is that local parameters only specify a numerical value of a kinetic
parameter for one specific reaction. Global parameters can be used in several
reactions.
</p><p>
Reactions can be reversible or irreversible. Kinetic functions for irreversible
reactions should always be positive. Also they should not depend on the
concentration of the products (only on the concentrations of the substrates and
modifiers). While all built in kinetic functions satisfy these conditions, they
are not enforced for user defined functions. 
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="Functions"/>Functions</h2></div></div></div><p>
  A function in COPASI is a mathematical expression that calculates a value from
a given list of other values. Generally functions can be used in two ways in
COPASI: As a kinetic function specified for a reaction or as a function that is
called from another function or expression. 
  The function contains a detailed list of parameters that specifies how many
values (and what kind of values) need to be passed to the function. If a
function is called from another function or expression only the number of values
is checked, not the kind of value. 
  In the case that a function is used as a kinetic function for a reaction
COPASI ensures consistency about the roles of the parameters in the model. Each
parameter has one of six different roles: "Substrate", "Product", "Modifier",
"Volume", "Time", "Parameter". The first three must be connected with the
concentration of a species that has the respective role in the reaction.
"Volume" must be connected with a compartment, "Time" is always the simulation
time of the model. "Parameter" must be connected with a global parameter or a
local value in the reaction.
  A function also specifies if it is appropriate for a reversible or
irreversible reaction. This information is not automatically infered from the
mathematical description of the function, and COPASI does not enforce
restrictions like irreversible kinetics having to be strictly positive. 
  
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="deterministicModel"/>Deterministic Interpretation of the Model</h2></div></div></div><p>
  One possible mathematical interpretation of the model is to convert it into a
set of ordinary differential equations. The variables of the equation are the
particle numbers of the metabolites in the model. The right hand side of the
differential equation are constructed as follows: The particle numbers are
converted to concentrations taking into acount the unit for amounts of substance
and dividing by compartment volume. These concentrations are used to calculate
the reaction fluxes. The kinetic functions, as they are defined in COPASI give
as result a value that is a concentration rate (for single compartment
reactions) or an amount of substance rate (for multicompartment reactions),
respectively. So for single compartment reactions the value of the kinetic
function is multiplied by the compartment volume; kinetics for multi compartment
reactions are assumed to already be expressed in units of amount of substance
(e.g. moles) per time. The resulting value is then multiplied by a factor to
convert amount of substance per time to particle numbers per time. Linear
combinations of these values, using the stoichiometries as coefficients, result
in particel number rates for all metabolites. These form the right hand side of
the differential equations.
</p><p>
COPASI automatically performs an analysis of the model by which conserved values
are found. The conserved values COPASI is looking for are linear combinations of
particle numbers that do not vary during the time evolution of the system. Each
conservation relation can be used to eliminate one variable of the system,
leading to a reduced system with a smaller number of variables. These variables
are called the independent variables of the system; the dependent variables are
defined as linear combinations of independent variables. COPASI handles this
model reduction transparently, but it is displayed in the GUI which metabolites
are treated as independent or dependent variables.
Technically finding the conservation relation means finding rows in the
stoichiometry matrix that can be expressed as linear combinations of other rows.
COPASI uses Householder QR factorization to do
this[<span class="citation">Vallabhajosyula06</span>].
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="stochasticModel"/>Stochastic Interpretation of the Model</h2></div></div></div><p>
    An alternative interpretation is to consider the model as a stochastic
process. In this case the reaction kinetics are not considered to describe the
rates of change for the concentrations of involved species, but rather as a
specification about the probability that a reaction event happens. If a reaction
event happens the particle numbers of the involved metabolites are updated
according to their stoichiometries. That means particle numbers are always
integer numbers and change discretely. 
</p><p>
Specifically the value of the kinetic function is interpreted as a so called
propensity, that is a differential probability density that a reaction event will 
happen in the next infinitesimal time interval.
However there are subtle differences between reaction rates and reaction propensities. One of those differences that only matters for rather small particle numbers is that e.g. the rate of a second order mass action reaction is described as k*S^2, while the propensity of the same reaction is k*S*(S-1). Copasi will apply this kind of corrections automatically. In cases where these corrections have already been done by the modeler explicitly COPASI needs to be told not to apply this correction. This is described in the section
<a href="#generalSettings">model settings</a>.
</p><p>
Another issue modelers should be aware of is that the rate laws for enzymatic reactions that are derived using the steady state approximation are not necessarily valid for stochastical simulation. In many cases they are, but the underlying assumptions for using them are not exactly the same as for deterministic simulations. 
</p></div></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="methods"/>Chapter 7. Methods</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="sect1"><a href="#methodTimeCourse">Time Course Calculation</a></span></dt><dd><dl><dt><span class="sect2"><a href="#DeterministicSimulation">Deterministic Simulation</a></span></dt><dt><span class="sect2"><a href="#StochasticSimulation">Stochastic Simulation</a></span></dt><dt><span class="sect2"><a href="#HybridSimulation">Hybrid Simulation</a></span></dt></dl></dd><dt><span class="sect1"><a href="#methodSteadyState">Steady State Calculation</a></span></dt><dt><span class="sect1"><a href="#methodMCA">Metabolic Control Analysis</a></span></dt><dd><dl><dt><span class="sect2"><a href="#ControlCoefficients">Control Coefficients</a></span></dt><dt><span class="sect2"><a href="#SummationTheorem">Summation Theorem</a></span></dt><dt><span class="sect2"><a href="#EnzymeKineticsAndTheElasticityCoefficients">Enzyme Kinetics and the Elasticity Coefficients</a></span></dt><dt><span class="sect2"><a href="#ConnectivityRelations">Connectivity Relations</a></span></dt></dl></dd><dt><span class="sect1"><a href="#optimizationMethod">Optimization Methods</a></span></dt><dd><dl><dt><span class="sect2"><a href="#GeneticAlgorithm">Genetic Algorithm</a></span></dt><dt><span class="sect2"><a href="#GeneticAlgorithmSR">Genetic Algorithm SR</a></span></dt><dt><span class="sect2"><a href="#HookeJeeves">Hooke &amp; Jeeves</a></span></dt><dt><span class="sect2"><a href="#LevenbergMarquardt">Levenberg - Marquardt</a></span></dt><dt><span class="sect2"><a href="#EvolutionaryProgramming">Evolutionary Programming</a></span></dt><dt><span class="sect2"><a href="#RandomSearch">Random Search</a></span></dt><dt><span class="sect2"><a href="#EvolutionaryStrategySRES">Evolutionary Strategy (SRES)</a></span></dt><dt><span class="sect2"><a href="#SteepestDescent">Steepest Descent</a></span></dt></dl></dd><dt><span class="sect1"><a href="#lyapunovExponents">Lyapunov Exponents Calculation</a></span></dt></dl></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="methodTimeCourse"/>Time Course Calculation</h2></div></div></div><p>
With the time course simulation, you can calculate the trajectory for
the species in your model over a given time interval. There are
different methods to calculate such trajectories and depending on your
model, one or several of them may be appropriate to do a time course
simulation of your model.
</p><p>
COPASI supports three different methodologies to calculate a
trajectory. The first method is to do a deterministic time course
simulation of your model using the LSODA
[<span class="citation">Petzold83</span>] algorithm. For systems with  
small particle numbers, it is sometimes better to do a stochastic
simulation rather than a deterministic one. COPASI supports a method
for the stochastic calculation of time series, which is called
<span class="guilabel">stochastic</span> and uses the next reaction method
described by Gibson and Bruck.

</p><p>Since the deterministic simulation is inappropriate for some
systems but on the other hand, the stochastic simulation is too time
consuming, there are some methods that try to combine the advantages
of both deterministic and stochastic simulation. Most of those methods
are termed hybrid methods. COPASI also includes such a hybrid method
which in some systems where deterministic simulation would lead to
incorrect results will give the correct time series but is still
computationally less demanding than a pure stochastic simulation.
</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="DeterministicSimulation"/>Deterministic Simulation</h3></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="LSODA"/>Deterministic (LSODA)</h4></div></div></div><p>
The default method in COPASI to calculate a time course is
LSODA [<span class="citation">Petzold83</span>]. LSODA is part of the <a href="http://www.netlib.org/odepack/opkd-sum" target="_top">
ODEPACK</a> library [<span class="citation">Hindmarsh83</span>].
LSODA was written by Linda R. Petzold and Alan C. Hindmarsh.

It solves systems <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi>dy</mml:mi><mml:mo>/</mml:mo>
<mml:mi>dt</mml:mi><mml:mo> = </mml:mo><mml:mi>f </mml:mi></mml:math> 
with a dense or banded Jacobian when the problem is stiff, but it
automatically selects between non-stiff (Adams) and stiff (BDF)
methods.  It uses the non-stiff method initially, and dynamically
monitors data in order to decide which method to use.
</p><div class="variablelist"><p class="title"><b>Options for LSODA</b></p><dl><dt><span class="term">Integrate Reduced Model</span></dt><dd><p>
This parameter is a boolean value to determine whether the integration
shall be performed using the mass conservation laws, i.e., reducing
the number of system variables or to use the complete model. A value of
'1' (the default) instructs COPASI to make use of the mass
conservation laws, whereas a value of '0' instructs COPASI to
determine all variables through ODEs. 
</p></dd><dt><span class="term">Relative Tolerance</span></dt><dd><p>
This parameter is a numeric value specifying the desired relative
tolerance the user wants to achieve. A smaller value means that the
trajectory is calculated more accurate. The default value is
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mn>1.0</mml:mn><mml:mo>*</mml:mo>
<mml:msup><mml:mn>10</mml:mn><mml:mn>-6</mml:mn></mml:msup></mml:math>.
Please note that best achievable relative tolerance is approximately 
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mn>2.22</mml:mn><mml:mo>*</mml:mo>
<mml:msup><mml:mn>10</mml:mn><mml:mn>-16</mml:mn></mml:msup></mml:math>.
</p></dd><dt><span class="term">Use Default Absolute Tolerance</span></dt><dd><p>
This parameter is a boolean value to determine whether COPASI shall
make a guess for the absolute tolerance. The absolute tolerance
determines whether numbers are considered to be zero during
calculation. Numbers with an absolute values less than the absolute
tolerance are treated as zero. A value of '1' (the default) instructs
COPASI to make a guess which can be found in the Absolute Tolerance
parameter after calculation. When specifying a value of '0' one needs
also to provide a value for the absolute tolerance.
</p></dd><dt><span class="term">Absolute Tolerance</span></dt><dd><p>
This parameter is a numeric value specifying the desired absolute
tolerance the user wants to achieve or if Use Default Absolute
Tolerance parameter is set '1' the value COPASI selected. Please note
that COPASI internally calculates with particle numbers which might be
quite large (<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mn>1.0</mml:mn><mml:mo>*</mml:mo>
<mml:msup><mml:mn>10</mml:mn><mml:mn>23</mml:mn></mml:msup></mml:math>)
and therefore an absolute tolerance of 
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mn>1.0</mml:mn><mml:mo>*</mml:mo>
<mml:msup><mml:mn>10</mml:mn><mml:mn>9</mml:mn></mml:msup></mml:math>
is already small.
</p></dd><dt><span class="term">Adams Max Order</span></dt><dd><p>
This parameter is a positive integer value specifying the maximal
order the non-stiff Adams integration method shall attempt before
switching to the stiff BDF method. The default and maximal order is '12'.
</p></dd><dt><span class="term">BDF Max Order</span></dt><dd><p>
This parameter is a positive integer value specifying the maximal
order the stiff BDF integration method shall attempt before switching
to smaller internal step sizes. The default and maximal order is '5'.
</p></dd><dt><span class="term">Max Internal Steps</span></dt><dd><p>
This parameter is a positive integer value specifying the maximal
number of internal steps the integrator is allowed to take before the
next desired reporting time. The default value is '10000'. 
</p></dd></dl></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="StochasticSimulation"/>Stochastic Simulation</h3></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="NextReactionMethod"/>The Next-Reaction-Method</h4></div></div></div><p>
This stochastic simulation method utilizes the algorithm developed by Gibson and Bruck (see [<span class="citation">Gibson00</span>] for details). For each reaction a putative stochastic reaction time is calculated and the reaction with the shortest reaction time will be realized. The set of reactions is organized in a priority queue to allow for the efficent search for the fastest reaction. In addition, by using a so-called dependency graph only those reaction times are recalculated in each step, that are dependent on the reaction, which has been realized. This simulation method requires all the reactions to be irreversibe. However, Copasi provides a tool, that converts all reversible reactions into irreversible ones. Because the algorithm internally works on discrete particle numbers rather than concentrations, the particle numbers in the system must not exceed a value of approximately <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:msup><mml:mn>2</mml:mn><mml:mn>64</mml:mn></mml:msup></mml:math>.
</p><div class="variablelist"><p class="title"><b>Options for Stochastic (Gibson + Bruck)</b></p><dl><dt><span class="term">Max Internal Steps</span></dt><dd><p>
This parameter is a positive integer value specifying the maximal
number of internal steps the integrator is allowed to take before the
next desired reporting time. The default value is '1000000'.
</p></dd><dt><span class="term">Subtype</span></dt><dd><p>
This parameter is ignored in the current version of Copasi.
</p></dd><dt><span class="term">Use Random Seed</span></dt><dd><p>
This flag can be '0' or '1' and determines if the user-defined random seed should be used for the calculation. The default is '0' meaning that the random seed is set to a random value before each run and consecutively calculated trajectories will be different. If the value of this flag is set to '1', the user-defined random seed will be used and each calculated trajectory will be the same for the same value of the given random seed.
</p></dd><dt><span class="term">Random Seed</span></dt><dd><p>
This unsigned integer is used as random seed in the calculations, if the flag Use Random Seed is set to '1'. The default value is '1'.
</p></dd></dl></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="HybridSimulation"/>Hybrid Simulation</h3></div></div></div><div class="sect3" lang="en"><div class="titlepage"><div><div><h4 class="title"><a id="HybridRungeKutta"/>Hybrid (Runge-Kutta)</h4></div></div></div><p>
This hybrid simulation method developed by us combines a deterministic numerical integration of ODEs with a stochastic simulation algorithm. The whole biochemical network is partitioned into a deterministic and a stochastic subnet internally. The deterministic subnet contains all reactions, in which only metabolites with high particle numbers take part. All reactions with at least one low-numbered metabolite are in the stochastic subnet, because here stochastic effects are expected. Which particle numbers are considered low or high can be specified by the user with the Lower Limit and the Upper Limit parameters (Metabolites with particle numbers between those limits do not change their status. This leads to a hysteresis-like behavior and avoids many unnecessary swaps, if the particle numbers fluctuate in the middle range). The partitioning of the biochemical network can change dynamically during the simulation. After a certain number of steps, which the user can define using the parameter Partitioning Interval, the partitioning is recalculated using the current particle numbers in the system. During one run the deterministic subnet and the stochastic subnet are simulated in parallel. A 4th-order Runge-Kutta method is used to numerically integrate the deterministic part of the system. For the stochastic part the simulation method by Gibson and Bruck ([<span class="citation">Gibson00</span>]) is utilized. The reaction probabilities of the stochastic subnet are approximated as constant during one stochastic step, even though in theory they can change due to the effects of the deterministic subnet.
</p><div class="variablelist"><p class="title"><b>Options for Hybrid (Runge-Kutta)</b></p><dl><dt><span class="term">Max Internal Steps</span></dt><dd><p>
This parameter is a positive integer value specifying the maximal
number of internal steps the integrator is allowed to take before the
next desired reporting time. The default value is '1000000'. 
</p></dd><dt><span class="term">Lower Limit</span></dt><dd><p>
This parameter is a double value specifying the lower limit for particle numbers. Metabolites with a particle number below this value are considered as having a low particle number. The lower limit cannot be higher than the upper limit. The default value is '800'.
</p></dd><dt><span class="term">Upper Limit</span></dt><dd><p>
This parameter is a double value specifying the upper limit for particle numbers. Metabolites with a particle number above this value are considered as having a high particle number. The upper limit cannot be lower than the lower limit. The default value is '1000'.
</p></dd><dt><span class="term">Runge Kutta Stepsize</span></dt><dd><p>
This positive double value is the step size of the Runge-Kutta solver for the integration of the deterministic part of the system. The default value is '0.001'.
</p></dd><dt><span class="term">Partitioning Interval</span></dt><dd><p>
This positive integer value specifies after how many steps the internal partitioning of the system should be recalculated. The default is '1', i.e. after every step the partitioning of the system is checked.
</p></dd><dt><span class="term">Use Random Seed</span></dt><dd><p>
This flag can be '0' or '1' and determines if the user-defined random seed should be used for the calculation. The default is '0' meaning that the random seed is set to a random value before each run and consecutively calculated trajectories will be different. If the value of this flag is set to '1', the user-defined random seed will be used and each calculated trajectory will be the same for the same value of the given random seed.
</p></dd><dt><span class="term">Random Seed</span></dt><dd><p>
This unsigned integer is used as random seed in the calculations, if the flag Use Random Seed is set to '1'. The default value is '1'.
</p></dd></dl></div></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="methodSteadyState"/>Steady State Calculation</h2></div></div></div><p>
The steady state is the state in which the state variables of the
model, e.g. the metabolite concentrations do not change in
time. Mathematically this is expressed 
by setting the differential equations that describe the time evolution
of the metabolic system to zero. This forms a system of algebraic
non-linear equations. To solve them, COPASI can use a series of
strategies using more than one numerical method.
</p><p>
  All calculations are done based on particle numbers and particle number rates rather than concentrations internally. The reduced model (see <a href="#deterministicModel">Deterministic Model</a>) is used. The Jacobian (which is used in the Newton method and when eigenvalues of the Jacobian are requested) is calculated using finite differences. The eigenvalues of the Jacobian are calculated using CLAPACK.
</p><div class="variablelist"><p class="title"><b>Options for Steady State Analysis</b></p><dl><dt><span class="term">Use Newton</span></dt><dd><p>
This parameter is a boolean value to determine whether to use the
damped Newton method on the non-linear algebraic equations 
defining the steady-state. The initial concentrations set by the user
are taken as guesses for the solution. A value of '1' (the default)
indicates that COPASI shall use the damped Newton method.
</p><p>
The damped Newton method is a variant of the famous Newton method for
the solution of systems of non-linear equations. The solution is
obtained from an iterative procedure that refines an initial guess
until the residual error is smaller than required. If a limit number
of iterations is reached without an acceptable solution, the method
halts without a solution.
</p><p>
The iteration of the plain Newton  method is:
</p><p>
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
 <mml:mrow>
  <mml:msub>
   <mml:mi>x</mml:mi>
   <mml:mi>i</mml:mi>
  </mml:msub>
  <mml:mo>=</mml:mo>
  <mml:mrow>
   <mml:msub>
    <mml:mi>x</mml:mi>
    <mml:mrow>
     <mml:mi>i</mml:mi>
     <mml:mo>-</mml:mo>
     <mml:mn>1</mml:mn>
    </mml:mrow>
   </mml:msub>
   <mml:mo>-</mml:mo>
   <mml:mfrac>
    <mml:mrow>
     <mml:mi>f</mml:mi>
     <mml:mrow>
      <mml:mo>(</mml:mo>
      <mml:msub>
       <mml:mi>x</mml:mi>
       <mml:mrow>
        <mml:mi>i</mml:mi>
        <mml:mo>-</mml:mo>
        <mml:mn>1</mml:mn>
       </mml:mrow>
      </mml:msub>
      <mml:mo>)</mml:mo>
     </mml:mrow>
    </mml:mrow>
    <mml:mrow>
     <mml:mi>f</mml:mi>
     <mml:mi>'</mml:mi>
     <mml:mrow>
      <mml:mo>(</mml:mo>
      <mml:msub>
       <mml:mi>x</mml:mi>
       <mml:mrow>
        <mml:mi>i</mml:mi>
        <mml:mo>-</mml:mo>
        <mml:mn>1</mml:mn>
       </mml:mrow>
      </mml:msub>
      <mml:mo>)</mml:mo>
     </mml:mrow>
    </mml:mrow>
   </mml:mfrac>
  </mml:mrow>
 </mml:mrow>
</mml:math>
</p><p>
In the damped method if 
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
 <mml:msub>
  <mml:mi>x</mml:mi>
  <mml:mrow>
   <mml:mi>i</mml:mi>
   <mml:mo>-</mml:mo>
   <mml:mn>1</mml:mn>
  </mml:mrow>
 </mml:msub>
</mml:math> 
has a larger residual error than
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
 <mml:msub>
  <mml:mi>x</mml:mi>
  <mml:mi>i</mml:mi>
 </mml:msub>
</mml:math> one looks at
</p><p>
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
 <mml:mrow>
  <mml:msub>
   <mml:mi>x</mml:mi>
   <mml:mi>i</mml:mi>
  </mml:msub>
  <mml:mo>=</mml:mo>
  <mml:mrow>
   <mml:msub>
    <mml:mi>x</mml:mi>
    <mml:mrow>
     <mml:mi>i</mml:mi>
     <mml:mo>-</mml:mo>
     <mml:mn>1</mml:mn>
    </mml:mrow>
   </mml:msub>
   <mml:mo>-</mml:mo>
   <mml:mfrac>
    <mml:mrow>
     <mml:mi>f</mml:mi>
     <mml:mrow>
      <mml:mo>(</mml:mo>
      <mml:msub>
       <mml:mi>x</mml:mi>
       <mml:mrow>
        <mml:mi>i</mml:mi>
        <mml:mo>-</mml:mo>
        <mml:mn>1</mml:mn>
       </mml:mrow>
      </mml:msub>
      <mml:mo>)</mml:mo>
     </mml:mrow>
    </mml:mrow>
    <mml:mrow>
     <mml:mi>f</mml:mi>
     <mml:mi>'</mml:mi>
     <mml:mrow>
      <mml:mo>(</mml:mo>
      <mml:msub>
       <mml:mi>x</mml:mi>
       <mml:mrow>
        <mml:mi>i</mml:mi>
        <mml:mo>-</mml:mo>
        <mml:mn>1</mml:mn>
       </mml:mrow>
      </mml:msub>
      <mml:mo>)</mml:mo>
     </mml:mrow>
    </mml:mrow>
   </mml:mfrac>
   <mml:mo>*</mml:mo>
   <mml:msup>
    <mml:mn>2</mml:mn>
    <mml:mrow>
     <mml:mo>-</mml:mo>
     <mml:mi>n</mml:mi>
    </mml:mrow>
   </mml:msup>
  </mml:mrow>
 </mml:mrow>
</mml:math> where
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
 <mml:mi>n</mml:mi>
 <mml:mo>=</mml:mo>
 <mml:mn>0,</mml:mn>
 <mml:mn>...</mml:mn>
 <mml:mi>, </mml:mi>
 <mml:mn>32</mml:mn>
</mml:math>
</p><p>
and accepts the first such value that has a smaller residual
error than
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
 <mml:msub>
  <mml:mi>x</mml:mi>
  <mml:mi>i</mml:mi>
 </mml:msub>
</mml:math>. If none is found, the procedure halts without a
solution (because it is at a local minimum). 
</p></dd><dt><span class="term">Use Integration</span></dt><dd><p>
This parameter is a boolean value to determine whether to use the ODE
solver (<a href="#LSODA">LSODA</a>) to follow the time course
defined by the differential equations until a steady state is
reached. If at 
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
<mml:msup><mml:mn>10</mml:mn><mml:mn>10</mml:mn></mml:msup></mml:math>.
units of time no steady state has been reached the method halts with
no solution. If Use Newton is '1' an attempt to find the steady-state
via the damped Newton method is made at each intermediate time point.
A value of '1' (the default) indicates that COPASI shall use
integration.
</p></dd><dt><span class="term">Use Back Integration</span></dt><dd><p>
This parameter is a boolean value to determine whether to use the ODE
solver (<a href="#LSODA">LSODA</a>) to reverse the time course
(going backwards in time) defined by the differential equations until
a steady state is reached. If at 
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mn>-1</mml:mn><mml:mo>*</mml:mo>
<mml:msup><mml:mn>10</mml:mn><mml:mn>10</mml:mn></mml:msup></mml:math>.
units of time no steady state has been reached the method halts with
no solution. If Use Newton is '1' an attempt to find the steady-state
via the damped Newton method is made at each intermediate time point.
A value of '1' (the default) indicates that COPASI shall use
back integration.
</p></dd><dt><span class="term">Accept Negative Concentrations</span></dt><dd><p>
This parameter is a boolean value to determine whether to accept a
steady-state, which contains negative concentrations. A value of '1'
indicates that negative concentrations are acceptable whereas a value
of '0' (the default) indicates that such states are discarded.
</p></dd><dt><span class="term">Iteration Limit</span></dt><dd><p>
This parameter is a positive integer to determine the maximum number of
iterations the damped Newton method shall perform before it fails. The
default is '50'.
</p></dd><dt><span class="term">Derivation Factor</span></dt><dd><p>
This is a numeric value to determine the step size used to calculate
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"> 
 <mml:mi>f</mml:mi>
 <mml:mi>'</mml:mi>
 <mml:mrow>
  <mml:mo>(</mml:mo>
  <mml:msub>
   <mml:mi>x</mml:mi>
   <mml:mrow>
    <mml:mi>i</mml:mi>
    <mml:mo>-</mml:mo>
    <mml:mn>1</mml:mn>
   </mml:mrow>
  </mml:msub>
  <mml:mo>)</mml:mo>
 </mml:mrow>
</mml:math>. The default is '0.001'.
</p></dd><dt><span class="term">Resolution</span></dt><dd><p>
This is a positive numeric value to determine the resolution used to
decide whether the current state is acceptable as a steady-state. If
the absolute change of each state variable is smaller than the
resolutions the state is accepted. The default is <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
<mml:msup><mml:mn>10</mml:mn><mml:mn>-9</mml:mn></mml:msup></mml:math>.
Note that this value is interpreted as a concentration value, even though the calculation internally uses particle numbers. The reason for that is purely heuristical: In many cases the modeler will choose the units in a way that concentration values are neither extremely large not extremely small numerically so that the default value for this parameter leads to useful results. However generally it is not save to just keep the default value without checking. 
</p></dd></dl></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="methodMCA"/>Metabolic Control Analysis</h2></div></div></div><p>
Metabolic control analysis (MCA) is a sensitivity analysis of
metabolic systems. In MCA one studies the relative control exerted by
each step on the system's variables (e.g. fluxes and metabolite
concentrations). This control is measured by applying a perturbation
to the step being studied and then measuring the effect on the
variable of interest after the system has settled to a new steady
state. 
</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ControlCoefficients"/>Control Coefficients</h3></div></div></div><p>
A control coefficient is a relative measure of how much a perturbation
on a parameter affects a system variable (e.g. fluxes or
concentrations). It is defined [<span class="citation">Kacser73</span>]
[<span class="citation">Heinrich74</span>]
[<span class="citation">Burns85</span>] as: 
</p><p>
 <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
  <mml:mrow>
   <mml:mrow>
    <mml:msubsup>
     <mml:mi>C</mml:mi>
     <mml:msub>
      <mml:mo>ν</mml:mo>
      <mml:mi>i</mml:mi>
     </mml:msub>
     <mml:mi>A</mml:mi>
    </mml:msubsup>
    <mml:mo>=</mml:mo>
    <mml:mfrac>
     <mml:mrow>
      <mml:mo>∂</mml:mo>
      <mml:mi>A</mml:mi>
     </mml:mrow>
     <mml:mrow>
      <mml:mo>∂</mml:mo>
      <mml:msub>
       <mml:mo>ν</mml:mo>
       <mml:mi>i</mml:mi>
      </mml:msub>
     </mml:mrow>
    </mml:mfrac>
   </mml:mrow>
   <mml:mfrac>
    <mml:msub>
     <mml:mo>ν</mml:mo>
     <mml:mi>i</mml:mi>
    </mml:msub>
    <mml:mi>A</mml:mi>
   </mml:mfrac>
  </mml:mrow>
 </mml:math>
</p><p>
where A is the variable, i the step (enzyme) and v the steady-state
rate of the perturbed step. The most common control coefficients are
those for fluxes and metabolite concentrations, but any variable of
the system can be analysed with MCA and have control coefficents
defined by equations analogous to equation 1. In fact, there is no
need even for the system to be in a steady state. Gepasi only
calculates directly the steady-state concentration- and flux-control
coefficients, those for other variables can still be estimated by
simulating small perturbations. 
</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="SummationTheorem"/>Summation Theorem</h3></div></div></div><p>
A very important property of steady-state metabolic systems was
uncovered with the MCA formalism. This concerns the summation of all
the flux control coefficients of a pathway. By various procedures
[<span class="citation">Kacser73</span>]
[<span class="citation">Heinrich75</span>]
[<span class="citation">Giersch88</span>]
[<span class="citation">Reder88</span>] it
 can be demonstrated that for a given reference flux the sum 
of all flux-control coefficients (of all steps) is equal to unity: 
</p><p>
 <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
  <mml:mrow>
   <mml:msub>
    <mml:mo>∑</mml:mo>
    <mml:mi>i</mml:mi>
   </mml:msub>
   <mml:mrow>
    <mml:msubsup>
     <mml:mi>C</mml:mi>
     <mml:msub>
      <mml:mo>ν</mml:mo>
      <mml:mi>i</mml:mi>
     </mml:msub>
     <mml:mi>J</mml:mi>
    </mml:msubsup>
    <mml:mo>=</mml:mo>
    <mml:mn>1</mml:mn>
   </mml:mrow>
  </mml:mrow>
 </mml:math>
</p><p>
For a given reference metabolite concentration the sum of all
concentration-control coefficients is zero: 
</p><p>
 <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
  <mml:mrow>
   <mml:msub>
    <mml:mo>∑</mml:mo>
    <mml:mi>i</mml:mi>
   </mml:msub>
   <mml:mrow>
    <mml:msubsup>
     <mml:mi>C</mml:mi>
     <mml:msub>
      <mml:mo>ν</mml:mo>
      <mml:mi>i</mml:mi>
     </mml:msub>
     <mml:mi>[M]</mml:mi>
    </mml:msubsup>
    <mml:mo>=</mml:mo>
    <mml:mn>0</mml:mn>
   </mml:mrow>
  </mml:mrow>
 </mml:math>
</p><p>
where the summations are over all the steps of the system.
</p><p>
According to the first summation theorem, increases in some of the
flux-control coefficients imply decreases in the others so that the
total remains unity. As a consequence of the summation theorems, one
concludes that the control coefficients are global properties and that
in metabolic systems, control is a systemic property, dependent on all
of the system's elements (steps).  
</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="EnzymeKineticsAndTheElasticityCoefficients"/>Enzyme Kinetics and the Elasticity Coefficients</h3></div></div></div><p>
In enzyme kinetics the behaviour of isolated enzymes is studied
through the dependence of the initial rates of reaction with the
concentration of the substrate(s). Enzyme kinetic studies are centered
on derivation of rate equations and the determination of their kinetic
constants such as Michaelis constants or limiting-rates or even on the
elementary rate constants of a specific reaction mechanism.
</p><p>
In metabolic control analysis the properties of each (isolated) enzyme
are measured in a way very similar to the flux-control properties:
using a sensitivity, known as the elasticity coefficient
[<span class="citation">Kacser73</span>]
[<span class="citation">Heinrich74</span>]
[<span class="citation">Burns85</span>].
In this
case, one has to consider the effect of perturbations of a reaction
parameter on the local reaction rate. By local one means that this
sensitivity refers to the isolated reaction which has the same
characteristics (effector and enzyme concentrations, temperature, and
so on) as in the whole system at the operating point (steady state) of
interest. The elasticity coefficients are defined as the ratio of
relative change in local rate to the relative change in one parameter
(normally the concentration of an effector). Infinitesimally, this is
written as:  
</p><p>
 <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
  <mml:mrow>
   <mml:mrow>
    <mml:msubsup>
     <mml:mo>ε</mml:mo>
     <mml:mi>p</mml:mi>
     <mml:msub>
      <mml:mo>ν</mml:mo>
      <mml:mi>i</mml:mi>
     </mml:msub>
    </mml:msubsup>
    <mml:mo>=</mml:mo>
    <mml:mfrac>
     <mml:mrow>
      <mml:mo>∂</mml:mo>
      <mml:msub>
       <mml:mo>ν</mml:mo>
       <mml:mi>i</mml:mi>
      </mml:msub>
     </mml:mrow>
     <mml:mrow>
      <mml:mo>∂</mml:mo>
      <mml:mi>p</mml:mi>
     </mml:mrow>
    </mml:mfrac>
   </mml:mrow>
   <mml:mfrac>
    <mml:mi>p</mml:mi>
    <mml:msub>
     <mml:mo>ν</mml:mo>
     <mml:mi>i</mml:mi>
    </mml:msub>
   </mml:mfrac>
  </mml:mrow>
 </mml:math>
</p><p>
where v is the rate of the enzyme in question and p is the parameter
of the perturbation. Each enzyme has as many elasticity coefficients
as the number of parameters that affect it. One can immediatly
recognise the concentration of the reaction substrates, products and
modifiers as parameters of the reaction. Unlike control coefficients,
elasticity coefficients are not systemic properties but reather
measure how isolated enzymes are sensitive to changes in their
parameters. The elasticity coefficients can be obtained from the
kinetic functions by partial derivation. Again like the control
coefficients, the elasticity coefficients are not constants, they are
dependent on the value of the relevant parameter and so are different
for each steady-state. 
</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="ConnectivityRelations"/>Connectivity Relations</h3></div></div></div><p>
A particularly useful and important feature of MCA is that it can
relate the kinetic properties of the individual reactions (local
properties) with (global) properties of the whole intact pathway. This
is done through the connectivity theorems 
[<span class="citation">Kacser73</span>] that
relate the control coefficients and the elasticity coefficients of
steps with common intermediate metabolites. 
</p><p>
The connectivity theorem for flux-control coefficients
[<span class="citation">Kacser73</span>] states that, for a common metabolite S,
the sum of the 
products of the flux-control coefficient of all (i) steps affected by
S and its elasticity coefficients towards S, is zero: 
</p><p>
 <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
  <mml:mrow>
   <mml:msub>
    <mml:mo>∑</mml:mo>
    <mml:mi>i</mml:mi>
   </mml:msub>
   <mml:mrow>
    <mml:msubsup>
     <mml:mi>C</mml:mi>
     <mml:msub>
      <mml:mo>ν</mml:mo>
      <mml:mi>i</mml:mi>
     </mml:msub>
     <mml:mi>J</mml:mi>
    </mml:msubsup>
    <mml:msubsup>
     <mml:mo>ε</mml:mo>
     <mml:mi>[S]</mml:mi>
     <mml:msub>
      <mml:mo>ν</mml:mo>
      <mml:mi>i</mml:mi>
     </mml:msub>
    </mml:msubsup>
    <mml:mo>=</mml:mo>
    <mml:mn>0</mml:mn>
   </mml:mrow>
  </mml:mrow>
 </mml:math>
</p><p>
For the concentration-control coefficients, the following two
equations apply [<span class="citation">Westerhoff84</span>]: 
</p><p>
 <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
  <mml:mrow>
   <mml:msub>
    <mml:mo>∑</mml:mo>
    <mml:mi>i</mml:mi>
   </mml:msub>
   <mml:mrow>
    <mml:msubsup>
     <mml:mi>C</mml:mi>
     <mml:msub>
      <mml:mo>ν</mml:mo>
      <mml:mi>i</mml:mi>
     </mml:msub>
     <mml:mi>[A]</mml:mi>
    </mml:msubsup>
    <mml:msubsup>
     <mml:mo>ε</mml:mo>
     <mml:mi>[S]</mml:mi>
     <mml:msub>
      <mml:mo>ν</mml:mo>
      <mml:mi>i</mml:mi>
     </mml:msub>
    </mml:msubsup>
    <mml:mo>=</mml:mo>
    <mml:mn>0</mml:mn>
    <mml:text>, where </mml:text>
    <mml:mi>A</mml:mi>
    <mml:mn>≠</mml:mn>
    <mml:mi>S</mml:mi>
   </mml:mrow>
  </mml:mrow>
 </mml:math>
</p><p>
 <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
  <mml:mrow>
   <mml:msub>
    <mml:mo>∑</mml:mo>
    <mml:mi>i</mml:mi>
   </mml:msub>
   <mml:mrow>
    <mml:msubsup>
     <mml:mi>C</mml:mi>
     <mml:msub>
      <mml:mo>ν</mml:mo>
      <mml:mi>i</mml:mi>
     </mml:msub>
     <mml:mi>[A]</mml:mi>
    </mml:msubsup>
    <mml:msubsup>
     <mml:mo>ε</mml:mo>
     <mml:mi>[S]</mml:mi>
     <mml:msub>
      <mml:mo>ν</mml:mo>
      <mml:mi>i</mml:mi>
     </mml:msub>
    </mml:msubsup>
    <mml:mo>=</mml:mo>
    <mml:mn>-1</mml:mn>
   </mml:mrow>
  </mml:mrow>
 </mml:math>
</p><p>
The first equation applies to the case in which the reference metabolite (A)
is different from the perturbed metabolite (S). Whereas the second applies to
the case in which the reference metabolite is the same as the
perturbed metabolite. 
</p><p>
The connectivity theorems allow MCA to describe how perturbations on
metabolites of a pathway propagate through the chain of enzymes. The
local (kinetic) properties of each enzyme effectively propagate the
perturbation to and from its immediate neighbours. 
</p></div><p>
COPASI calculates (non-normalised) elasticity coefficients by
numerical derivation with finite differences. To calculate control
coefficients from steady-state data, COPASI applies the method
described in [<span class="citation">Reder88</span>]. This method workes with the
reduced system where some variables are eliminated using conservation
relations (see <a href="#deterministicModel">Deterministic Model</a>). All
coefficients are obtained unscaled by this method and are scaled with
the appropriate steady state concentrations and fluxes (the same with
the elasticities). Both scaled and unscaled coefficients and
elasticities are displayed and available for ouput. 
</p><div class="variablelist"><p class="title"><b>Options for MCA</b></p><dl><dt><span class="term">Modulation Factor</span></dt><dd><p>
This parameter is ignored in the current version of COPASI.
</p></dd></dl></div><p>The rest of the options is described in the sections for <a href="#methodSteadyState">Steady State</a> and <a href="#methodTimeCourse">Time Course</a>.</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="optimizationMethod"/>Optimization Methods</h2></div></div></div><p>The optimization method as described in <a href="#optimization">Running an Optimization Task</a> tries to minimize a given
objective function. There are several ways to do this and COPASI
supports many different methods for the minimization of an objective
function.</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="GeneticAlgorithm"/>Genetic Algorithm</h3></div></div></div><p>
The genetic algorithm (GA)  
[<span class="citation">Baeck97</span>][<span class="citation">Baeck93</span>][<span class="citation">Michalewicz94</span>][<span class="citation">Mitchell95</span>]
 is a computational technique that mimics
evolution and is based on reproduction and selection. A GA is composed
of individuals that reproduce and compete, each one is a potential
solution to the (optimization) problem and is represented by a 
"genome" where each gene corresponds to one adjustable
parameter. At each generation of the GA, each individual is paired
with one other at random for reproduction. Two offspring are produced
by combining their genomes and allowing for "cross-over",
i.e., the two new individuals have genomes that are formed from a
combination of the genomes of their parents. Also each new gene might
have mutated, i.e. the parameter value might have changed slightly. At
the end of the generation, the algorithm has double the number of
individuals. Then each of the individuals is confronted with a number
of others to count how many does it outperform (the number of wins is
the number of these competitors that represent worse solutions than
itself). All the individuals are ranked by their number of wins, and
the population is again reduced to the original number of individuals
by eliminating those which have worse fitness (solutions). 
</p><p>
Many features of a GA may be varied. The details of this particular
implementation of the GA for optimization of biochemical kinetics are:

</p><div class="itemizedlist"><ul type="bullet"><li style="list-style-type: disc"><p>
Parameters are encoded in genes using floating-point representation,
rather than the more usual binary representation. 
</p></li><li style="list-style-type: disc"><p>
Mutation is carried out by adding to the gene a random number drawn
from a normal distribution with zero mean and a standard deviation of
10% of the parameter value. Whenever this makes the parameter (gene)
exceed one boundary, it is set to that boundary value.  
</p></li><li style="list-style-type: disc"><p>
Cross-over is always performed at gene boundaries so that no gene is
ever disrupted. The number of cross-over points is a random number
between zero and half the number of adjustable parameters (uniform
distribution).
</p></li><li style="list-style-type: disc"><p>
Selection is done by a tournament where each individual competes with
a number of others equal to 20% the population size. The competitors
are chosen at random.
</p></li><li style="list-style-type: disc"><p>
The initial population contains one individual whose genes are the
initial parameter values, the genes of all other individuals are
initialized to a random value between their boundaries. If the
boundaries span two orders of magnitude or more, the random
distribution is exponential, otherwise normal.
</p></li><li style="list-style-type: disc"><p>
Whenever the fittest individual has not changed for the last 10
generations, the 10% less fit individuals are replaced by individuals
with random genes. When the fittest individual has not changed for 30
generations, the worse 30% are substituted by individuals with random
genes. When the fittest individual has not changed for 50 generations,
the worse 50% are substituted by individuals with random genes. This
procedure helps the algorithm escape local minima and is somewhat
equivalent to increasing the mutation rate when the population has
become uniform.
</p></li></ul></div><p>

</p><div class="variablelist"><p class="title"><b>Options for Genetic Algorithm</b></p><dl><dt><span class="term">Number of Generations</span></dt><dd><p>
The parameter is a positive integer value to determine the number of
generations the algorithm shall evolve the population. The default is
'200'. 
</p></dd><dt><span class="term">Population Size</span></dt><dd><p>
The parameter is a positive integer value to determine the size of the
population, i.e., the number of individuals that survive after each
generation. The default is '20'.
</p></dd><dt><span class="term">Random Number Generator</span></dt><dd><p>
The parameter is an enumeration value to determine which random number
generator this method shall use. COPASI provides two random number
generators R250 [<span class="citation">Maier91</span>]
 (selected through the value 0) and the
<a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html" target="_top">Mersenne
Twister </a>[<span class="citation">Matsumoto98</span>]
 (selected through the value 1 (default)).
</p></dd><dt><span class="term">Seed</span></dt><dd><p>
The parameter is a positive integer value to determine the seed for the
random number generator. A value of zero instructs COPASI to select a
"random" value.
</p></dd></dl></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="GeneticAlgorithmSR"/>Genetic Algorithm SR</h3></div></div></div><p>
The genetic algorithm with stochastic ranking is very similar to the
before described <a href="#GeneticAlgorithm">Genetic Algorithm</a> with tournament
selection. With two exception which are the mutations are not forced
to be within the boundaries and the selection is done through a bubble
sort with a random factor as described in
[<span class="citation">Runarsson00</span>].
</p><div class="itemizedlist"><ul type="bullet"><li style="list-style-type: disc"><p>
Parameters are encoded in genes using floating-point representation,
rather than the more usual binary representation. 
</p></li><li style="list-style-type: disc"><p>
Mutation is carried out by adding to the gene a random number drawn
from a normal distribution with zero mean and a standard deviation of
10% of the parameter value. Parameters may exceed boundaries. Whenever
this happens or a constraint to the solution is violated the square of
the size of the violation is summed up, i.e., we calculate 
</p><p>
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
 <mml:mrow>
  <mml:mo>φ</mml:mo>
  <mml:mo>=</mml:mo>
  <mml:mrow>
   <mml:mrow>
    <mml:mrow>
     <mml:mrow>
      <mml:msub>
       <mml:mo>∑</mml:mo>
       <mml:mrow>
        <mml:msub>
         <mml:mi>p</mml:mi>
         <mml:mi>i</mml:mi>
        </mml:msub>
        <mml:mo>&lt;</mml:mo>
        <mml:msub>
         <mml:mi>l</mml:mi>
         <mml:msub>
          <mml:mi>p</mml:mi>
          <mml:mi>i</mml:mi>
         </mml:msub>
        </mml:msub>
       </mml:mrow>
      </mml:msub>
      <mml:msup>
       <mml:mrow>
        <mml:mo>(</mml:mo>
        <mml:mrow>
         <mml:msub>
          <mml:mi>l</mml:mi>
          <mml:msub>
           <mml:mi>p</mml:mi>
           <mml:mi>i</mml:mi>
          </mml:msub>
         </mml:msub>
         <mml:mo>-</mml:mo>
         <mml:msub>
          <mml:mi>p</mml:mi>
          <mml:mi>i</mml:mi>
         </mml:msub>
        </mml:mrow>
        <mml:mo>)</mml:mo>
       </mml:mrow>
       <mml:mn>2</mml:mn>
      </mml:msup>
     </mml:mrow>
     <mml:mo>+</mml:mo>
     <mml:mrow>
      <mml:msub>
       <mml:mo>∑</mml:mo>
       <mml:mrow>
        <mml:msub>
         <mml:mi>p</mml:mi>
         <mml:mi>i</mml:mi>
        </mml:msub>
        <mml:mo>&gt;</mml:mo>
        <mml:msub>
         <mml:mi>u</mml:mi>
         <mml:msub>
          <mml:mi>p</mml:mi>
          <mml:mi>i</mml:mi>
         </mml:msub>
        </mml:msub>
       </mml:mrow>
      </mml:msub>
      <mml:msup>
       <mml:mrow>
        <mml:mo>(</mml:mo>
        <mml:mrow>
         <mml:msub>
          <mml:mi>p</mml:mi>
          <mml:mi>i</mml:mi>
         </mml:msub>
         <mml:mo>-</mml:mo>
         <mml:msub>
          <mml:mi>u</mml:mi>
          <mml:msub>
           <mml:mi>p</mml:mi>
           <mml:mi>i</mml:mi>
          </mml:msub>
         </mml:msub>
        </mml:mrow>
        <mml:mo>)</mml:mo>
       </mml:mrow>
       <mml:mn>2</mml:mn>
      </mml:msup>
     </mml:mrow>
    </mml:mrow>
    <mml:mo>+</mml:mo>
    <mml:mrow>
     <mml:msub>
      <mml:mo>∑</mml:mo>
      <mml:mrow>
       <mml:msub>
        <mml:mi>c</mml:mi>
        <mml:mi>j</mml:mi>
       </mml:msub>
       <mml:mo>&lt;</mml:mo>
       <mml:msub>
        <mml:mi>l</mml:mi>
        <mml:msub>
         <mml:mi>c</mml:mi>
         <mml:mi>j</mml:mi>
        </mml:msub>
       </mml:msub>
      </mml:mrow>
     </mml:msub>
     <mml:msup>
      <mml:mrow>
       <mml:mo>(</mml:mo>
       <mml:mrow>
        <mml:msub>
         <mml:mi>l</mml:mi>
         <mml:msub>
          <mml:mi>c</mml:mi>
          <mml:mi>j</mml:mi>
         </mml:msub>
        </mml:msub>
        <mml:mo>-</mml:mo>
        <mml:msub>
         <mml:mi>c</mml:mi>
         <mml:mi>j</mml:mi>
        </mml:msub>
       </mml:mrow>
       <mml:mo>)</mml:mo>
      </mml:mrow>
      <mml:mn>2</mml:mn>
     </mml:msup>
    </mml:mrow>
   </mml:mrow>
   <mml:mo>+</mml:mo>
   <mml:mrow>
    <mml:msub>
     <mml:mo>∑</mml:mo>
     <mml:mrow>
      <mml:msub>
       <mml:mi>c</mml:mi>
       <mml:mi>j</mml:mi>
      </mml:msub>
      <mml:mo>&gt;</mml:mo>
      <mml:msub>
       <mml:mi>u</mml:mi>
       <mml:msub>
        <mml:mi>c</mml:mi>
        <mml:mi>j</mml:mi>
       </mml:msub>
      </mml:msub>
     </mml:mrow>
    </mml:msub>
    <mml:msup>
     <mml:mrow>
      <mml:mo>(</mml:mo>
      <mml:mrow>
       <mml:msub>
        <mml:mi>c</mml:mi>
        <mml:mi>j</mml:mi>
       </mml:msub>
       <mml:mo>-</mml:mo>
       <mml:msub>
        <mml:mi>u</mml:mi>
        <mml:msub>
         <mml:mi>c</mml:mi>
         <mml:mi>j</mml:mi>
        </mml:msub>
       </mml:msub>
      </mml:mrow>
      <mml:mo>)</mml:mo>
     </mml:mrow>
     <mml:mn>2</mml:mn>
    </mml:msup>
   </mml:mrow>
  </mml:mrow>
 </mml:mrow>
</mml:math>
</p><p>
where the parameters are given by 
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
  <mml:mrow>
   <mml:msub>
    <mml:mi>p</mml:mi>
    <mml:mi>i</mml:mi>
   </mml:msub>
   <mml:mo>∈</mml:mo>
   <mml:mrow>
    <mml:mo>(</mml:mo>
    <mml:mrow>
     <mml:msub>
      <mml:mi>l</mml:mi>
      <mml:msub>
       <mml:mi>p</mml:mi>
       <mml:mi>i</mml:mi>
      </mml:msub>
     </mml:msub>
     <mml:mi>,</mml:mi>
     <mml:mtext> </mml:mtext>
     <mml:msub>
      <mml:mi>u</mml:mi>
      <mml:msub>
       <mml:mi>p</mml:mi>
       <mml:mi>i</mml:mi>
      </mml:msub>
     </mml:msub>
    </mml:mrow>
    <mml:mo>)</mml:mo>
   </mml:mrow>
  </mml:mrow>
</mml:math> 
and the constraints by
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
  <mml:mrow>
   <mml:msub>
    <mml:mi>c</mml:mi>
    <mml:mi>j</mml:mi>
   </mml:msub>
   <mml:mo>∈</mml:mo>
   <mml:mrow>
    <mml:mo>(</mml:mo>
    <mml:mrow>
     <mml:msub>
      <mml:mi>l</mml:mi>
      <mml:msub>
       <mml:mi>c</mml:mi>
       <mml:mi>i</mml:mi>
      </mml:msub>
     </mml:msub>
     <mml:mi>,</mml:mi>
     <mml:mtext> </mml:mtext>
     <mml:msub>
      <mml:mi>u</mml:mi>
      <mml:msub>
       <mml:mi>c</mml:mi>
       <mml:mi>i</mml:mi>
      </mml:msub>
     </mml:msub>
    </mml:mrow>
    <mml:mo>)</mml:mo>
   </mml:mrow>
  </mml:mrow>
</mml:math>.
The value <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mo>φ</mml:mo></mml:math> is used within
the selection.
</p></li><li style="list-style-type: disc"><p>
Cross-over is always performed at gene boundaries so that no gene is
ever disrupted. The number of cross-over points is a random number
between zero and half the number of adjustable parameters (uniform
distribution).
</p></li><li style="list-style-type: disc"><p>
Selection is done by the bubble sort described in
[<span class="citation">Runarsson00</span>].
This sort incorporates a probability to compare
objective values for individuals with a 
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
 <mml:mo>φ</mml:mo>
 <mml:mo>≠</mml:mo>
 <mml:mn>0</mml:mn>
</mml:math>. The pseudo code for the sort
is: </p><div class="literallayout"><p>  // Here sweepNum is optimal number of sweeps from paper, i.e., TotalPopulation<br/>
  for (i = 0; i &lt; sweepNum; i++)<br/>
    {<br/>
      wasSwapped = false;<br/>
<br/>
      for (j = 0; j &lt; TotalPopulation - 1; j++)<br/>
        {<br/>
          // within bounds or random chance <br/>
          if ((phi(j) == 0 and phi(j + 1) == 0) or UniformRandom(0, 1) &lt; Pf)<br/>
            {<br/>
              // compare objective function values<br/>
              if (Value(j) &gt; Value(j + 1))<br/>
                {<br/>
                  swap(j, j + 1);<br/>
                  wasSwapped = true;<br/>
                }<br/>
            }<br/>
          else // phi != 0 <br/>
            {<br/>
              // individual j further outside then j + 1<br/>
              if (phi(j) &gt; phi(j + 1))<br/>
                {<br/>
                  swap(j, j + 1);<br/>
                  wasSwapped = true;<br/>
                }<br/>
            }<br/>
        }<br/>
<br/>
      // if no swap then break<br/>
      if (wasSwapped == false) break;<br/>
    }<br/>
</p></div><p>
</p></li><li style="list-style-type: disc"><p>
The initial population contains one individual whose genes are the
initial parameter values, the genes of all other individuals are
initialized to a random value between their boundaries. If the
boundaries span two orders of magnitude or more, the random
distribution is exponential, otherwise normal.
</p></li><li style="list-style-type: disc"><p>
Whenever the fittest individual has not changed for the last 10
generations, the 10% less fit individuals are replaced by individuals
with random genes. When the fittest individual has not changed for 30
generations, the worse 30% are substituted by individuals with random
genes. When the fittest individual has not changed for 50 generations,
the worse 50% are substituted by individuals with random genes. This
procedure helps the algorithm escape local minima and is somewhat
equivalent to increasing the mutation rate when the population has
become uniform.
</p></li></ul></div><div class="variablelist"><p class="title"><b>Options for Genetic Algorithm SR</b></p><dl><dt><span class="term">Number of Generations</span></dt><dd><p>
The parameter is a positive integer value to determine the number of
generations the algorithm shall evolve the population. The default is
'200'. 
</p></dd><dt><span class="term">Population Size</span></dt><dd><p>
The parameter is a positive integer value to determine the size of the
population, i.e., the number of individuals that survive after each
generation. The default is '20'.
</p></dd><dt><span class="term">Random Number Generator</span></dt><dd><p>
The parameter is an enumeration value to determine which random number
generator this method shall use. COPASI provides two random number
generators R250 [<span class="citation">Maier91</span>]
 (selected through the value 0) and the
<a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html" target="_top">Mersenne
Twister </a>[<span class="citation">Matsumoto98</span>]
 (selected through the value 1 (default)).
</p></dd><dt><span class="term">Seed</span></dt><dd><p>
The parameter is a positive integer value to determine the seed for the
random number generator. A value of zero instructs COPASI to select a
"random" value.
</p></dd><dt><span class="term">Pf</span></dt><dd><p>
This parameter is a numerical value in the interval (0, 1) determining
the chance that individuals either outside the parameter boundaries or
violating the constraints are compared during the selection. The
default is '4.75'. 
</p></dd></dl></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="HookeJeeves"/>Hooke &amp; Jeeves</h3></div></div></div><p>
The method of Hooke and Jeeves
[<span class="citation">Bell66</span>][<span class="citation">Hooke61</span>][<span class="citation">Kaupe63</span>][<span class="citation">Swann72</span>]
is a direct search algorithm that
searches for the minimum of a nonlinear function without requiring (or
attempting to calculate) derivatives of the function. Instead it is
based on a heuristic that suggests a descent direction using the
values of the function calculated in a number of previous iterations. 
</p><div class="variablelist"><p class="title"><b>Options for Hooke &amp; Jeeves</b></p><dl><dt><span class="term">Iteration Limit</span></dt><dd><p>
This parameter is positive integer determining the maximum number of
iterations the algorithm Sharl perform. The default is '50'.
</p></dd><dt><span class="term">Tolerance</span></dt><dd><p>
This parameter is a positive value determining the tolerance with
which the solution shall be determined. If the improvement between two
steps is less than the tolerance the algorithm stops. The default is
'<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
 <mml:msup>
  <mml:mn>10</mml:mn>
  <mml:mn>-5</mml:mn>
 </mml:msup>
</mml:math>'. 
</p></dd><dt><span class="term">Rho</span></dt><dd><p>
This parameter is a value in (0, 1) determining the factor with which
the steps size is reduced between iterations. The default is '0.2'.
</p></dd></dl></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="LevenbergMarquardt"/>Levenberg - Marquardt</h3></div></div></div><p>
Levenberg-Marquardt [<span class="citation">Levenberg44</span>][<span class="citation">Marquardt63</span>] is a gradient descent method. It is a hybrid
between the steepest descent and the Newton methods.
</p><p> 
The Newton optimization method searches for the minimum of a nonlinear
function by following descent directions determined from the
function's first and second partial derivatives. The steepest descent
method searches for a minimum based only on the first derivatives of
the function. While the Newton method converges quadratically towards
the minimum in its vicinity, it may not converge at all if it is far
away from it. On the other hand the steepest descent method only
converges linearly but is guaranteed to converge.
</p><p>
Levenberg first suggested an improvement to the Newton method in order
to make it more robust, i.e. to overcome the problem of
non-convergence. His suggestion was to add a factor to the diagonal
elements of the Hessian matrix of second derivatives when not close to
the minimum (this can be judged by how positive definite the matrix
is). The effect when this factor is large compared to the elements of
Hessian is that the method then becomes the steepest descent
method. Later Marquardt suggested that the factor should be
multiplicative rather than additive and also defined a heuristic to
make this factor increase or decrease. The method known as
Levenberg-Marquardt is thus an adaptive method that effectively
changes between the steepest descent to the Newton method.
</p><p>
The original suggestions of Levenberg and Marquardt were effective
to enhance the Gauss-Newton method, a variant of the Newton method
specifically for minimizing least-squares functions. In this case the
advantage is also that the second derivatives do not need to be
calculated as they are estimated from the gradient of the
residuals. Subsequently Goldfeld et
al. [<span class="citation">Goldfeld66</span>] extended the method to the
case of general non-linear functions.
</p><div class="variablelist"><p class="title"><b>Options for Levenberg - Marquardt</b></p><dl><dt><span class="term">Iteration Limit</span></dt><dd><p>
This parameter is positive integer determining the maximum number of
iterations the algorithm shall perform. The default is '200'.
</p></dd><dt><span class="term">Tolerance</span></dt><dd><p>
This parameter is a positive value determining the tolerance with
which the solution shall be determined. If the improvement between two
steps is less than the tolerance the algorithm stops. The default is
'<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
 <mml:msup>
  <mml:mn>10</mml:mn>
  <mml:mn>-5</mml:mn>
 </mml:msup>
</mml:math>'. 
</p></dd></dl></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="EvolutionaryProgramming"/>Evolutionary Programming</h3></div></div></div><p>
Evolutionary programming (EP)
[<span class="citation">Fogel92</span>][<span class="citation">Baeck93</span>][<span class="citation">Baeck97</span>]
is a computational technique that mimics evolution and is based on
reproduction and selection. An EP algorithm is composed of individuals
that reproduce and compete, each one is a potential solution to the
(optimization) problem and is represented by a "genome" where each
gene corresponds to one adjustable parameter. At each generation of
the EP, each individual reproduces asexually, i.e. divides into two
individuals. One of these contains exactly the same "genome" as the
parent while the other suffers some mutations (the parameter values of
each gene change slightly). At the end of the generation, the
algorithm has double the number of individuals. Then each of the
individuals is confronted with a number of others to count how many
does it outperform (the number of wins is the number of these
competitors that represent worse solutions than itself). All the
individuals are ranked by their number of wins, and the population is
again reduced to the original number of individuals by eliminating
those which have worse fitness (solutions).  
</p><div class="variablelist"><p class="title"><b>Options for Evolutionary Programming</b></p><dl><dt><span class="term">Number of Generations</span></dt><dd><p>
The parameter is a positive integer value to determine the number of
generations the algorithm shall evolve the population. The default is
'200'. 
</p></dd><dt><span class="term">Population Size</span></dt><dd><p>
The parameter is a positive integer value to determine the size of the
population, i.e., the number of individuals that survive after each
generation. The default is '20'.
</p></dd><dt><span class="term">Random Number Generator</span></dt><dd><p>
The parameter is an enumeration value to determine which random number
generator this method shall use. COPASI provides two random number
generators R250 [<span class="citation">Maier91</span>]
 (selected through the value 0) and the
<a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html" target="_top">Mersenne
Twister </a>[<span class="citation">Matsumoto98</span>]
 (selected through the value 1 (default)).
</p></dd><dt><span class="term">Seed</span></dt><dd><p>
The parameter is a positive integer value to determine the seed for the
random number generator. A value of zero instructs COPASI to select a
"random" value.
</p></dd></dl></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="RandomSearch"/>Random Search</h3></div></div></div><p>
Random search is an optimisation method that attempts to find the
optimum by testing the objective function's value on a series of
combinations of random values of the adjustable parameters. The random
vlues are generated complying with any boundaries selected by the
user, furthermore, any combinations of parameter values that do not
fulfill constraints on the variables are excluded. This means that the
method is capable of handling bounds on the adjustable parameters and
fulfilling constraints. 
</p><p>
For infinite number of iterations this method is garanteed to find the
global optimum of the objective function. In general one is interested
in processing a very large number of iterations. 
</p><div class="variablelist"><p class="title"><b>Options for Random Search</b></p><dl><dt><span class="term">Number of Iterations</span></dt><dd><p>
This parameter is a positeve interger to determine the number of
parameter sets to be drawn before the algorithm stops. The default
value is '100000'.
</p></dd><dt><span class="term">Random Number Generator</span></dt><dd><p>
The parameter is an enumeration value to determine which random number
generator this method shall use. COPASI provides two random number
generators R250 [<span class="citation">Maier91</span>]
 (selected through the value 0) and the
<a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html" target="_top">Mersenne
Twister </a>[<span class="citation">Matsumoto98</span>]
 (selected through the value 1 (default)).
</p></dd><dt><span class="term">Seed</span></dt><dd><p>
The parameter is a positive integer value to determine the seed for the
random number generator. A value of zero instructs COPASI to select a
"random" value.
</p></dd></dl></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="EvolutionaryStrategySRES"/>Evolutionary Strategy (SRES)</h3></div></div></div><p>
Evolutionary Strategies with Stochastic Ranking (SRES)
[<span class="citation">Runarsson00</span>] is similar to <a href="#EvolutionaryProgramming">Evolutionary Programming</a>. However, a parent has multiple
offsprings during each generation. Each offspring will contain a
recombination of genes with another parent and additional
mutations. The algorithm assures that each parameter value will be
within its boundaries. But constraints to the solutions may be
violated. Whenever this happens the square of the size of the
violation is summed up, i.e., we calculate  
</p><p>
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
 <mml:mrow>
  <mml:mo>φ</mml:mo>
  <mml:mo>=</mml:mo>
  <mml:mrow>
   <mml:mrow>
    <mml:mrow>
     <mml:msub>
      <mml:mo>∑</mml:mo>
      <mml:mrow>
       <mml:msub>
        <mml:mi>c</mml:mi>
        <mml:mi>j</mml:mi>
       </mml:msub>
       <mml:mo>&lt;</mml:mo>
       <mml:msub>
        <mml:mi>l</mml:mi>
        <mml:msub>
         <mml:mi>c</mml:mi>
         <mml:mi>j</mml:mi>
        </mml:msub>
       </mml:msub>
      </mml:mrow>
     </mml:msub>
     <mml:msup>
      <mml:mrow>
       <mml:mo>(</mml:mo>
       <mml:mrow>
        <mml:msub>
         <mml:mi>l</mml:mi>
         <mml:msub>
          <mml:mi>c</mml:mi>
          <mml:mi>j</mml:mi>
         </mml:msub>
        </mml:msub>
        <mml:mo>-</mml:mo>
        <mml:msub>
         <mml:mi>c</mml:mi>
         <mml:mi>j</mml:mi>
        </mml:msub>
       </mml:mrow>
       <mml:mo>)</mml:mo>
      </mml:mrow>
      <mml:mn>2</mml:mn>
     </mml:msup>
    </mml:mrow>
   </mml:mrow>
   <mml:mo>+</mml:mo>
   <mml:mrow>
    <mml:msub>
     <mml:mo>∑</mml:mo>
     <mml:mrow>
      <mml:msub>
       <mml:mi>c</mml:mi>
       <mml:mi>j</mml:mi>
      </mml:msub>
      <mml:mo>&gt;</mml:mo>
      <mml:msub>
       <mml:mi>u</mml:mi>
       <mml:msub>
        <mml:mi>c</mml:mi>
        <mml:mi>j</mml:mi>
       </mml:msub>
      </mml:msub>
     </mml:mrow>
    </mml:msub>
    <mml:msup>
     <mml:mrow>
      <mml:mo>(</mml:mo>
      <mml:mrow>
       <mml:msub>
        <mml:mi>c</mml:mi>
        <mml:mi>j</mml:mi>
       </mml:msub>
       <mml:mo>-</mml:mo>
       <mml:msub>
        <mml:mi>u</mml:mi>
        <mml:msub>
         <mml:mi>c</mml:mi>
         <mml:mi>j</mml:mi>
        </mml:msub>
       </mml:msub>
      </mml:mrow>
      <mml:mo>)</mml:mo>
     </mml:mrow>
     <mml:mn>2</mml:mn>
    </mml:msup>
   </mml:mrow>
  </mml:mrow>
 </mml:mrow>
</mml:math>
</p><p>
where the constraints are given by
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
  <mml:mrow>
   <mml:msub>
    <mml:mi>c</mml:mi>
    <mml:mi>j</mml:mi>
   </mml:msub>
   <mml:mo>∈</mml:mo>
   <mml:mrow>
    <mml:mo>(</mml:mo>
    <mml:mrow>
     <mml:msub>
      <mml:mi>l</mml:mi>
      <mml:msub>
       <mml:mi>c</mml:mi>
       <mml:mi>i</mml:mi>
      </mml:msub>
     </mml:msub>
     <mml:mi>,</mml:mi>
     <mml:mtext> </mml:mtext>
     <mml:msub>
      <mml:mi>u</mml:mi>
      <mml:msub>
       <mml:mi>c</mml:mi>
       <mml:mi>i</mml:mi>
      </mml:msub>
     </mml:msub>
    </mml:mrow>
    <mml:mo>)</mml:mo>
   </mml:mrow>
  </mml:mrow>
</mml:math>.
The value <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mo>φ</mml:mo></mml:math> is used within
the selection, which is perfomred as described in <a href="#GeneticAlgorithmSR">Genetic Algorithm SR</a> 
</p><div class="variablelist"><p class="title"><b>Options for Evolutionary Strategy (SRES)</b></p><dl><dt><span class="term">Number of Generations</span></dt><dd><p>
The parameter is a positive integer value to determine the number of
generations the algorithm shall evolve the population. The default is
'200.' 
</p></dd><dt><span class="term">Population Size</span></dt><dd><p>
The parameter is a positive integer value to determine the size of the
population, i.e., the number of individuals that survive after each
generation. The default is '20'.
</p></dd><dt><span class="term">Random Number Generator</span></dt><dd><p>
The parameter is an enumeration value to determine which random number
generator this method shall use. COPASI provides two random number
generators R250 [<span class="citation">Maier91</span>]
 (selected through the value 0) and the
<a href="http://www.math.sci.hiroshima-u.ac.jp/~m-mat/MT/emt.html" target="_top">Mersenne
Twister </a>[<span class="citation">Matsumoto98</span>]
 (selected through the value 1 (default)).
</p></dd><dt><span class="term">Seed</span></dt><dd><p>
The parameter is a positive integer value to determine the seed for the
random number generator. A value of zero instructs COPASI to select a
"random" value.
</p></dd><dt><span class="term">Pf</span></dt><dd><p>
This parameter is a numerical value in the interval (0, 1) determining
the chance that individuals either outside the parameter boundaries or
violating the constraints are compared during the selection. The
default is '4.75'. 
</p></dd></dl></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="SteepestDescent"/>Steepest Descent</h3></div></div></div><p>
Steepest descent [<span class="citation">Fogel92</span>] is an optimisation
method that follows the direction of steepest descent on the
hyper-surface of the objective function to find a local minimum. The
direction of steepest descent is defined by the negative of the
gradient of the objective function.
</p><div class="variablelist"><p class="title"><b>Options for Steepest Descent</b></p><dl><dt><span class="term">Iteration Limit</span></dt><dd><p>
This parameter is positive integer determining the maximum number of
iterations the algorithm shall perform. The default is '100'.
</p></dd><dt><span class="term">Tolerance</span></dt><dd><p>
This parameter is a positive value determining the tolerance with
which the solution shall be determined. If the improvement between two
steps is less than the tolerance the algorithm stops. The default is
'<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
 <mml:msup>
  <mml:mn>10</mml:mn>
  <mml:mn>-6</mml:mn>
 </mml:msup>
</mml:math>'. 
</p></dd></dl></div></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="lyapunovExponents"/>Lyapunov Exponents Calculation</h2></div></div></div><p>
    Copasi allows the calculation of lyapunov exponents of a trajectory as well as the average divergence of the system. The exponents are calculated for the reduced system (see <a href="#deterministicModel">Deterministic Model</a>), so the maximum number of exponents that can be calculated is the number of independent variables. If less than this number of exponents is requested, the largest exponents are calculated.
    Copasi uses the well known algorithm proposed by Wolf et al. ([<span class="citation">Wolf85</span>]). This algorithm integrates one reference trajectory and simultanously <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi>N</mml:mi></mml:math> difference trajectories (if <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mi>N</mml:mi></mml:math> is the number of exponents requested) in a system linearized around the reference trajectory. This integration is carried out for a short time interval (the "Orthonormalization interval", see below) and then the difference vectors are reorthonormalized. The exponents for this time interval are calculated from how much each of the difference trajectories converged or diverged from the reference trajectory during the interval. This calculation is repeated and the "local" exponents are averaged over the the whole trajectory.
  </p><p>
    The divergence is calculated (if requested) as the average of the trace of the jacobian. Although it is not numerically necessary the divergence is also calculated for the same short intervals that are used for the lyapunov exponents. This allows comparing the local values of the divergence with the local exponents.
  </p><p>
    If you are only interested in the end result of the lyapunov exponents and the average divergence you can just use the default report that is provided by Copasi (or just look at the result in the GUI). If you want to have access to the "local" results for the single orthonormalization intervals however, you will have to define a plot or report manually. In this version of copasi you will need to used the "expert" feature of the object selection dialog to access the exponents. They are located in the "Lyapunov Exponents" branch under the "Task List" entry. Output takes place after each reorthonormalization interval. The output can contain each of the ten largest exponents, both the local value from the last interval and the and the average value of all intervals calculated so far. Correspondingly the divergence can be output both as an average over the last interval or as an average over the whole trajectory.
  </p><p>
    The jacobian that is used for both lypunov exponents and divergence calculation is calculated using finite differences. The integration of the reference and difference trajectories is done using LSODA [<span class="citation">Hindmarsh83</span>].
  </p><div class="variablelist"><p class="title"><b>Options for Lyapunov exponents calculation</b></p><dl><dt><span class="term">Orthonormalization interval</span></dt><dd><p>
          This is the time interval after which an orthonormalization of the difference trajectories takes place. This parameter is critical for the accuracy of the lyapunov exponents. Smaller values generally lead to more accurate results, but take longer time (since the numerical integration needs to be restarted for many short calculations).
          One way to judge the adequacy of this parameter is to compare the sum of exponents with the divergence of the system. Those two values should be the same (only if you request the calculation of all exponents), and since the calculation of the divergence is very robust, a mismatch would typically mean that the orthonormalization interval needs to be smaller.
          Note that this parameter mostly affects the accuracy of the exponents with the largest absolute values. Since large positive exponents are unusual, this means that the largest negative exponents suffer from accuracy problems related to this parameter. If you don't need the exact values of the stronly negative exponents you can chose a larger value for this parameter and enjoy a much faster calculation. The default value is <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mn>1.0</mml:mn></mml:math>.
        </p></dd><dt><span class="term">Overall time</span></dt><dd><p>
          This parameter specifies the overall time of the calculation. The integration will be repeated in small steps given by the "Orthonormalization interval" parameter until the overall time is reached.
          This value is also critical for the accuracy of the exponents. Since copasi cannot guess how fast the exponents converge, no save default value can be given for this parameter. One indication would be that if the system does not run into a steady state one of the exponents should be zero. If this is not the case in the result, probably the overal time was to short to allow the exponents to converge to their average value. The default value is <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll"><mml:mn>1000</mml:mn></mml:math>.
        </p></dd></dl></div><p>
    The rest of the options apply for the LSODA numerical integrator that is used for the calculation. They are described in the section for <a href="#LSODA">LSODA</a>.
  </p></div></div><div class="appendix" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="errorMessages"/>Appendix A. Error Messages</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="sect1"><a href="#configReaderErrors">Gepasi File Reader Error Messages</a></span></dt><dt><span class="sect1"><a href="#copasiVectorErrors">COPASI Vector Error Messages</a></span></dt><dt><span class="sect1"><a href="#functionParameterErrors">Function Parameter Error Messages</a></span></dt><dt><span class="sect1"><a href="#massActionErrors">Mass Action Error Messages</a></span></dt><dt><span class="sect1"><a href="#copasiMethodErrors">COPASI Method Error Messages</a></span></dt><dt><span class="sect1"><a href="#reactionErrors">Reaction Error Messages</a></span></dt><dt><span class="sect1"><a href="#parameterErrors">Parameter Error Messages</a></span></dt><dt><span class="sect1"><a href="#trajectoryMethodErrors">Trajectory Method Error Messages</a></span></dt><dt><span class="sect1"><a href="#xmlReaderErrors">XML Reader Error Messages</a></span></dt><dt><span class="sect1"><a href="#configurationErrors">Configuration File Error Messages</a></span></dt><dt><span class="sect1"><a href="#optimizationTaskErrors">Optimization Task Error Messages</a></span></dt><dt><span class="sect1"><a href="#sbmlErrors">SBML Error Messages</a></span></dt><dt><span class="sect1"><a href="#trajectoryTaskErrors">Trajectory Task Error Messages</a></span></dt><dt><span class="sect1"><a href="#dirEntryErrors">Directory Entry Error Messages</a></span></dt><dt><span class="sect1"><a href="#mathMLErrors">MathML Error Messages</a></span></dt><dt><span class="sect1"><a href="#functionErrors">Function Error Messages</a></span></dt><dt><span class="sect1"><a href="#evaluationNodeErrors">Evaluation Node Error Messages</a></span></dt><dt><span class="sect1"><a href="#copasiTaskErrors">COPASI Task Error Messages</a></span></dt><dt><span class="sect1"><a href="#steadyStateErrors">Steady State Calculation Error Messages</a></span></dt><dt><span class="sect1"><a href="#parameterFittingErrors">Parameter Fitting Error Messages</a></span></dt><dt><span class="sect1"><a href="#copasiObjectErrors">COPASI Object Error Messages</a></span></dt><dt><span class="sect1"><a href="#lyapunovErrors">Lyapunov Exponent Calculation Error Messages</a></span></dt></dl></div><p>
This section contains a list of COPASI error messages and an explanation when and/or why this error might have occurred. This is work in progress and not all error messages might have been fully documented here yet.
</p><p>
Also keep in mind that the vast majority of error messages listed here are internal to COPASI and users will probably never see them at all. If you see one of those, you know that there is a bug in COPASI and you should provide a bug report that is as detailed as possible. At the very least, the bug report should include a description of what you did when the bug occurred, the operating system you are running COPASI on and the version of COPASI you were using. Naturally, if possible, we would also like to have some file that shows the error reproducibly since this makes finding bugs a lot easier for us. Error messages that you should never encounter will be marked INTERNAL in the description. So if you encounter any error message marked as INTERNAL please provide as with a bug report so we can fix it. There are two ways to provide a bug report. The first one is to go to COPASI's <a href="http://calvin.bioinformatics.vt.edu/bugzilla/createaccount.cgi" target="_top">bugzilla web-page</a> and create a new account if you don't already have one and enter a full bug report into the bugzilla database. The other way to report a bug is to send an email to bugs@copasi.org with the information mentioned above. 
</p><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="configReaderErrors"/>Gepasi File Reader Error Messages</h2></div></div></div><p>
The CReadConfig messages report problems when reading a Gepasi file. 
</p><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CReadConfig (1)</dd><dt><span class="term">Error Message:</span></dt><dd> Variable 'VARIABLENAME' not found in 'FILENAME(LINENUMBER)'.</dd><dt><span class="term">Description:</span></dt><dd>COPASI expects the variable VARIABLENAME in the file FILENAME at line LINENUMBER. Often LINENUMBER will be the last line of the file as COPASI searches for the variable.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CReadConfig (2)</dd><dt><span class="term">Error Message:</span></dt><dd> Cannot open file 'FILENAME'.</dd><dt><span class="term">Description:</span></dt><dd>COPASI cannot open the file FILENAME.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CReadConfig (3)</dd><dt><span class="term">Error Message:</span></dt><dd> Cannot read file 'FILENAME'.</dd><dt><span class="term">Description:</span></dt><dd>COPASI cannot read the file FILENAME.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CReadConfig (4)</dd><dt><span class="term">Error Message:</span></dt><dd> Cannot close file 'FILENAME'.</dd><dt><span class="term">Description:</span></dt><dd>COPASI cannot close the file FILENAME.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CReadConfig (5)</dd><dt><span class="term">Error Message:</span></dt><dd> Invalid type 'TYPE' for  Variable 'VARIABLENAME'.</dd><dt><span class="term">Description:</span></dt><dd>COPASI expects the variable VARIABLENAME to be of a different type than TYPE.</dd></dl></div><p>



</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="copasiVectorErrors"/>COPASI Vector Error Messages</h2></div></div></div><p>
These error messages are from Copasis vector class which is sued in many places. If you see those error messages, who very likeley found a bug in Copasi and you should provide us with a bug report.
</p><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CCopasiVector (1)</dd><dt><span class="term">Error Message:</span></dt><dd> Object 'OBJECTNAME' not found.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CCopasiVector (2)</dd><dt><span class="term">Error Message:</span></dt><dd> Object 'OBJECTNAME' already exists.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>



</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="functionParameterErrors"/>Function Parameter Error Messages</h2></div></div></div><p>
Error messages from Copasis internal function representation.
</p><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CFunctionParameters (2)</dd><dt><span class="term">Error Message:</span></dt><dd> No parameter with usage 'TYPE' with index &gt;= 'INDEX'.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>



</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="massActionErrors"/>Mass Action Error Messages</h2></div></div></div><p>
Copasi uses a separate class for representing mass action kinetics in reaction. These error messages are from that class.
</p><p>

</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CMassAction (1)</dd><dt><span class="term">Error Message:</span></dt><dd> The function Mass Action reversibility must be either TRUE or FALSE.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>



</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="copasiMethodErrors"/>COPASI Method Error Messages</h2></div></div></div><p>
Classes derived from CCopasiMethod provide the individual methods for the different task. If you see one of those error messages, you have probably found a bug in COPASI and we would like you to send us a bug report.
</p><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CCopasiMethod (2)</dd><dt><span class="term">Error Message:</span></dt><dd> pProblem == NULL</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CCopasiMethod (3)</dd><dt><span class="term">Error Message:</span></dt><dd> Model is not set in problem</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>



</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="reactionErrors"/>Reaction Error Messages</h2></div></div></div><p>
CReaction is COPASIs internal reaction representation. Many of the error messages in this class are related to SBML import/export.
</p><p>


</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CReaction (1)</dd><dt><span class="term">Error Message:</span></dt><dd> Function 'FUNCTIONNAME' not found.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL. A reaction tries to use a function as a kinetic law that is unknown.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CReaction (3)</dd><dt><span class="term">Error Message:</span></dt><dd> Reaction 'REACTIONNAME' has no substrates and no products.</dd><dt><span class="term">Description:</span></dt><dd>COPASI found a reaction with neither substrates nor products. A reaction needs to have at least one substrate or one product.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CReaction (4)</dd><dt><span class="term">Error Message:</span></dt><dd> Only Metabolites, Compartments or Parameter object nodes are allowed in kinetic functions.</dd><dt><span class="term">Description:</span></dt><dd>In kinetic functions, only references to compartments, metabolites and/or parameters are allowed. For explicit time dependent models, time can also be referenced from a kinetic function. If this error message occurs, COPASI has found a reference that is neither a reference to a compartment, a metabolite, a parameter or the time.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CReaction (5)</dd><dt><span class="term">Error Message:</span></dt><dd> Nodes of type TYPENAME are not implemented yet.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CReaction (6)</dd><dt><span class="term">Error Message:</span></dt><dd> Nodes of type VARIABLE must not appear in an expression.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CReaction (7)</dd><dt><span class="term">Error Message:</span></dt><dd> CMetab object 'OBJECTNAME' is neither substrate, product nor modifier to reaction 'REACTIONNAME' but it is used in the kinetic law.</dd><dt><span class="term">Description:</span></dt><dd>During SBML import COPASI found a name in a kinetic law that is neither a parameter, a substrate, product or modifier to the reaction. The most likely cause for this that a modifier has not been declared in the listOfModifiers of the reaction.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CReaction (8)</dd><dt><span class="term">Error Message:</span></dt><dd> Could not find variable with name 'VARIABLENAME'.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CReaction (9)</dd><dt><span class="term">Error Message:</span></dt><dd> Could not find object for key 'KEY'.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CReaction (10)</dd><dt><span class="term">Error Message:</span></dt><dd> Parameter 'PARAMETER' is a vector.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>



</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="parameterErrors"/>Parameter Error Messages</h2></div></div></div><p>
</p><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CCopasiParameter (2)</dd><dt><span class="term">Error Message:</span></dt><dd> Elevation failed, since no parameter is provided.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CCopasiParameter (3)</dd><dt><span class="term">Error Message:</span></dt><dd> Elevation failed, since the parameter is not of the required source type.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CCopasiParameter (4)</dd><dt><span class="term">Error Message:</span></dt><dd> Elevation failed, since elevation of children failed.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CCopasiParameter (5)</dd><dt><span class="term">Error Message:</span></dt><dd> Elevation failed, since the parameter is not member of this group.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="trajectoryMethodErrors"/>Trajectory Method Error Messages</h2></div></div></div><p>
These error messages can occur when running a trajectory task. All of them depend on the method that has been chosen for the trajectory, e.g. stochastic, since the error message is generated by the method and not the task itself.
</p><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CTrajectoryMethod (1)</dd><dt><span class="term">Error Message:</span></dt><dd> Hybrid simulation not applicable, since the stoichiometry contains a non-integer.</dd><dt><span class="term">Description:</span></dt><dd>Hybrid simulations can not be run on models that contain reactions with non integer stoichiometries.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CTrajectoryMethod (2)</dd><dt><span class="term">Error Message:</span></dt><dd> Hybrid simulation not applicable, since reversible reactions exists.</dd><dt><span class="term">Description:</span></dt><dd>Hybrid simulations can not be run on models with reversible reactions. You can try to convert all reactions to irreversible reactions via the "Convert to irreversible" menu item in the tools menu.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CTrajectoryMethod (3)</dd><dt><span class="term">Error Message:</span></dt><dd> Hybrid simulation not applicable, since more than one compartment is involved.</dd><dt><span class="term">Description:</span></dt><dd>Hybrid simulations only work on single compartment models.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CTrajectoryMethod (4)</dd><dt><span class="term">Error Message:</span></dt><dd> mLowerStochLimit ('LOWERSTOCHLIMIT') is greater than mUpperStochLimit ('UPPERSTOCHLIMIT').</dd><dt><span class="term">Description:</span></dt><dd>Check the limits for the hybrid method. The "Lower limit" parameter has to be smaller than the "Upper limit" parameter.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CTrajectoryMethod (6)</dd><dt><span class="term">Error Message:</span></dt><dd> Deterministic integration failed. LSODA reported:LSODA_ERROR_MESSAGE Please see result for indications of numerical instability.</dd><dt><span class="term">Description:</span></dt><dd>The deterministic integration failed. This is a strong indication of numerical problems. A look at the time series calculated up to the point the problem occurred is often helpful in resolving the problem.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CTrajectoryMethod (7)</dd><dt><span class="term">Error Message:</span></dt><dd> pProblem == NULL</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CTrajectoryMethod (8)</dd><dt><span class="term">Error Message:</span></dt><dd> Problem is not a trajectory problem.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>
</p><div class="variablelist"><span class="ERROR">&lt;listitem&gt;TO BE WRITTEN&lt;/listitem&gt;</span><dl><dt><span class="term">Error Code:</span></dt><dd>CTrajectoryMethod (9)</dd><dt><span class="term">Error Message:</span></dt><dd> Negative time steps not possible with stochastic simulation.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CTrajectoryMethod (10)</dd><dt><span class="term">Error Message:</span></dt><dd> The tau-Leap Method encountered numerical problems. You can try to reduce the tau-value.</dd><dt><span class="term">Description:</span></dt><dd>Choose a lower value for tau and rerun the time course task.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CTrajectoryMethod (11)</dd><dt><span class="term">Error Message:</span></dt><dd> Invalid tau-value ('TAU'). Tau must have a positive value.</dd><dt><span class="term">Description:</span></dt><dd>Values for tau must be positive numbers.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CTrajectoryMethod (12)</dd><dt><span class="term">Error Message:</span></dt><dd> Internal step limit exceeded.</dd><dt><span class="term">Description:</span></dt><dd>The internal step limit is exceeded. Reducing the accuracy requirements or increasing the step limit may resolve the problem.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CTrajectoryMethod (13)</dd><dt><span class="term">Error Message:</span></dt><dd> Runge Kutta Stepsize must be positive in hybrid method.</dd><dt><span class="term">Description:</span></dt><dd>The stepsize for the Runge Kutta solver within the hybrid method must be positive, since the hybrid method does not support backward integration in time.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CTrajectoryMethod (15)</dd><dt><span class="term">Error Message:</span></dt><dd> Max Internal Steps needs to be positive.</dd><dt><span class="term">Description:</span></dt><dd>The maximal number of internal steps must be at least 1.</dd></dl></div><p>



</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="xmlReaderErrors"/>XML Reader Error Messages</h2></div></div></div><p>
These error messages can occur when reading COPASI files. Many of the error messages of the XML file reader are not serious. Since the COPASI file format has changed during development, current versions of COPASI might not recognize some elements used in older versions of the file format. And vice versa if you try to read a COPASI file generated with a version newer than the one you are currently using, the file might contain new elements unknown to the older version of COPASI. In the worst case some task settings might be lost.
</p><p>

</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>XML (1)</dd><dt><span class="term">Error Message:</span></dt><dd> Required attribute 'ATTRIBUTENAME' not found (line: 'LINENUMBER').</dd><dt><span class="term">Description:</span></dt><dd>The required attribute ATTRIBUTENAME is missing at line LINENUMBER. Please check the XML file.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>XML (2): XML error (line: 'LINENUMBER', column: 'POSITION')</dd><dt><span class="term">Error Message:</span></dt><dd> 'MESSAGE'.</dd><dt><span class="term">Description:</span></dt><dd>Incorrect XML encountered at line LINENUMBER and character POSITION. The message gives further details about the error. This error is also shown when libsbml finds an error in an SBML file.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>XML (3)</dd><dt><span class="term">Error Message:</span></dt><dd> Unknown element 'ELEMENTNAME' encountered at line 'LINENUMBER'.</dd><dt><span class="term">Description:</span></dt><dd>The XML contained an unknown element ELEMENTNAME at line LINENUMBER. This element is ignored. </dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>XML (4)</dd><dt><span class="term">Error Message:</span></dt><dd> Unknown parameter 'PARAMETERNAME' encountered at line 'LINENUMBER'.</dd><dt><span class="term">Description:</span></dt><dd>The XML contained an unknown parameter PRAMETERNAME at line LINENUMBER. This parameter is ignored.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>XML (5)</dd><dt><span class="term">Error Message:</span></dt><dd> Unknown task type 'TASKTYPE' encountered at line 'LINENUMBER'.</dd><dt><span class="term">Description:</span></dt><dd>The XML contained an unknown task of type TASKTYPE at line LINENUMBER. This task is ignored.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>XML (6)</dd><dt><span class="term">Error Message:</span></dt><dd> Invalid function 'FUNCTIONNAME' encountered at line 'LINENUMBER'.</dd><dt><span class="term">Description:</span></dt><dd>The XML contains an invalid function FUNCTIONNAME at line LINENUMBER. This error should never occur, if it occurs with a file generated by COPASI, please send a bug report.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>XML (7)</dd><dt><span class="term">Error Message:</span></dt><dd> Unknown function 'FUNCTIONNAME' in reaction 'REACTIONNAME' encountered at line 'LINENUMBER'.</dd><dt><span class="term">Description:</span></dt><dd>The reaction REACTIONAME uses a call to an unknown function named FUNCTIONNAME in line LINENUMBER. Please check the XML file.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>XML (8)</dd><dt><span class="term">Error Message:</span></dt><dd> Unknown variable 'VARIABLENAME' in function 'FUNCTIONNAME' encountered at line 'LINENUMBER'. A possible reason is that the variable is a reserved string within the function description.</dd><dt><span class="term">Description:</span></dt><dd>Please check the file if a variable of the function FUNCTIONNAME at line LINENUMBER is a reserved keyword. For a list of reserved keywords see the section on <a href="#addingFunctions">Adding and Editing User Defined Functions</a></dd></dl></div><p>
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="configurationErrors"/>Configuration File Error Messages</h2></div></div></div><p>
These error messages are related to reading and writing COPASIs configuration file. (see <span class="ERROR">&lt;xlink&gt;commandline options&lt;/xlink&gt;</span>)
</p><p>

</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>Configuration (1)</dd><dt><span class="term">Error Message:</span></dt><dd> COPASI directory is not set. Some features might not be working correctly. Please set the environment variable COPASIDIR or use the command line options -c COPASIDIR or --copasidir COPASIDIR to point to the COPASI installation directory.</dd><dt><span class="term">Description:</span></dt><dd>self explanatory</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>Configuration (2)</dd><dt><span class="term">Error Message:</span></dt><dd> Configuration file 'FILENAME' found but is not readable.</dd><dt><span class="term">Description:</span></dt><dd>COPASI found the configuration file but could not read it. Please check if you have sufficient permissions on the file FILENAME.</dd></dl></div><p>



</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="optimizationTaskErrors"/>Optimization Task Error Messages</h2></div></div></div><p>
These are error messages that can occur when running an optimization task. 
</p><p>

</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>Optimization (1)</dd><dt><span class="term">Error Message:</span></dt><dd> Object 'OBJECTNAME' not found.</dd><dt><span class="term">Description:</span></dt><dd>The object specified by OBJECTNAME can not be found. This normally indicates that the model was changed and the parameters or constraints must be adjusted.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>Optimization (2)</dd><dt><span class="term">Error Message:</span></dt><dd> Lower Bound 'OBJECTNAME' not found.</dd><dt><span class="term">Description:</span></dt><dd>The lower bound specified by OBJECTNAME can not be found. This normally indicates that the model was changed and the parameters or constraints must be adjusted.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>Optimization (3)</dd><dt><span class="term">Error Message:</span></dt><dd> Upper Bound 'OBJECTNAME' not found.</dd><dt><span class="term">Description:</span></dt><dd>The upper bound specified by OBJECTNAME can not be found. This normally indicates that the model was changed and the parameters or constraints must be adjusted.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>Optimization (4)</dd><dt><span class="term">Error Message:</span></dt><dd> Empty Interval ('LOWERBOUND', 'UPPERBOUND') specified.</dd><dt><span class="term">Description:</span></dt><dd>The interval is invalid as the lower bound is larger than the upper bound. Please correct the problem.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>Optimization (5)</dd><dt><span class="term">Error Message:</span></dt><dd> Invalid Objective Functions.</dd><dt><span class="term">Description:</span></dt><dd>The objective function is invalid, i.e, COPASI can not interpret it. Please correct the problem.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>Optimization (6)</dd><dt><span class="term">Error Message:</span></dt><dd> No adjustable Parameters specified.</dd><dt><span class="term">Description:</span></dt><dd>Since no parameter are specified no optimization can be performed.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>Optimization (7)</dd><dt><span class="term">Error Message:</span></dt><dd> No Task Type specified.</dd><dt><span class="term">Description:</span></dt><dd>The optimization task type is not specified. Supported types are currently time course and steady state.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>Optimization (8)</dd><dt><span class="term">Error Message:</span></dt><dd> 'NUMFAILS' Function Evaluation out of 'NUMEVALS' failed.</dd><dt><span class="term">Description:</span></dt><dd>A high percentage of failed function evaluation indicates that the parameter range is not appropriate or the objective function is ill defined. For parameter estimation problems please check also whether the experimental data is correctly specified in accordance with provided data files.</dd></dl></div><p>

</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="sbmlErrors"/>SBML Error Messages</h2></div></div></div><p>
The following errors are generated by the SBML importer and exporter. If you encounter errors related to SBML import, please check your SBML file with the SBML On-line Validator at <a href="http://sbml.org/tools/htdocs/sbmltools.php" target="_top">http://sbml.org/tools/htdocs/sbmltools.php</a> before you file a bug report.
</p><p>

</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (1)</dd><dt><span class="term">Error Message:</span></dt><dd>SBML Level2 Version1 does not support initial times different from 0. This information will be lost in the exported file.</dd><dt><span class="term">Description:</span></dt><dd>The initial time of your model is set to a value different than 0. This information can not be stored in SBML Level2 Version1 and will therefore not be present in the exported model.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (2)</dd><dt><span class="term">Error Message:</span></dt><dd> The SBML document contains no model.</dd><dt><span class="term">Description:</span></dt><dd>This error occurs if you try to load an SBML file that does not contain a model.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (3)</dd><dt><span class="term">Error Message:</span></dt><dd> The SBML document contains rules that were ignored.</dd><dt><span class="term">Description:</span></dt><dd>COPASI does not support SBML rules yet, so if you load an SBML file that contains rules, COPASI will warn you that the rules have been ignored. Please be aware that this will very likely change simulation results.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (4)</dd><dt><span class="term">Error Message:</span></dt><dd> The SBML document contains events that were ignored.</dd><dt><span class="term">Description:</span></dt><dd>COPASI does not support SBML events yet, so if you load an SBML file that contains events, COPASI will warn you that the events have been ignored. Please be aware that this will very likely change simulation results.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (5)</dd><dt><span class="term">Error Message:</span></dt><dd> Compartment COMPARTMENTID referenced by species SPECIESID does not exist.</dd><dt><span class="term">Description:</span></dt><dd>In the SBML file a the species with id SPECIESID references the compartment with id COMPARTMENTID, but a compartment with this id does not exist.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (6)</dd><dt><span class="term">Error Message:</span></dt><dd> Annotations in SBML element of SBML Level 1 files, this is invalid and has been ignored.</dd><dt><span class="term">Description:</span></dt><dd>Some programs add annotations to the SBML element of the file which is incorrect. Since it doesn't affect the mode, COPASI reads the model anyway but ignores the annotation. If you want to keep the annotation please open the SBML file in a text editor and move it to e.g. the model element.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (7)</dd><dt><span class="term">Error Message:</span></dt><dd> One or more model values have not been set.</dd><dt><span class="term">Description:</span></dt><dd>In order to simulate a model in COPASI it has to be complete, meaning all initial values and parameter values have to be set. SBML allows the user to specify incomplete models. This warning tells the user that some values in the model have not been set and that the model is incomplete. Most tasks in COPASI will not work with this model until all values have been set. Unset values will be shown as NaN in COPASI graphical user interface. The fastest way to find unset values is to use the <a href="#">parameter view</a>.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (8)</dd><dt><span class="term">Error Message:</span></dt><dd> Expression tree for kinetic of reaction 'REACTIONID' could not be converted.</dd><dt><span class="term">Description:</span></dt><dd>The kinetic formula for the reaction with id REACTIONID could not be converted into COPASI's internal function representation. If you think the formula is correct, please send as a bug report with the SBML file included so we can have a look at it.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (9)</dd><dt><span class="term">Error Message:</span></dt><dd> Could not set function from expression in reaction 'REACTIONID'.</dd><dt><span class="term">Description:</span></dt><dd>Somehow COPASI was able to generate in internal representation for a function formula, but could not use it with a reaction. If you get such an error, please send as a bug report with the SBML file so we can look at it.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (10)</dd><dt><span class="term">Error Message:</span></dt><dd> COPASI does not support stoichiometric expressions yet.</dd><dt><span class="term">Description:</span></dt><dd>Although COPASI does support fractional stoichiometries, arbitrary stoichiometric expressions are not supported yet. If such a stoichiometry is encountered, COPASI will not read the file.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (11)</dd><dt><span class="term">Error Message:</span></dt><dd> Function 'FUNCTIONID' does not start with a Lambda element.</dd><dt><span class="term">Description:</span></dt><dd>Function definitions in MathML have to start with a Lambda element. If you see this error, the function with the id FUNCTIONID is very likely incorrect MathML because it is missing this element.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (12)</dd><dt><span class="term">Error Message:</span></dt><dd> Function 'FUNCTIONID' contains invalid parameter list.</dd><dt><span class="term">Description:</span></dt><dd>The error message means that the parameter list for the function definition with id FUNCTIONID contains an invalid type, e.g. a number instead of a parameter name.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (13)</dd><dt><span class="term">Error Message:</span></dt><dd> Could not read function definition for function 'FUNCTIONID'.</dd><dt><span class="term">Description:</span></dt><dd>COPASI could not read the function definition with id FUNCTIONID. If you think this function definition is correct, please send us a bug report and include the SBML file.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (14)</dd><dt><span class="term">Error Message:</span></dt><dd> Could not import function with id 'ID'.</dd><dt><span class="term">Description:</span></dt><dd>This error message is very similar to the one above but the error here already occurred in libsbml while reading the function definition.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (15)</dd><dt><span class="term">Error Message:</span></dt><dd> Could not find function with id 'ID'.</dd><dt><span class="term">Description:</span></dt><dd>COPASI could not find the function with id ID while exporting a model to SBML. If you get this error message please save the model as a COPASI file and send us a bug report with this file.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (16)</dd><dt><span class="term">Error Message:</span></dt><dd> Loop found in function. That means a function calls itself either directly or indirectly.</dd><dt><span class="term">Description:</span></dt><dd>COPASI has found a loop in a function call while exporting your model to SBML. This should never happen so if you see this error message please save the model as a COPASI file and send us a bug report with this file.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (17)</dd><dt><span class="term">Error Message:</span></dt><dd> Single compartment reaction found where the kinetic law does not include a multiplication by the volume.</dd><dt><span class="term">Description:</span></dt><dd>This is a warning only. Please see the COPASI FAQ question 'Why are some rate laws in SBML files exported by COPASI multiplied by the compartment volume?' at <a href="http://www.copasi.org" target="_top">http://www.copasi.org/</a>.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (18)</dd><dt><span class="term">Error Message:</span></dt><dd> Support for 'hasOnlySubstanceUnit' flag on species 'SPECIES' is experimental.</dd><dt><span class="term">Description:</span></dt><dd>The latest versions of COPASI support the hasOnlySubstanceUnits flag on species in SBML files. It should work just fine, but it has not been heavily tested yet.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (19)</dd><dt><span class="term">Error Message:</span></dt><dd> spatialSizeUnits on species SPECIESID ignored.</dd><dt><span class="term">Description:</span></dt><dd>COPASI does not support the spatialSizeUnits attribute for species. The species with id SPECIESID in the current file seems to use this attribute however.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (20)</dd><dt><span class="term">Error Message:</span></dt><dd> Setting an initial concentration on species SPECIESID which has the 'hasOnlySubstanceUnits' flag set is not allowed.</dd><dt><span class="term">Description:</span></dt><dd>The SBML file seems to contain a species with id SPECIESID that has the hasOnlySubstanceUnits flag set to true but also has an initialConcentration set. This is incorrect, please specify an initial amount instead.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (21)</dd><dt><span class="term">Error Message:</span></dt><dd> Setting an initial concentration on species 'SPECIESID' which is in a compartment with spatial dimensions 0 is not allowed.</dd><dt><span class="term">Description:</span></dt><dd>Having a compartment with a spatial dimension of 0 implies that all species within this compartment have the hasOnlySubstanceUnits flag set to true. Therefore it is incorrect to specify an initial concentration for those species. Specify an initial amount instead. Current version of COPASI refuse to read models with compartments that have their spatial size units set to 0 so this error message will never appear.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (22)</dd><dt><span class="term">Error Message:</span></dt><dd> Current versions of COPASI only supports three dimensional compartments. 'COMPARTMENTID' will be converted to three dimensions.</dd><dt><span class="term">Description:</span></dt><dd>COPASI only supports three dimensional compartments so far, so all compartments are converted to three dimensions no matter what is specified in the SBML file. Independent of this is the handling of spatial dimensions that are set to 0 in the SBML file (see error SBML (21) above). Current version of COPASI refuse to read models with compartments that have their spatial size units set to 0 so this error message will never appear.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (23)</dd><dt><span class="term">Error Message:</span></dt><dd> Unable to handle compartment 'COMPARTMENTID' which has spatial dimensions of 0.</dd><dt><span class="term">Description:</span></dt><dd>COPASI does not handle models that include compartments with spatial dimensions set to 0. This might change in future versions.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (24)</dd><dt><span class="term">Error Message:</span></dt><dd> Units for compartment 'COMPARTMENTID' ignored.</dd><dt><span class="term">Description:</span></dt><dd>COPASI refuses to read models where units other than 'volume' are specified for a compartment since COPASI can not convert units yet.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (25)</dd><dt><span class="term">Error Message:</span></dt><dd> Units for species 'SPECIESID' ignored.</dd><dt><span class="term">Description:</span></dt><dd>COPASI refuses to read models where units other than 'substance' are specified for a species since COPASI can not convert units yet.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (26)</dd><dt><span class="term">Error Message:</span></dt><dd> Units for parameter 'PARAMETERID' ignored.</dd><dt><span class="term">Description:</span></dt><dd>COPASI ignores units set on individual compartments since unit conversion is not supported in COPASI yet. Please be aware that depending on the units results generated from such a model might be incorrect.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (27)</dd><dt><span class="term">Error Message:</span></dt><dd> Error in kinetic law for reaction 'REACTIONID'.</dd><dt><span class="term">Description:</span></dt><dd>Some error occurred while creating the kinetic law for the reaction with id REACTIONID. If you think the kinetic law in the SBML file is OK, please send a bug report and include the SBML file so that we can have a look at it.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (28)</dd><dt><span class="term">Error Message:</span></dt><dd> Error in function definition with id 'ID'.</dd><dt><span class="term">Description:</span></dt><dd>Somehow COPASI was not able to convert the function definition with id ID into it's internal format. If you think the function definition is correct, please send a bug report and include the SBML file.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (29)</dd><dt><span class="term">Error Message:</span></dt><dd> Unable to handle reactions with the 'fast' flag set.\The flag has been set to false.</dd><dt><span class="term">Description:</span></dt><dd>COPASI is not yet able to handle reactions that are set to fast correctly the flag will be automatically set to false on import. In some cases simulation results for these models can be incorrect.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>SBML (30)</dd><dt><span class="term">Error Message:</span></dt><dd> Can't handle units of type item with scale set to 1.\n If this file was created with COPASI RC1 or older please see the COPASI FAQ.</dd><dt><span class="term">Description:</span></dt><dd>COPASI prior to and including RC1 had a bug in the SBML exporter. If the default concentration units were set to items, COPASI would set the scale to 1 instead of 0 on the exported substance unit definition. You can correct those files by opening them in a text editor and setting the scale for the substance units to 0. If the file was not created with COPASI, the scale was probably meant to be 1 and COPASI can not import it since it does not do unit conversion yet.</dd></dl></div><p>



</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="trajectoryTaskErrors"/>Trajectory Task Error Messages</h2></div></div></div><p>
</p><p>
These error messages are generated by the trajectory task so they might occur whenever you run a trajectory task. 
</p><p>

</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CTrajectoryProblem (1)</dd><dt><span class="term">Error Message:</span></dt><dd> Invalid step size = 'VALUE'.</dd><dt><span class="term">Description:</span></dt><dd>Normally this occurs when the step size is 0 which obviously is not meaningful.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CTrajectoryProblem (2)</dd><dt><span class="term">Error Message:</span></dt><dd> The step number 'VALUE' exceeds the limit. The step number and step size have been adjusted to avoid over flow.</dd><dt><span class="term">Description:</span></dt><dd>The step number exceed the limit supported by COPASI. It has been adjusted to the maximal acceptable value.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CTrajectoryProblem (3)</dd><dt><span class="term">Error Message:</span></dt><dd> The step size 'VALUE' is to small for the machine accuracy. The step number and step size have been adjusted.</dd><dt><span class="term">Description:</span></dt><dd>The step size is so small that the step number exceeds the limit supported by COPASI. It has been adjusted to the maximal acceptable value.</dd></dl></div><p>



</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="dirEntryErrors"/>Directory Entry Error Messages</h2></div></div></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>DirEntry (1)</dd><dt><span class="term">Error Message:</span></dt><dd> Directory entry 'ENTRY' already exists.</dd><dt><span class="term">Description:</span></dt><dd>A directory COPASI tried to create already exists.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>DirEntry (2)</dd><dt><span class="term">Error Message:</span></dt><dd> Directory entry 'ENTRY' is read-only.</dd><dt><span class="term">Description:</span></dt><dd>COPASI tried to write to a directory where it does not have writing permissions. Please check the permissions.</dd></dl></div><p>



</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="mathMLErrors"/>MathML Error Messages</h2></div></div></div><p>
These error messages can occur when COPASI finds an error while importing the MathML from an SBML file.
</p><p>

</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>MathML (1)</dd><dt><span class="term">Error Message:</span></dt><dd> Unsupported element 'ELEMENT'.</dd><dt><span class="term">Description:</span></dt><dd>COPASI does not support all MathML elements allowed in SBML files yet. E.g. the delay function is currently not supported.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>MathML (2)</dd><dt><span class="term">Error Message:</span></dt><dd> Unknown element in MathML expression.</dd><dt><span class="term">Description:</span></dt><dd>During SBML import an unknown MathML element was encountered. Please check the MathML expressions in the SBML file.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>MathML (3)</dd><dt><span class="term">Error Message:</span></dt><dd> MINUS operator can only have one or two arguments.</dd><dt><span class="term">Description:</span></dt><dd>During SBML import, COPASI has encountered a MathML expression where a minus operator has 0 or more than 2 arguments. Please check the MathML in the SBML file.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>MathML (4)</dd><dt><span class="term">Error Message:</span></dt><dd> DIVIDE and POWER operator can only have 2 arguments.</dd><dt><span class="term">Description:</span></dt><dd>The divide and the power operator in MathML must have exactly two arguments. During SBML import COPASI has found a MathML expression where this is not the case. Please check the MathML in the SBML file.</dd></dl></div><p>



</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="functionErrors"/>Function Error Messages</h2></div></div></div><p>
COPASI uses a lexer and a parser generated by Bison to parse function strings. These error messages can occur when an incorrect function is entered or read from file.

</p><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>Function (1)</dd><dt><span class="term">Error Message:</span></dt><dd> Parser error after position: 'POSITION'.</dd><dt><span class="term">Description:</span></dt><dd>The grammatical function parser encountered an error parsing the function description after character POSITION.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>Function (2)</dd><dt><span class="term">Error Message:</span></dt><dd> Lexer error after position: 'POSITION'.</dd><dt><span class="term">Description:</span></dt><dd>The lexical function parser encountered an error parsing the function description after character POSITION.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>Function (3)</dd><dt><span class="term">Error Message:</span></dt><dd> Compile error after position: 'POSITION'.</dd><dt><span class="term">Description:</span></dt><dd>A function compile failed  after character POSITION.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>Function (4)</dd><dt><span class="term">Error Message:</span></dt><dd> Circular dependency detected.</dd><dt><span class="term">Description:</span></dt><dd>The function definition results in circular dependencies and thus are invalid. This may happen if the function call another function.</dd></dl></div><p>
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="evaluationNodeErrors"/>Evaluation Node Error Messages</h2></div></div></div><p>

</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CEvaluationNodeObject (1)</dd><dt><span class="term">Error Message:</span></dt><dd> Only references to compartment, species, parameters and reaction are allowed in expression.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL. During export to SBML COPASI has found a reference in a kinetic law that is neither a reference to the time, a species, a compartment, a parameter or a reaction.</dd></dl></div><p>



</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="copasiTaskErrors"/>COPASI Task Error Messages</h2></div></div></div><p>
All tasks in COPASI are derived from one base class called CCopasiTask. These error messages are generated by this base class and should never occur. If you encounter such an error message it is very likely that you found a bug in COPASI. Please file a bug report.
</p><p>

</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CCopasiTask (1)</dd><dt><span class="term">Error Message:</span></dt><dd> No problem defined for Task 'TASK'.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CCopasiTask (2)</dd><dt><span class="term">Error Message:</span></dt><dd> No model associated for Task 'TASK'.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CCopasiTask (3)</dd><dt><span class="term">Error Message:</span></dt><dd> No method defined for Task 'TASK'.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CCopasiTask (4)</dd><dt><span class="term">Error Message:</span></dt><dd> Error compiling Model 'MODELNAME'.</dd><dt><span class="term">Description:</span></dt><dd>This indicates a serious problem with the model. Please check your model. If you think your model is OK, please send a bug report.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CCopasiTask (5)</dd><dt><span class="term">Error Message:</span></dt><dd> No output file defined for report.</dd><dt><span class="term">Description:</span></dt><dd>This means that there is a report but that COPASI does not know where to write it to since this has not been specified. All data from this report will be lost.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CCopasiTask (6)</dd><dt><span class="term">Error Message:</span></dt><dd> Problems compiling Report 'REPORT'.</dd><dt><span class="term">Description:</span></dt><dd>At least one of the objects used in the report could not be found. The report will generated despite the problem but might not be what you expected. This usually happens if you change the model after you defined the plots.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CCopasiTask (7)</dd><dt><span class="term">Error Message:</span></dt><dd> Problems compiling Plots.</dd><dt><span class="term">Description:</span></dt><dd>At least one of the ob jets used in the plots could not be found. The plots will generated despite the problem but some curves will be empty. This usually happens if you change the model after you defined the plots.</dd></dl></div><p>



</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="steadyStateErrors"/>Steady State Calculation Error Messages</h2></div></div></div><p>
These error messages can occur when a steady state is calculated.
</p><p>

</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CSteadyState (1)</dd><dt><span class="term">Error Message:</span></dt><dd> The model is explicitly time dependent. Therefore, the calculation of a steady state is not very meaning full.</dd><dt><span class="term">Description:</span></dt><dd>One or more of the kinetic laws used in the model is explicitly time dependent a steady state can therefore not be calculated by COPASI (???.</dd></dl></div><p>
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="parameterFittingErrors"/>Parameter Fitting Error Messages</h2></div></div></div><p>
These errors messages can occur when doing a parameter estimation. 
</p><p>

</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CFitting (1)</dd><dt><span class="term">Error Message:</span></dt><dd> Failed to determine work area size for matrix inversion.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CFitting (2)</dd><dt><span class="term">Error Message:</span></dt><dd> Failed to invert Fisher information matrix.</dd><dt><span class="term">Description:</span></dt><dd>This reports that the Fisher information matrix could not be inverted due to singularity or numerical problems. The parameter statistics will be incomplete.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CFitting (3)</dd><dt><span class="term">Error Message:</span></dt><dd> No column with type 'Time' specified for a time course experiment.</dd><dt><span class="term">Description:</span></dt><dd>For a time course exactly on column of the data file must be mapped to the model time.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CFitting (4)</dd><dt><span class="term">Error Message:</span></dt><dd> Insufficient experimental data (columns requested 'COLUMNNUMBER', columns found 'COLUMNNUMBER').</dd><dt><span class="term">Description:</span></dt><dd>The data specification contains more columns than the file provides. Calculation is stopped and the problem must be fixed first.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CFitting (5)</dd><dt><span class="term">Error Message:</span></dt><dd> Incomplete data mapping, column 'COLUMNINDEX' must be mapped.</dd><dt><span class="term">Description:</span></dt><dd>A column which is not ignored is not mapped to an object within COPASI. Calculation is stopped and the problem must be fixed first.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CFitting (6)</dd><dt><span class="term">Error Message:</span></dt><dd> Object 'OBJECTNAME' in column 'COLUMNNINDEX' has no numeric value.</dd><dt><span class="term">Description:</span></dt><dd>The object must represent a numerical value. Currently this must be a floating point. This object can currently not be used in parameter fitting.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CFitting (7)</dd><dt><span class="term">Error Message:</span></dt><dd> Insufficient experimental data (rows requested 'ROWNUMBER', rows found 'ROWNUMBER').</dd><dt><span class="term">Description:</span></dt><dd>The data specification describes more data rows than the experimental data provides.  Calculation is stopped and the problem must be fixed first.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CFitting (8)</dd><dt><span class="term">Error Message:</span></dt><dd> Failure reading file 'FILE'.</dd><dt><span class="term">Description:</span></dt><dd>The file cannot be read. Calculation is stopped and the problem must be fixed first. Make sure all data files specified for the fitting are there and readable.</dd></dl></div><p>



</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="copasiObjectErrors"/>COPASI Object Error Messages</h2></div></div></div><p>
CCopasiObject is the base class of almost all objects in COPASI. If you see one of these error messages, you have very likely found a bug in COPASI. Please provide a bug report.
</p><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CObject (1)</dd><dt><span class="term">Error Message:</span></dt><dd> Circular dependencies detected for object 'OBJECT'.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>



</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="lyapunovErrors"/>Lyapunov Exponent Calculation Error Messages</h2></div></div></div><p>
These error messages can occur when calculating the Lyapunov Exponents of a system.
</p><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CLyapMethod (1)</dd><dt><span class="term">Error Message:</span></dt><dd> Problem is not a Lyapunov exponent problem.</dd><dt><span class="term">Description:</span></dt><dd>INTERNAL</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CLyapMethod (2)</dd><dt><span class="term">Error Message:</span></dt><dd> Number of exponents needs to be at least one.</dd><dt><span class="term">Description:</span></dt><dd>This means that probably 0 was entered as the number of Lyapunov exponents to be calculated.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CLyapMethod (3)</dd><dt><span class="term">Error Message:</span></dt><dd> Only 'NUM_EXP' exponents can be calculated for this model because the model has only 'NUM_IND' independent variables.</dd><dt><span class="term">Description:</span></dt><dd>The maximal number of exponents that can be calculated for a given model is the number of independent variables (that is the number of variables in the model minus the number of conservation relations <a href="#massConservation">Calculating Mass Conservations</a>).</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CLyapMethod (4)</dd><dt><span class="term">Error Message:</span></dt><dd> Transient time is larger than overall time.</dd><dt><span class="term">Description:</span></dt><dd>The Lyapunov exponent calculation starts after the transient time. The calculation stops after overall  time. Therefore overall time should have a bigger value than transient time.</dd></dl></div><p>
</p><div class="variablelist"><dl><dt><span class="term">Error Code:</span></dt><dd>CLyapMethod (5)</dd><dt><span class="term">Error Message:</span></dt><dd> Orthonormalization interval is larger than overall time.</dd><dt><span class="term">Description:</span></dt><dd>If the orthonormalization time step is larger than the complete calculation time not a single step can be performed.</dd></dl></div><p>



</p></div></div><div class="bibliography"><div class="titlepage"><div><div><h2 class="title"><a id="d0e8263"/>Bibliography</h2></div></div></div><div class="bibliodiv"><h3 class="title">References </h3><div class="biblioentry"><a id="Baeck93"/><p>[Baeck93] <span class="authorgroup"><span class="firstname">T.</span> <span class="surname">Bäck</span> and <span class="firstname">H.-P.</span> <span class="surname">Schwefel</span>. </span><span class="title"><i>
   An overview of evolutionary algorithms for parameter optimization
   </i>. </span><span class="publisher"> Evolutionary Computation </span><span class="volumenum">1. </span><span class="pagenums">1 - 23. </span><span class="pubdate">1997. </span></p></div><div class="biblioentry"><a id="Baeck97"/><p>[Baeck97] <span class="authorgroup"><span class="firstname">T.</span> <span class="surname">Bäck</span>, <span class="firstname">D.B.</span> <span class="surname">Fogel</span>, and <span class="firstname">Z.</span> <span class="surname">Michalewicz</span>. </span><span class="title"><i>
   Handbook of evolutionary computation
   </i>. </span><span class="publisher">Oxford: IOP Publishing/Oxford University Press </span><span class="pubdate">1997. </span></p></div><div class="biblioentry"><a id="Bell66"/><p>[Bell66] <span class="authorgroup"><span class="firstname">M.</span> <span class="surname">Bell</span> and <span class="firstname">M.C.</span> <span class="surname">Pike</span>. </span><span class="title"><i>Remark on algorithm 178 direct search</i>. </span><span class="publisher">
   Communications of the Association for Computing Machinery </span><span class="volumenum">9. </span><span class="pagenums">684 - 685. </span><span class="pubdate">1966. </span></p></div><div class="biblioentry"><a id="Burns85"/><p>[Burns85] <span class="authorgroup"><span class="firstname">J.A.</span> <span class="surname">Burns</span>, <span class="firstname">A.</span> <span class="surname">Cornish-Bowden</span>, <span class="firstname">A.K.</span> <span class="surname">Groen</span>, <span class="firstname">R.</span> <span class="surname">Heinrich</span>, <span class="firstname">H.</span> <span class="surname">Kacser</span>, <span class="firstname">J.W.</span> <span class="surname">Porteous</span>, <span class="firstname">S.M.</span> <span class="surname">Rapoport</span>, <span class="firstname">T.A.</span> <span class="surname">Rapoport</span>, <span class="firstname">J.W.</span> <span class="surname">Stucki</span>, <span class="firstname">J.M.</span> <span class="surname">Tager</span>, <span class="firstname">R.J.A</span> <span class="surname">Wanders</span>, and <span class="firstname">H.V.</span> <span class="surname">Westerhoff</span>. </span><span class="title"><i>Control of metabolic systems
   </i>. </span><span class="publisher">Trends Biochem. Sci. 
   </span><span class="volumenum">10. </span><span class="pagenums">16. </span><span class="pubdate">1985. </span></p></div><div class="biblioentry"><a id="Fletcher87"/><p>[Fletcher87] <span class="author"><span class="firstname">R.</span> <span class="surname">Fletcher</span>. </span><span class="title"><i>
   Practical methods of optimization
   </i>. </span><span class="edition">2nd Edition. </span><span class="publisher">
   Chichester: John Wiley &amp; Sons </span><span class="pubdate">1987. </span></p></div><div class="biblioentry"><a id="Fogel92"/><p>[Fogel92] <span class="authorgroup"><span class="firstname">D.B.</span> <span class="surname">Fogel</span>, <span class="firstname">L.J.</span> <span class="surname">Fogel</span>, and <span class="firstname">J.W.</span> <span class="surname">Atmar</span>. </span><span class="title"><i>
   Meta-evolutionary programming
   </i>. </span><span class="publisher">
   25th Asiloma Conference on Signals, Systems and Computers. IEEE
   Computer Society, Asilomar
   </span><span class="pagenums">540 - 545. </span><span class="pubdate">1992. </span></p></div><div class="biblioentry"><a id="Gibson00"/><p>[Gibson00] <span class="authorgroup"><span class="firstname">M.A.</span> <span class="surname">Gibson</span> and <span class="firstname">J.</span> <span class="surname">Bruck</span>. </span><span class="title"><i>
    Efficient Exact Stochastic Simulation of Chemical Systems with
 Many Species and Many Channels
   </i>. </span><span class="publisher">J. Phys. Chem. </span><span class="volumenum">A104(9). </span><span class="pagenums">1876-1889. </span><span class="pubdate">2000. </span></p></div><div class="biblioentry"><a id="Giersch88"/><p>[Giersch88] <span class="author"><span class="firstname">C.</span> <span class="surname">Giersch</span>. </span><span class="title"><i>Control analysis of metabolic networks. 1. Homogeneous functions and the summation theorems for control coefficients</i>. </span><span class="edition">. </span><span class="publisher">Eur. J. Biochem </span><span class="volumenum">174. </span><span class="pagenums">509 - 513. </span><span class="pubdate">1988. </span></p></div><div class="biblioentry"><a id="Gillespie76"/><p>[Gillespie76] <span class="author"><span class="firstname">D.T.</span> <span class="surname">Gillespie</span>. </span><span class="title"><i>
    A General Method for Numerically Simulating the Stochastic Time
 Evolution of Coupled Chemical Reactions
   </i>. </span><span class="publisher">J. Comp. Phys. </span><span class="volumenum">22. </span><span class="pagenums">403 - 434. </span><span class="pubdate">1976. </span></p></div><div class="biblioentry"><a id="Goldberg89"/><p>[Goldberg89] <span class="author"><span class="firstname">D.E.</span> <span class="surname">Goldberg</span>. </span><span class="title"><i>
    Genetic algorithms in search, optimization and machine learning
   </i>. </span><span class="publisher">Addison-Wesley, Reading, Mass. </span><span class="pubdate">1989. </span></p></div><div class="biblioentry"><a id="Goldfeld66"/><p>[Goldfeld66] <span class="authorgroup"><span class="firstname">S. M.</span> <span class="surname">Goldfeld</span>, <span class="firstname">R. E.</span> <span class="surname">Quant</span>, and <span class="firstname">H. F.</span> <span class="surname"/>. </span><span class="title"><i>
   Maximisation by quadratic hill-climbing
   </i>. </span><span class="publisher">Econometrica </span><span class="volumenum">34. </span><span class="pagenums">541 - 555. </span><span class="pubdate">1966. </span></p></div><div class="biblioentry"><a id="Heinrich74"/><p>[Heinrich74] <span class="authorgroup"><span class="firstname">R.</span> <span class="surname">Heinrich</span> and <span class="firstname">T.A.</span> <span class="surname">Rapoport</span>. </span><span class="title"><i>A linear steady-state treatment of enzymatic chains. General properties, control and effector strength</i>. </span><span class="publisher">Eur. J. Biochem. </span><span class="volumenum">42. </span><span class="pagenums">89 - 95. </span><span class="pubdate">1974. </span></p></div><div class="biblioentry"><a id="Heinrich75"/><p>[Heinrich75] <span class="authorgroup"><span class="firstname">R.</span> <span class="surname">Heinrich</span> and <span class="firstname">T.A.</span> <span class="surname">Rapoport</span>. </span><span class="title"><i>Mathematical analysis of multienzyme systems.
    II. Steady-state and transient control</i>. </span><span class="publisher">BioSystems </span><span class="volumenum">7. </span><span class="pagenums">130 - 136. </span><span class="pubdate">1975. </span></p></div><div class="biblioentry"><a id="Hindmarsh83"/><p>[Hindmarsh83] <span class="author"><span class="firstname">A.C.</span> <span class="surname">Hindmarsh</span>. </span><span class="title"><i>
    ODEPACK, A Systematized Collection of ODE Solvers
   </i>. </span><span class="publisher">Scientific Computing, R. S. Stepleman et al. (eds.),
    North-Holland, Amsterdam, IMACS Transactions on Scientific
    Computation </span><span class="volumenum">1. </span><span class="pagenums">55 - 64. </span><span class="pubdate">1983. </span></p></div><div class="biblioentry"><a id="Hooke61"/><p>[Hooke61] <span class="authorgroup"><span class="firstname">R.</span> <span class="surname">Hooke</span> and <span class="firstname">T. A.</span> <span class="surname">Jeeves</span>. </span><span class="title"><i>
    "Direct search" solution of numerical and statistical problems
   </i>. </span><span class="publisher">Journal of the Association for Computing Machinery </span><span class="volumenum">8. </span><span class="pagenums">212 - 229. </span><span class="pubdate">1961. </span></p></div><div class="biblioentry"><a id="Kacser73"/><p>[Kacser73] <span class="authorgroup"><span class="firstname"> H.</span> <span class="surname">Kacser</span> and <span class="firstname">J.A.</span> <span class="surname">Burns</span>. </span><span class="title"><i>The control of flux.</i>. </span><span class="publisher">Symp. Soc. Exp. Biol. </span><span class="volumenum">27. </span><span class="pagenums">65 - 104. </span><span class="pubdate">1973. </span></p></div><div class="biblioentry"><a id="Kaupe63"/><p>[Kaupe63] <span class="author"><span class="firstname"/> <span class="surname">Kaupe</span>. </span><span class="title"><i>Algorithm 178 direct search</i>. </span><span class="publisher">
   Communications of the Association of Computing Machinery 
   </span><span class="volumenum">6. </span><span class="pagenums">313 - 314. </span><span class="pubdate">1963. </span></p></div><div class="biblioentry"><a id="Levenberg44"/><p>[Levenberg44] <span class="author"><span class="firstname">K.</span> <span class="surname">Levenberg</span>. </span><span class="title"><i>
   A method for the solution of certain nonlinear problems in least squares
   </i>. </span><span class="publisher">Quart. Appl. Math. </span><span class="volumenum">2. </span><span class="pagenums">164 - 168. </span><span class="pubdate">1944. </span></p></div><div class="biblioentry"><a id="Maier91"/><p>[Maier91] <span class="author"><span class="firstname">W.L.</span> <span class="surname">Maier</span>. </span><span class="title"><i>
    A Fast Pseudo Random Number Generator
   </i>. </span><span class="publisher">Dr. Dobb's Journal </span><span class="volumenum">May. </span><span class="pagenums">152 - 157. </span><span class="pubdate">1991. </span></p></div><div class="biblioentry"><a id="Marquardt63"/><p>[Marquardt63] <span class="author"><span class="firstname">D.W.</span> <span class="surname">Marquardt</span>. </span><span class="title"><i>
    An algorithm for least squares estimation of nonlinear parameters
   </i>. </span><span class="publisher">SIAM Journal </span><span class="volumenum">11. </span><span class="pagenums">431 - 441. </span><span class="pubdate">1963. </span></p></div><div class="biblioentry"><a id="Matsumoto98"/><p>[Matsumoto98] <span class="authorgroup"><span class="firstname">M.</span> <span class="surname">Matsumoto</span> and <span class="firstname">T.</span> <span class="surname">Nishimura</span>. </span><span class="title"><i>
    Mersenne twister: A 623-dimensionally equidistributed uniform
     pseudorandom number generator
   </i>. </span><span class="publisher">ACM Trans. on Modeling and Computer Simulations </span><span class="volumenum">8. </span><span class="pagenums">3 - 30. </span><span class="pubdate">1998. </span></p></div><div class="biblioentry"><a id="Michalewicz94"/><p>[Michalewicz94] <span class="author"><span class="firstname">Z.</span> <span class="surname">Michalewicz</span>. </span><span class="title"><i>
   Genetic algorithms + data structures = evolution programs
   </i>. </span><span class="edition">3rd Edition. </span><span class="publisher">Springer-Verlag, Berlin. </span><span class="pubdate">1994. </span></p></div><div class="biblioentry"><a id="Mitchell95"/><p>[Mitchell95] <span class="author"><span class="firstname">M.</span> <span class="surname">Mitchell</span>. </span><span class="title"><i>
    An Introduction to Genetic Algorithms
   </i>. </span><span class="publisher">MIT Press, Boston. </span><span class="pubdate">1995. </span></p></div><div class="biblioentry"><a id="Petzold83"/><p>[Petzold83] <span class="author"><span class="firstname">L.</span> <span class="surname">Petzold</span>. </span><span class="title"><i>
    Automatic selection of methods for solving stiff and nonstiff
     systems of ordinary differential equations. 
   </i>. </span><span class="publisher">SIAM J. Sci. Stat. Comput. </span><span class="volumenum">4. </span><span class="pagenums">136 - 148. </span><span class="pubdate">1983. </span></p></div><div class="biblioentry"><a id="Reder88"/><p>[Reder88] <span class="author"><span class="firstname">C.</span> <span class="surname">Reder</span>. </span><span class="title"><i>
      Metabolic control theory: a structural approach
    </i>. </span><span class="publisher">J. Theor. Biol.</span><span class="volumenum">135. </span><span class="pagenums">175 - 201. </span><span class="pubdate">1988. </span></p></div><div class="biblioentry"><a id="Runarsson00"/><p>[Runarsson00] <span class="authorgroup"><span class="firstname">T.</span> <span class="surname">Runarsson</span> and <span class="firstname">X.</span> <span class="surname">Yao</span>. </span><span class="title"><i>
   Stochastic ranking for constrained evolutionary optimization
   </i>. </span><span class="publisher">EEE Transactions on Evolutionary Computation </span><span class="volumenum">4. </span><span class="pagenums">284 - 294. </span><span class="pubdate">2000. </span></p></div><div class="biblioentry"><a id="Swann72"/><p>[Swann72] <span class="author"><span class="firstname">W.H.</span> <span class="surname">Swann</span>. </span><span class="title"><i>Direct search methods</i>. </span><span class="publisher">
   Numerical methods for unconstrained optimization., W. Murray, ed.
   (London &amp; New York: Academic Press)
   </span><span class="pagenums">13 - 28. </span><span class="pubdate">1972. </span></p></div><div class="biblioentry"><a id="Vallabhajosyula06"/><p>[Vallabhajosyula06] <span class="authorgroup"><span class="firstname">R. R.</span> <span class="surname">Vallabhajosyula</span>, <span class="firstname">V.</span> <span class="surname">Chickarmane</span>, and <span class="firstname">H. M.</span> <span class="surname">Sauro</span>. </span><span class="title"><i>
      Conservation analysis of large biochemical networks
    </i>. </span><span class="publisher">
      Bioinformatics
    </span><span class="volumenum">22(3). </span><span class="pagenums">346 - 353. </span><span class="pubdate">2006. </span></p></div><div class="biblioentry"><a id="Westerhoff84"/><p>[Westerhoff84] <span class="authorgroup"><span class="firstname">H.V.</span> <span class="surname">Westerhoff</span> and <span class="firstname">Y.-D.</span> <span class="surname">Chen</span>. </span><span class="title"><i>How do enzyme activities control metabolite concentrations? An additional theorem in the theory of metabolic control</i>. </span><span class="publisher">Eur. J. Biochem. </span><span class="volumenum">142. </span><span class="pagenums">425 - 430. </span><span class="pubdate">1984. </span></p></div><div class="biblioentry"><a id="Wolf85"/><p>[Wolf85] <span class="authorgroup"><span class="firstname">A.</span> <span class="surname">Wolf</span>, <span class="firstname">J. B.</span> <span class="surname">Swift</span>, <span class="firstname">H.</span> <span class="surname">Swinney</span>, and <span class="firstname">J. A.</span> <span class="surname">Vastano</span>. </span><span class="title"><i>
      Determining Lyapunov exponents from a time series
    </i>. </span><span class="publisher">
      Physika
    </span><span class="volumenum">16D. </span><span class="pagenums">285 - 317. </span><span class="pubdate">1985. </span></p></div></div></div></div></body></html>