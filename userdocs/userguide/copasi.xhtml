<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html
  PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"><head><title/><meta name="generator" content="DocBook XSL Stylesheets V1.69.1"/></head><body><div class="book" lang="en"><div class="titlepage"><hr/></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="chapter"><a href="#graphicalUserInterface">1. Graphical User Interface</a></span></dt><dd><dl><dt><span class="sect1"><a href="#introduction">Introduction</a></span></dt><dt><span class="sect1"><a href="#commandLineSwitches">Commandline Version and Commandline Options</a></span></dt><dt><span class="sect1"><a href="#generalGUILayout">Copasi GUI Elements</a></span></dt><dt><span class="sect1"><a href="#generalSettings">General Model Settings</a></span></dt><dt><span class="sect1"><a href="#addingCompartments">Adding and Editing Compartments</a></span></dt><dt><span class="sect1"><a href="#addingSpecies">Adding and Editing Species</a></span></dt><dt><span class="sect1"><a href="#addingReactions">Adding and Editing Reactions</a></span></dt><dt><span class="sect1"><a href="#parameterView">Parameter View</a></span></dt><dt><span class="sect1"><a href="#outputDefinitions">Defining Output</a></span></dt><dd><dl><dt><span class="sect2"><a href="#reportDefinitions">Defining Reports</a></span></dt><dt><span class="sect2"><a href="#plotDefinitions">Defining Plots</a></span></dt></dl></dd><dt><span class="sect1"><a href="#addingFunctions">Adding and Editing User Defined Functions</a></span></dt><dt><span class="sect1"><a href="#steadyStateAnalysis">Doing a Steady State Analysis</a></span></dt><dt><span class="sect1"><a href="#stoichiometryStateAnalysis">Elementary Modes and Mass Conservation</a></span></dt><dd><dl><dt><span class="sect2"><a href="#elementaryModes">Calculating Elementary Modes</a></span></dt><dt><span class="sect2"><a href="#massConservation">Calculating Mass Conservations</a></span></dt></dl></dd><dt><span class="sect1"><a href="#calculatingTrajectory">Running a Time Course Simulation</a></span></dt><dd><dl><dt><span class="sect2"><a href="#workingWithPlots">Working with Plots</a></span></dt></dl></dd><dt><span class="sect1"><a href="#calculatingMCA">Doing a Metabolic Control Analysis (MCA)</a></span></dt><dt><span class="sect1"><a href="#parameterScan">Doing a Parameter Scan</a></span></dt><dt><span class="sect1"><a href="#optimization">Running an Optimization Task</a></span></dt><dt><span class="sect1"><a href="#usingSliders">Defining and Using Sliders</a></span></dt><dt><span class="sect1"><a href="#tutorialWizard">Using the Tutorial Wizard</a></span></dt><dt><span class="sect1"><a href="#importExport">Importing and Exporting SBML Files</a></span></dt></dl></dd></dl></div><div class="list-of-tables"><p><b>List of Tables</b></p><dl><dt>1.1. <a href="#d0e1274">Standard Operators</a></dt><dt>1.2. <a href="#d0e1318">Misc. Functions</a></dt><dt>1.3. <a href="#d0e1367">Trigonometric Functions</a></dt><dt>1.4. <a href="#d0e1501">Logical Functions</a></dt><dt>1.5. <a href="#d0e1565">Miscellaneous</a></dt><dt>1.6. <a href="#d0e1594">Builtin Constants</a></dt></dl></div><div class="chapter" lang="en"><div class="titlepage"><div><div><h2 class="title"><a id="graphicalUserInterface"/>Chapter 1. Graphical User Interface</h2></div></div></div><div class="toc"><p><b>Table of Contents</b></p><dl><dt><span class="sect1"><a href="#introduction">Introduction</a></span></dt><dt><span class="sect1"><a href="#commandLineSwitches">Commandline Version and Commandline Options</a></span></dt><dt><span class="sect1"><a href="#generalGUILayout">Copasi GUI Elements</a></span></dt><dt><span class="sect1"><a href="#generalSettings">General Model Settings</a></span></dt><dt><span class="sect1"><a href="#addingCompartments">Adding and Editing Compartments</a></span></dt><dt><span class="sect1"><a href="#addingSpecies">Adding and Editing Species</a></span></dt><dt><span class="sect1"><a href="#addingReactions">Adding and Editing Reactions</a></span></dt><dt><span class="sect1"><a href="#parameterView">Parameter View</a></span></dt><dt><span class="sect1"><a href="#outputDefinitions">Defining Output</a></span></dt><dd><dl><dt><span class="sect2"><a href="#reportDefinitions">Defining Reports</a></span></dt><dt><span class="sect2"><a href="#plotDefinitions">Defining Plots</a></span></dt></dl></dd><dt><span class="sect1"><a href="#addingFunctions">Adding and Editing User Defined Functions</a></span></dt><dt><span class="sect1"><a href="#steadyStateAnalysis">Doing a Steady State Analysis</a></span></dt><dt><span class="sect1"><a href="#stoichiometryStateAnalysis">Elementary Modes and Mass Conservation</a></span></dt><dd><dl><dt><span class="sect2"><a href="#elementaryModes">Calculating Elementary Modes</a></span></dt><dt><span class="sect2"><a href="#massConservation">Calculating Mass Conservations</a></span></dt></dl></dd><dt><span class="sect1"><a href="#calculatingTrajectory">Running a Time Course Simulation</a></span></dt><dd><dl><dt><span class="sect2"><a href="#workingWithPlots">Working with Plots</a></span></dt></dl></dd><dt><span class="sect1"><a href="#calculatingMCA">Doing a Metabolic Control Analysis (MCA)</a></span></dt><dt><span class="sect1"><a href="#parameterScan">Doing a Parameter Scan</a></span></dt><dt><span class="sect1"><a href="#optimization">Running an Optimization Task</a></span></dt><dt><span class="sect1"><a href="#usingSliders">Defining and Using Sliders</a></span></dt><dt><span class="sect1"><a href="#tutorialWizard">Using the Tutorial Wizard</a></span></dt><dt><span class="sect1"><a href="#importExport">Importing and Exporting SBML Files</a></span></dt></dl></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="introduction"/>Introduction</h2></div></div></div><p>The Copasi graphical user interface has been written using the <a href="http://www.trolltech.com" target="_top">Qt toolkit</a>. This allows us to release Copasi on all platforms that Qt supports.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Platforms_01.png" align="middle" alt="Screenshot of Copasi on Mac OS X, Linux and Windows"/><div class="caption"><p>Copasi running on Mac, Linux and Windows</p></div></div></div><p>
</p><p>
It also has the advantage that Copasi essentially behaves the same on all platforms supported, while still showing platform specific behavior. E.g. on a Mac OS X computer, the user will have the menu at the top of the screen and the menu entry for the about dialog will appear in the Copasi menu rather then the help menu.</p><p>In the following sections, we will explain how to use the graphical user interface of Copasi. Everything should be applicable to all supported platforms. If there is a difference for some platforms we will try to point that out explicitly.    
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="commandLineSwitches"/>Commandline Version and Commandline Options</h2></div></div></div><p>
Copasi comes in two versions. One with a (hopefully) nice GUI for interactive work and one without a GUI for batch processing of model files. Both versions support the same set of commandline arguments, although some do not make sense for the GUI version and will be ignored.
</p><p>
In addition to the commandline options, you can specify one or more Copasi (or Gepasi) files after the commandline options which will then be processed.
Specifying more then one file again only makes sense for the commandline version of Copasi. For each of the files, the activated tasks will be run. The commandline options for importing and exporting SBML as well as the --save option are ignored if more then one file is specified.
Since the GUI version of Copasi can only handle one file at a time, it only makes sense to specify one file after the commandline options.
</p><div class="variablelist"><p class="title"><b>Commandline options</b></p><dl><dt><span class="term">--help</span></dt><dd><p>
Shows the usage of the program and the allowed commandline options. 
</p></dd><dt><span class="term">--home</span></dt><dd><p>
This can be used to tell Copasi where your home directory is located. Normally you don't have to use this. 
</p></dd><dt><span class="term">--rc</span></dt><dd><p>
This can be used to specify the location of the configuration file for Copasi. Normally this is called .copasirc and is located in the users home directory. But if you want Copasi to use a different one, you can specify it with this switch.   
</p></dd><dt><span class="term">-c, </span><span class="term">--copasidir</span></dt><dd><p>This specifies the directory where Copasi  has been installed. It is needed to find e.g. help files. On Windows and Mac OS X this is set automatically. On Linux it has to be specified if you want to use certain features. The GUI version of Copasi will issue a warning on startup if this has not been set. The commandline version does not need this directory to be specified and therefore ignores this option.</p></dd><dt><span class="term">-e, </span><span class="term">--exportSBML</span></dt><dd><p>With this option you can specify a name for the SBML file Copasi should export. This is useful if you want to export some Copasi files to SBML in a batch job. This only makes sense for the commandline version and it will be ignored by the GUI version.</p></dd><dt><span class="term">-i, </span><span class="term">--importSBML</span></dt><dd><p>This options lets you specify an SBML file that Copasi shall import.</p></dd><dt><span class="term">-s, </span><span class="term">--save</span></dt><dd><p>This option is used to specify the name file where Copasi should store a model. This is useful if you intend to convert some SBML files to Copasi files in a batch job. This also makes sense only for the commandline version and will be ignored by the GUI version.</p></dd><dt><span class="term">-t, </span><span class="term">--tmp</span></dt><dd><p>
This option can be used to specify a temporary directory where Copasi will autosave some data periodically. Normally Copasi uses the systems temporary directory (e.g. /tmp/ under Linux).
</p></dd></dl></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="generalGUILayout"/>Copasi GUI Elements</h2></div></div></div><p>
    The Copasi graphical user interface essentially consists of four elements.</p><p>  
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Layout_01.png" align="middle" alt="Copasi GUI elements."/><div class="caption"><p>Elements of the Copasi user interface</p></div></div></div><p>
</p><p>
On the top of the main window, you have the menubar (on the Mac, the menubar is on the top of the screen), below that, you have a toolbar with some common tasks like opening a file or saving a file. The rest of the window is vertically divided into two parts by a slider. The size of the two elements can be adjusted by moving the bar that separates them. The left element is called the object tree and it shows your current model and the tasks that you can perform on this model. Depending on the element that is selected in the object tree, the view on the right will change in order to enable you to edit the model or run and modify the task you selected in the object tree.</p><p>If you start Copasi without any command line argument, Copasi will start with a new model. The root of the object tree will be selected and on the right side of the main window, you will see the Copasi logo.</p><p>The object tree has four branches below the root element. The first one contains all objects that belong to the current model. The second one contains all tasks that Copasi can execute, the third one contains the different output objects Copasi can handle and the last branch contains all the (kinetic) functions that are defined. These include the build in functions as well as functions defined by the user.</p><p>If you now click on the <span class="guibutton">Model</span> branch, the view to the right of the object tree will change and you will see a screen that allows you to make <a href="#generalSettings">model settings</a>. In the following sections, we will describe the individual dialogs that you can open by selecting different branches in the object tree. During this explanation, you will learn how to create a model in Copasi and run different tasks on this model like calculating a trajectory.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="generalSettings"/>General Model Settings</h2></div></div></div><p>
    If you click on the <span class="guibutton">Model</span> branch of the object tree which was explained in the <a href="#generalGUILayout">Copasi GUI Elements</a> section, you activate the dialog that lets you specify certain parameters for your model like its name and the units that are to be used for time, volume and concentration quantities throughout the current model. Here you can also give a textual description of you model that is more expressive then reactions and equations. You could for example state which part of the metabolism the model describes (e.g. glycolysis) and add some references to articles related to the model. This will help others (and yourself) to understand and identify your models.
</p><p>   
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/General_01.png" align="middle" alt="Dialog for general model settings"/><div class="caption"><p>Dialog for general model settings</p></div></div></div><p>
</p><p>
</p><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Caution</h3><p>You should be aware that changing the defaults units actually changes the model. If you for example change the default volume units from liters to milliliters, all the particle numbers in your model change by a factor of 1000.</p></div><p>
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="addingCompartments"/>Adding and Editing Compartments</h2></div></div></div><p>
    In Copasi, most of the time there are several ways to do something and you just choose the way you prefer. This is especially true for defining the elements of the model.</p><p>Actually if you are just defining a model that has a single compartment, you will most likely not even bother to add the compartment explicitly, but I will come back to this in the <a href="#addingSpecies">Adding and Editing Species</a> and <a href="#addingReactions">Adding and Editing Reactions</a> sections.</p><p>Although you will probably not add compartments to often, it is good to know how it is done, especially since adding other components of the model, e.g. species or reactions, works essentially the same.</p><p>There are three methods to add a new compartment to a model, but for all three, we have to navigate to the <span class="guibutton">Compartments</span> branch of the object tree which is located under the <span class="guibutton">Model-&gt;Biochemical</span> branch. So first open the <span class="guibutton">Model</span> branch and there open the <span class="guibutton">Biochemical</span> branch by clicking on the expansion sign in front of the branch name, or by double clicking on the branch name. </p><p>  
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Compartments_01.png" align="middle" alt="compartment table without entries"/><div class="caption"><p>empty compartment table</p></div></div></div><p>
</p><p>
If you start with a new model and you select the <span class="guibutton">Compartments</span> branch, you will get an empty table with three columns. The columns are named <span class="guilabel">Status</span>, <span class="guilabel">Name</span> and <span class="guilabel">Volume</span>. <span class="guilabel">Name</span> is the actual name of the compartment and <span class="guilabel">Volume</span> is its volume given in the volume units defined in the <a href="#generalSettings">model settings</a> dialog. The meaning of the <span class="guilabel">Status</span> column will be explained shortly.</p><p>The most obvious way to add a new compartment is to click the <span class="guibutton">New</span> button on the bottom of the window. This will create a new compartment that is added to the table with a status of <span class="emphasis"><em>new</em></span>.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Compartments_02.png" align="middle" alt="compartment table with newly added compartment"/><div class="caption"><p>compartment table with new compartment</p></div></div></div><p>
</p><p>
A status of new means that the compartment has been created, but is has not been added to the model yet. It will get added to the model if you either click on the <span class="guibutton">commit</span> button on the bottom of the screen, if you selected another element in the object tree on the left, or if you double click on the table. Lets assume you clicked on the <span class="guibutton">commit</span> button, you will notice that the status of the new compartment is no longer defined as new since it has been added to the model.</p><p>While the status of a compartment is shown as <span class="emphasis"><em>new</em></span>, you can remove the compartment from the table by clicking the <span class="guibutton">revert</span> button which will cancel all modifications you made to the compartments that have not been committed yet.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Compartments_03.png" align="middle" alt="compartment table with deleted compartment entry"/><div class="caption"><p>compartment table with deleted compartment</p></div></div></div><p>
</p><p>
If you have already committed the compartment, you can delete it by selecting the table row (or one cell of the table row) that contains the compartment you want to delete and clicking the <span class="guibutton">delete</span> button. You will notice that the compartment does not get deleted at once, but rather the status changes to <span class="emphasis"><em>deleted</em></span>. You can still undo the delete by clicking the <span class="guibutton">revert</span> button or the <span class="guibutton">delete/undelete</span> button, or you can finalize the delete action by clicking on the <span class="guibutton">commit</span> button. Again leaving this dialog by selecting another object in the object tree or double clicking on the table has the same effect as clicking on the <span class="guibutton">commit</span> button.</p><p>The <span class="guibutton">clear</span> button is just a convenience function to delete all compartments. If you click on it, the status of all compartments in the table will be changed to <span class="emphasis"><em>deleted</em></span> and a subsequent <span class="guibutton">commit</span> will remove the compartments from the model.</p><p>The most convenient way to add a compartment is to just click on an empty name cell in the table and type the name of the compartment. Once you leave the cell by either hitting the return or the tab key or by clicking somewhere else, the compartment appears in the table with a status of <span class="emphasis"><em>new</em></span>. Actually hitting the return key after typing the name brings you directly into the next row and you can continue adding compartments until all compartments are defined. You now only have to commit your changes in one of the ways mentioned above and all the compartments get added to the model.</p><p>The third way to add a new compartment is to double click on an empty row in the table. This is essentially the same as clicking the <span class="guibutton">new</span> button and double clicking on the newly added compartment entry.</p><p>    
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Compartments_04.png" align="middle" alt="dialog for changing compartment parameters"/><div class="caption"><p>compartment definition dialog</p></div></div></div><p>
</p><p>
Double clicking on any compartment entry in the table will bring you to another input dialog that lets you specify the parameters of the compartment. For a compartment, there are only two parameters that the user can change. One is the name of the compartment and the other is the volume.</p><p>If there are already species defined that are part of the compartment being edited, they are listed in the text widget at the bottom of the dialog called "Metabolite Name".</p><p>As you might already have noticed, this dialog for changing compartment parameters is associated with the individual compartment leaves in the object tree. So if you want to change the parameters of a compartment, you can also navigate to the leave in the object tree that represents the compartment you want to change instead of double clicking on an entry in the compartment table.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="addingSpecies"/>Adding and Editing Species</h2></div></div></div><p>
    Adding new species works exactly the same as adding new compartment, so I suggest reading the <a href="#addingCompartments">Adding and Editing Compartments</a> section if you haven't already done so. Here we will just cover the differences between adding a compartment and adding a species.</p><p>    
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Metabolites_01.png" align="middle" alt="empty metabolites table"/><div class="caption"><p>metabolites table without entries</p></div></div></div><p>
</p><p>
First of all in order to add a new species or metabolite, as it is called in Copasi, you have to navigate to the <span class="guibutton">Metabolites</span> branch of the object tree which is located in the <span class="guibutton">Model-&gt;Biochemical</span> branch directly below the <span class="guibutton">Compartments</span> branch. Here again you see a table, but this table consists of eight columns. This is due to the fact that a metabolite has more parameters than a compartment. The <span class="guilabel">Status</span> and <span class="guilabel">Name</span> columns should already be familiar from the compartments table. The other six columns specify the initial concentration of the metabolite, the transient concentration and if the metabolite is fixed (i.e. its concentration does not change during the course of a simulation). The second <span class="guilabel">Status</span> column might be a little confusing, but it indicates whether the metabolite is an independent or a dependent metabolite as opposed to the first <span class="guilabel">Status</span> column that indicates whether a metabolite has been added to the model yet or is about to be deleted from the model as described in the <a href="#addingCompartments">Adding and Editing Compartments</a> section. The column named <span class="guilabel">Compartment</span> shows the name of the compartment the metabolite belongs to and the <span class="guilabel">Rate</span> column shows the reaction rate of the metabolite. For newly created metabolites the rate will be empty since it needs to be calculated first, e.g. during a <a href="#calculatingTrajectory" title="Running a Time Course Simulation">time course simulation</a>.</p><p>When a metabolite is added and the model does not contain a compartment yet, Copasi will automatically add a new compartment to the model and the metabolite will be added to this compartment. If there already is one or more compartments, the metabolite will be added to the first compartment in the list. This can be changed later.</p><p>To add a new metabolite you have the same three ways as for adding compartments and if you are not familiar with those, I recommend reading the <a href="#addingCompartments">Adding and Editing Compartments</a> section.</p><p>    
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Metabolites_02.png" align="middle" alt="dialog for changing metabolite parameters"/><div class="caption"><p>metabolite definition dialog</p></div></div></div><p>
</p><p>
    Editing the parameters of a metabolite also works exactly the way it does for compartments. Either you double click on a metabolite entry in the table, or you use the object tree to navigate to the metabolite leaf you intend to edit. Some of the parameters of a metabolite like the <span class="guilabel">Model Status</span> are calculated automatically and can not be changed by the user. The parameters that you can change are the <span class="guilabel">Name</span> of the metabolite, the <span class="guilabel">Compartment</span> it belongs to, whether it is a fixed metabolite and its <span class="guilabel">initial concentration</span>. Instead of changing the <span class="guilabel">initial concentration</span>, you can also change the <span class="guilabel">initial particle number</span>. If you change one of those two, the other will be updated automatically. The volume to calculate particle numbers from concentration and vice versa comes from the compartment associated with the metabolite.
The list at the bottom of the metabolite widget shows the reactions in which this metabolite participates.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="addingReactions"/>Adding and Editing Reactions</h2></div></div></div><p>
    Again adding reactions essentially works the same way as adding compartments or metabolites. When you navigate to the <span class="guibutton">Reactions</span> branch of the object tree which is located under the <span class="guibutton">Model-&gt;Biochemical</span> branch, you will see a table with five columns. The first two are again <span class="guilabel">Status</span> and <span class="guilabel">Name</span> of the reaction. The third column called <span class="guilabel">Equation</span> describes the chemical formula and maybe additional modifiers of the reaction. The fourth column states the name of the kinetics for the reaction which depends on the equation. We will come to this in a second. The last column shows the <span class="guilabel">flux</span> through this reaction. The flux can not be set by  the user but is calculated automatically when you <a href="#calculatingTrajectory" title="Running a Time Course Simulation">do a time course simulation</a>.
   </p><p>    
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Reactions_01.png" align="middle" alt="reaction table without entries"/><div class="caption"><p>empty reaction table</p></div></div></div><p>
</p><p>
    The easiest way to add a reaction is to type the chemical equation into an empty equation cell in the table. After you typed the equation, you hit the return key and automatically land in the next row where you can type the next reaction equation. This way you can enter all the reactions that make up your model. When you are finished with typing the reaction equations, you commit all the reactions. If any of the reactions contain metabolites that are not already present in the model, they are added automatically. If there was no compartment before, a compartment is also added and all new metabolites get added to this compartment. If there is already one or more compartment, all new metabolites get added to the first compartment that is listed in the object tree.
</p><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Caution</h3><p>
When typing reaction equations you should keep in mind that metabolite names in Copasi can contain characters like "+" or even whitespaces. Since these characters would make it very hard if not impossible to parse the chemical reaction equation, you have to place those metabolite names in double quotes. E.g. "Metabolite 1" + "Metabolite 2" -&gt; "Metabolite 3"
</p></div><p>
    Each new reaction gets a default kinetic which is irreversible mass action for reactions that contain a substrate. For reaction that only have a product (e.g. influx into a system) a constant flux kinetic is chosen.</p><p>    
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Reactions_02.png" align="middle" alt="dialog for changing reaction parameters"/><div class="caption"><p>reaction definition dialog</p></div></div></div><p>
</p><p>
    Double clicking on an entry in the table will bring you to another dialog that lets you change certain parameters of the reaction. You can change the name of the reaction, the chemical equation and whether the reaction is reversible or not. Changing the chemical equation and the reversibility of a reaction influences the type of kinetics you can choose for the reaction. Each kinetic function defines how many substrates, products and modifiers it expects. Additionally it defines whether it can be used for reversible or irreversible reactions only or if it can be used on either. So depending on how many substrates, products and modifiers your kinetic equation has and whether it is reversible or not, only a subset of the defined kinetic functions will be available in the <span class="guilabel">Kinetics</span> combobox.
    If the kinetic function you want to assign to the reaction is not available yet, you can add it by clicking on the <span class="guibutton">New Kinetics</span> button (see also <a href="#addingFunctions">Adding and Editing User Defined Functions</a>). 
    Depending on the kinetic function you chose, you get a selection of parameters in the table named <span class="guilabel">Symbol Definition</span>, all functions parameters get a default value of 0.1 which can be changed by clicking into the corresponding cell and typing a new value.</p><p>So far we did not go into the details of how chemical equations are to be specified. Chemical equations have a simple schema. First you state all the substrates separated by  "+" characters. Please make sure that you separate the name of the substrate and the "+" character by at least one space character, otherwise Copasi will interpret the "+" sign as belonging to the metabolites name. (Having the "+" character as part of a metabolites name is allowed in Copasi!) after the list of substrates, you specify either an equals ("=") character if the reaction is reversible or the character combination "-&gt;" if the reaction is irreversible. This is followed by the list of products which must also be separated by the "+" character. Again make sure you have spaces around the separating "+" characters. Optionally this term can be followed by a semicolon and a list of modifiers which are comma separated. Either the list of substrates or the list of products may also be empty, but at least one of them must be present. Lets look at two examples:
</p><div class="orderedlist"><ol type="a"><li><p>Metabolite A is irreversibly converted into Metabolite B. The chemical equation you would type is "A -&gt; B".</p></li><li><p>Metabolite A and B are reversibly converted to Metabolite C, the reaction has to modifiers C and D. The chemical equation for this in Copasi would be: "A + B = C; C,D"</p><p>Note that one of the modifiers is the product!</p></li></ol></div><p>   
</p><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Caution</h3><p>If the reaction takes place in one compartment, the reaction kinetic specifies a rate of concentration change, whereas if the reaction takes place in several compartments, the kinetic specifies the amount of substance change over time.</p><p>E.g. in the reaction A -&gt; B, if A and B are in the same compartment, the kinetic function for the reaction returns its result in Mol/(l*s). If A and B reside in different compartments, the result is returned in Mol/s. (This assumes that your default units are set to Mol, l and s.)</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="parameterView"/>Parameter View</h2></div></div></div><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Parameters_01.png" align="middle" alt="Parameter View"/><div class="caption"><p>Parameter View</p></div></div></div><p>
</p><p>
    The parameter view widget can be displayed by selecting the leaf called <span class="guilabel">Parameters</span> on the Model branch which is located right underneath the <span class="guilabel">Reactions</span> leaf. This widget allows you to view and edit all parameters of the model in one place. This saves you from moving around the model tree if you e.g. first have to edit the initial concentrations for some metabolites and afterward parameters of one or more reactions.
    The view shows you the initial concentrations for the metabolites at the top followed by the kinetic parameters of all reactions and at the bottom the volumes of all the compartments.
    In order to change some value, you double click on which lets you input a new value. On hitting the return key or clicking somewhere else, the new value is not written to the object directly, but a '*' character appears in front of the name of the changed parameter. If you now leave this widget or press the commit button at the bottom of the dialog, the new value is written to the corresponding object in the model.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="outputDefinitions"/>Defining Output</h2></div></div></div><p>After you have <a href="#addingReactions" title="Adding and Editing Reactions">defined all reactions</a> that make up your model, you could go ahead and do some calculations with your model. For some of the task this is fine since they show you the results in a separate results dialog and it might not be necessary to store those into a file. For other tasks, like e.g. a time course, it is very likely that you would like to store the resulting trajectory in some file or plot the result for visual inspection. So if you want Copasi to store the results or do a plot of them, you have to define either a report and associate it with a file or define a plot. (In the <a href="#calculatingTrajectory">Running a Time Course Simulation</a> section we will also offer an alternative, albeit less flexible, way for storing the results of a time course simulation.)
</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="reportDefinitions"/>Defining Reports</h3></div></div></div><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Reports_01.png" align="middle" alt="report table without entries"/><div class="caption"><p>empty report table</p></div></div></div><p>
</p><p>
The dialog for defining report definitions is located under the <span class="guibutton">Output-&gt;Reports</span> branch in the object tree. Double clicking on an empty row in the table creates a new report object and opens the dialog for modifying the report definition. In this dialog, you can specify a name for the report in the <span class="guilabel">Name</span> field. In the <span class="guilabel">task</span> combobox, you can choose for which kind of task this report should be written, so if you want to store the result of a time course, you choose <span class="emphasis"><em>Time-Course</em></span> here. The report usually stores the results of its task as a table; the standard separator character for elements in this table is the tab character (\t). If you want to change this, you have to uncheck the Tab checkbox and specify the separator character or string you want in the <span class="guilabel">Separator</span> field.
If you want to, you can also add a comment for the report, e.g. you might want to state in words what the report is supposed to write so you and others don't have to guess from the item list (see below).  
Next you have to define the objects that you want to appear in the report. There are two modes to define a report definition. In the standard mode, the report definition is laid out as a table. E.g. the report for a time course simulation will write one line per timestep and each line will typically contain the time followed by one or more metabolite concentrations. In the advanced mode, which you enter by clicking on the button labeled <span class="guibutton">Advanced</span>, the report is split up into three sections, a header, a body and a footer. You can define the output for each of the section separately by clicking on the corresponding tab. In order to get back to the standard table layout, you have to click on the <span class="guibutton">Advanced</span> again. Copasi will warn you that you might loose some information by converting from the advanced report definition format to the table format.
Let's discuss how to define a report definition with table layout first since this will probably the more common case.
To add a new object to the report definition, you have to click on the button labeled <span class="guibutton">item</span>. This will open the object browser dialog.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Reports_02.png" align="middle" alt="object browser dialog with no selection"/><div class="caption"><p>object browser dialog without selection</p></div></div></div><p>
</p><p>
The object browser dialog shows a tree of all the objects that are known to Copasi. The objects that belong to your model are located in the branch that corresponds to the name of your model. The position of that branch varies since the branches are sorted alphabetically. Each branch and leaf in the object browser has a check box in front of its name. This checkbox can have three states. The unchecked state means that no object in this subtree are selected. A checkmark on a black background means that the whole subtree is selected, i.e. all objects in this subtree are selected. A checkmark on a gray background means that part of the subtree is selected.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Reports_03.png" align="middle" alt="object browser dialog with some selection"/><div class="caption"><p>object browser dialog with selection</p></div></div></div><p>
</p><p>
Due to the model structure, most objects appear more than once in the tree. So if you select some object, you should not be surprised, if more than the selected object suddenly change their selection state. E.g. if you select the whole <span class="guibutton">Compartments</span> subtree of your model, all the metabolites which are part of the compartments get selected as well which means that on selecting the <span class="guibutton">Compartments</span> branch, the whole <span class="guibutton">Metabolites</span> branch changes its state to selected.</p><p>
Let's assume you want to define the report for a trajectory task. In this case, you will probably want the time and some or all of the transient concentration of the metabolites in your report. The time for the time course is the last item in the model branch, you select it by clicking on the check box in front of the name. If you want to add the concentrations of all metabolites, you open the <span class="guibutton">Metabolites</span> sub-branch in the <span class="guibutton">Model</span> branch and open the <span class="guibutton">Select by attribute</span> branch. There you can select the <span class="guibutton">Concentration</span> attribute. Selecting the <span class="guibutton">Concentration</span> attribute will select the concentrations for all metabolites. If you only want to have some of the metabolites in your report, you open the sub-branches of the metabolites you want in the <span class="guibutton">Metabolites</span> branch and select the <span class="guibutton">Concentration</span> attribute only for those metabolites. If your model contains many metabolites and you want to have all but one or in your report, it is often easier to first select all concentrations via the <span class="guibutton">Select by attribute</span> branch and then deselect the ones you don't want, rather then selecting the individual concentration you want. Once you are finished with selecting the objects for your report, you confirm the selection by clicking the <span class="guibutton">OK</span> button in the object browser. The objects you selected will now appear in the listbox of the report definition dialog. </p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Reports_04.png" align="middle" alt="report definition dialog"/><div class="caption"><p>report definition dialog</p></div></div></div><p>
They will appear in the report in the same order as they appear in this list. To reorder the entries in the list, you can select individual entries and move them up and down in the list with the according buttons to the left of the list. For example it might be a good idea to move the time object to the top of the list so that it will appear as the first table column in the file since this is the way most programs would expect it. Also in order to delete unnecessary items, you just select them and click on the <span class="guibutton">Delete</span> button. 
The only thing that is now left is to connect this report to a file. This has to be done in the dialog for the specific task and we will cover this when we explain how to run the individual tasks.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Reports_05.png" align="middle" alt="advanced report definition dialog"/><div class="caption"><p>advanced report definition</p></div></div></div><p>
As stated above, the advanced report definition allows you to define the output for the three parts of the report separately. The header part of the report is written once before the corresponding task, the output of the body elements occurs once per step of the corresponding task, e.g. for the time course once every timestep and the footer is written once after the task has finished. In this sense, the standard table report definition is nothing but an advanced report definition with a title header and a body that consists of the time and some metabolite concentrations separated by separator items. The footer is empty.
If you write your own advanced report definition, you are responsible to add separator tags where appropriate. An advantage to the standard report definition is that you can add arbitrary text to any of the three sections. Everything else works as described for the standard report definition, you can add and delete items by selecting them from the object browser dialog. And just like in the standard report definition, you can move these items up and down by selecting them and clicking on the <span class="guibutton">up</span> or <span class="guibutton">down</span> button. Separator items can be added by clicking on the <span class="guibutton">Separator</span> button. The symbol or text that makes up the separator item is again defined by the checkbox and the adjacent input field towards the top of the report definition dialog.  
</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="plotDefinitions"/>Defining Plots</h3></div></div></div><p>Plotting is another form of output that Copasi can do. Most of the time, you probably want to plot some or all of the metabolites concentrations during a time course simulation. </p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Plots_01.png" align="middle" alt="plot table with no entries"/><div class="caption"><p>empty plot table</p></div></div></div><p>
</p><p>
To define a plot, you open the plot definition dialog which you reach by selecting the <span class="guibutton">Output-&gt;Plots</span> branch in the object tree. If you intend to plot all or most of the metabolites concentrations against the time, the easiest way to define this plot is to click on the <span class="guibutton">Add default plot</span> button on the bottom of the dialog. This creates a plot with all concentrations against the time. If this is OK, you are done. If you want to remove some of the concentrations, you edit the plot by double clicking on the plot entry in the table, or by selecting the new plot definition in the object tree. A plot in Copasi is made up of a number of curve objects. For each curve, there is a tab in the plot definition dialog. To remove one of the curves, you have to select the tab that corresponds to the curve you want to remove and then click on the <span class="guibutton">Delete Curve</span> button. The next time you do a <a href="#calculatingTrajectory" title="Running a Time Course Simulation">time course simulation</a>, each plot that is marked as active will be plotted automatically. How you define a plot as being active will be explained in the next paragraph.
If you want to plot something other then the concentrations of the metabolites, e.g. the particle numbers against the time, you have to define your own plot. To do this, double click on an empty row in the plot table. (You get to the plot table by selecting the <span class="guibutton">Output-&gt;Plots</span> branch in the object browser.) </p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Plots_02.png" align="middle" alt="simple selection dialog for curves"/><div class="caption"><p>simple curve object selection dialog</p></div></div></div><p>
</p><p>
This opens a plot definition dialog that contains no curves. If you want to add a curve, you click on the <span class="guibutton">New Curve</span> button. A selection dialog opens that lets you choose an object for the x axis and one or more objects for the y axis. The tree on the left is a single selection tree which lets you choose the object that defines the x axis of the plot. Most often this will be the time. So if you want the time to be drawn on the x axis, select the time leave in the <span class="guibutton">Time</span> branch. The right tree is a multi selection tree where you can choose one or more elements to be drawn on the y axis. There you could e.g. choose all transient particle numbers.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Plots_03.png" align="middle" alt="selection dialog with some items selected"/><div class="caption"><p>simple selection dialog with selected items</p></div></div></div><p>
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Plots_04.png" align="middle" alt="selection dialog after clicking the add button"/><div class="caption"><p>selection dialog with entries in selection list</p></div></div></div><p>
</p><p>
In order to select objects in the multi selection tree, you select them in the tree and push the add button on the right of the selection dialog. The selected objects will show up in the listbox beside the tree. If you want to select more objects, select them in the tree and push the <span class="guibutton">Add</span> button again. You can do this as often as you like, but each object can only be selected once. All objects that are already marked as selected, i.e. that appear in the listbox, are disabled in the tree and can not be added a second time. On the other hand, if you want to remove some of the objects that you have selected, select them in the list and push the <span class="guibutton">Delete</span> button. You can also reorder the items in the list with the <span class="guibutton">Move Up</span> and <span class="guibutton">Move Down</span> buttons. (This is not needed for plots!) The trees in this dialog only have a limited set of the total objects that you e.g. see in the <a href="#reportDefinitions" title="Defining Reports">object browser</a>. If the object you want to plot is not in this simplified tree, you can check the <span class="guilabel">Expert Mode</span> checkbox on the bottom of the dialog. This will give you two full <a href="#reportDefinitions" title="Defining Reports">object browser</a> trees from which you can select objects.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Plots_05.png" align="middle" alt="expert selection dialog for curve objects"/><div class="caption"><p>selection dialog in expert mode</p></div></div></div><p>
</p><p>
 Once you are finished with your selection, you confirm your selection with the <span class="guibutton">OK</span> button.
Copasi now creates a curve object for each object you selected for the y axis and adds it to the plot. Each curve is represented as a tab in the plot definition dialog. Each curve object has a title, and the information what will be drawn on the x- and y-axis. Additionally you can specify whether the curve should be drawn as a line, as points or as symbols. This has to be specified for each curve separately. </p><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Caution</h3><p>On Mac OS X, the tab widget does not handle very wide tabs or many tabs well. This problem will be dealt with in upcoming versions of Copasi.</p></div><p>In the plot definition dialog, in addition to adding and removing curve objects, you can specify a name for the plot definition and you can specify whether the plot should be active or not with the <span class="guilabel">active</span> checkbox. (Only plots that are active are drawn when a <a href="#calculatingTrajectory" title="Running a Time Course Simulation">time course simulation</a> is run!)</p><p>Another way to specify whether a plot is active or not is in the plot table where all the plots are listed. Each row in the table contains a column named <span class="guilabel">active</span> that contains a checkbox with which you can toggle the state of a plot. If you changed the state of one or more plots, you have to commit these changes either by clicking the <span class="guibutton">Commit</span> button or any other action that is equivalent to pressing the <span class="guibutton">Commit</span> button (see <a href="#addingCompartments">Adding and Editing Compartments</a> section).
</p><p>In addition to curves, you can also tell Copasi to draw a histogram of the data generated during a time course simulation (see <a href="#calculatingTrajectory">Running a Time Course Simulation</a>) or a parameter scan (see <a href="#parameterScan">Doing a Parameter Scan</a>). A histogram draws a bar graph that shows how often the parameter took a certain value. To define a histogram instead of a curve you click on the <span class="guibutton">New Histogram...</span> button in the plot definition dialog. For the new histogram you can specify a title, the variable for which the histogram should be drawn and the increment of the value. The increment parameter tells Copasi how wide the individual bars of the histogram are going to be. Let's say the value of the parameter was in the range of 3 to 8 and you set the increment to 0.1, Copasi will draw a histogram with 50 bars, each bar representing a value range of 0.1 units. Curves and histograms can be combined in a single plot.
</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="addingFunctions"/>Adding and Editing User Defined Functions</h2></div></div></div><p>Copasi already defines a rather large set of common kinetic functions to choose from. Nevertheless sometimes you will have to define your own kinetic function to solve a specific problem. The list of defined functions is located as the last branch in the object tree.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Functions_01.png" align="middle" alt="function table with predefined functions"/><div class="caption"><p>function table with many functions</p></div></div></div><p>
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Functions_02.png" align="middle" alt="dialog for the definition of functions"/><div class="caption"><p>function definition dialog</p></div></div></div><p>
</p><p>
You can add a new function either by double clicking on an empty table row or by clicking on the <span class="guibutton">new</span> button on the bottom of the screen.
In the function definition dialog, you give your function a name in the <span class="guilabel">Function Name</span> field. This name has to be unique within the list of defined functions. Next, you have to specify a formula that defines the reaction rate of your kinetic function in the <span class="guilabel">Formula</span> field. The function string only covers the right side of the rate function. So for Michaelis-Menten which is defined as  

  <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
    <mml:mrow>
      <mml:mi>v</mml:mi>
      <mml:mo>=</mml:mo>
      <mml:mrow>
        <mml:mi>V</mml:mi>
        <mml:mo>*</mml:mo>
        <mml:mrow>
          <mml:mo>(</mml:mo>
            <mml:mrow>
             <mml:mi>S</mml:mi>
             <mml:mo>/</mml:mo> 
              <mml:mrow>
                <mml:mo>(</mml:mo>
                  <mml:mrow>
                    <mml:msub>
                      <mml:mi>K</mml:mi>
                      <mml:mi>m</mml:mi>
                    </mml:msub>
                    <mml:mo>+</mml:mo>
                    <mml:mi>S</mml:mi>
                  </mml:mrow>    
                <mml:mo>)</mml:mo>    
              </mml:mrow>
            </mml:mrow>      
          <mml:mo>)</mml:mo>
        </mml:mrow>
      </mml:mrow>
    </mml:mrow>
  </mml:math>

 you would enter 

  <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
    <mml:mrow>
      <mml:mi>V</mml:mi>
      <mml:mo>*</mml:mo>
      <mml:mrow>
        <mml:mo>(</mml:mo>
          <mml:mrow>
            <mml:mi>S</mml:mi>
	    <mml:mo>/</mml:mo>
            <mml:mrow>
              <mml:mo>(</mml:mo>
                <mml:mrow>
                  <mml:msub>
                    <mml:mi>K</mml:mi>
                    <mml:mi>m</mml:mi>
                  </mml:msub>
                  <mml:mo>+</mml:mo>
                  <mml:mi>S</mml:mi>
                </mml:mrow>    
              <mml:mo>)</mml:mo>    
            </mml:mrow>
          </mml:mrow>      
        <mml:mo>)</mml:mo>
      </mml:mrow>
    </mml:mrow>
  </mml:math>

into the <span class="guilabel">Formula</span> field. While you are typing the formula, Copasi already tries to parse the equation and extract the parameters. All parameters Copasi finds are listed in the <span class="guilabel">Parameters</span> table below the <span class="guilabel">Formula</span> field. Per default, all variables found are defined as being <span class="emphasis"><em>Parameters</em></span>. You have to specify which of them really are parameters and which are substrates, products or modifiers. This mapping of variable names to a specific function within the equation also defines the type of reactions this function can be used for. E.g. if you define your function to contain two substrates and a modifier, you can later only use it for functions that really do have two substrates. </p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>The reaction doesn't have to have an explicit modifier since one of the substrates could be a modifier as well!</p></div><p> You can also see this in the <span class="guilabel">Application</span> table below the <span class="guilabel">Parameters</span> table. Let's say you define the function 

  <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
    <mml:mrow>
      <mml:mi>A</mml:mi>
      <mml:mo>*</mml:mo>
      <mml:mi>B</mml:mi>
    </mml:mrow>
  </mml:math>  

 and define <span class="emphasis"><em>A</em></span> and <span class="emphasis"><em>B</em></span> to be substrates, you will see the number 2 in the <span class="guilabel">Min</span> column of the <span class="guilabel">SUBSTRATES</span> row in the <span class="guilabel">Application</span> table. After defining this function, you will be able to use it for all chemical reaction that have at least two substrates. If you would like to limit the maximum number of substrates to lets say four, you would have to set the <span class="guilabel">Max</span> column of the <span class="guilabel">SUBSTRATES</span> row to 4. Last, but not least, you have to define whether this function can be applied to reversible, irreversible or both reaction types by selecting the <span class="guilabel">reversible</span>, <span class="guilabel">irreversible</span> or <span class="guilabel">General</span> radio button respectively. 
You can also call other functions from function definitions. There are four things you have to watch out for when you call a function within another function.
</p><div class="orderedlist"><ol type="1"><li><p>
Recursive function calls are not permitted. That is a function may not call itself, neither directly nor by calling another function that might call the first function again further along the line.
</p></li><li><p>
You have to specify the correct number of arguments to the function called.
</p></li><li><p>
You have to specify the correct argument types to the function call. I.e. if you call "Henry-Michaelis-Menten (irreversible)" from within another function, you have to make sure that the first call argument has a usage of "Substrate" and the other two have the usage "Parameter".
</p></li><li><p>
Which brings me to the last point. The build in function names in Copasi often use characters list "-" or even spaces, so if you want to call one of those functions, you have to quote this function name. So calling "Henry-Michalis-Menten (irreversible)" from another function would look like this:
</p><p>
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
    <mml:mrow>
      <mml:mi>"Henry-Michaelis-Menten (irreversible)"</mml:mi>
      <mml:mo> ⁡ </mml:mo>
      <mml:mo> ( </mml:mo>
      <mml:mi>S</mml:mi>
      <mml:mo> , </mml:mo>
      <mml:mi>Km</mml:mi>
      <mml:mo> , </mml:mo>
      <mml:mi>V</mml:mi>
      <mml:mo> ) </mml:mo>
    </mml:mrow>
  </mml:math>  
</p></li></ol></div><p>
 After you commit the function, you can use it for the definition of reactions.</p><p>

The operators and functions that Copasi knows and therefore can be used to create user defined functions are the following:

</p><div class="table"><a id="d0e1274"/><p class="title"><b>Table 1.1. Standard Operators</b></p><table summary="Standard Operators" border="1"><colgroup><col/><col/></colgroup><thead><tr><th align="left">Operator/Function</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">+</td><td align="left">plus operator</td></tr><tr><td align="left">-</td><td align="left">minus operator</td></tr><tr><td align="left">/</td><td align="left">division operator</td></tr><tr><td align="left">*</td><td align="left">multiplication operator</td></tr><tr><td align="left">%</td><td align="left">modulus operator</td></tr><tr><td align="left">^</td><td align="left">power operator</td></tr></tbody></table></div><p>
</p><p>
</p><div class="table"><a id="d0e1318"/><p class="title"><b>Table 1.2. Misc. Functions</b></p><table summary="Misc. Functions" border="1"><colgroup><col/><col/></colgroup><thead><tr><th align="left">Operator/Function</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">abs / ABS</td><td align="left">absolute value</td></tr><tr><td align="left">floor / FLOOR</td><td align="left">floor value</td></tr><tr><td align="left">ceil / CEIL</td><td align="left">next highest integer</td></tr><tr><td align="left">factorial / FACTORIAL</td><td align="left">factorial function</td></tr><tr><td align="left">log / LOG</td><td align="left">natural logarithm</td></tr><tr><td align="left">log10 / LOG10</td><td align="left">logarithm for base 10</td></tr><tr><td align="left">exp / EXP</td><td align="left">exponent function</td></tr></tbody></table></div><p>
</p><p>
</p><div class="table"><a id="d0e1367"/><p class="title"><b>Table 1.3. Trigonometric Functions</b></p><table summary="Trigonometric Functions" border="1"><colgroup><col/><col/></colgroup><thead><tr><th align="left">Operator/Function</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">sin / SIN</td><td align="left">sine function</td></tr><tr><td align="left">cos / COS</td><td align="left">cosine function</td></tr><tr><td align="left">tan / TAN</td><td align="left">tangent function</td></tr><tr><td align="left">sec / SEC</td><td align="left">secand function</td></tr><tr><td align="left">csc / CSC</td><td align="left">cosecand function</td></tr><tr><td align="left">cot / COT</td><td align="left">cotangent function</td></tr><tr><td align="left">sinh / SINH</td><td align="left">hyperbolic sine function</td></tr><tr><td align="left">cosh / COSH</td><td align="left">hyperbolic cosine function</td></tr><tr><td align="left">tanh / TANH</td><td align="left">hyperbolic tangent function</td></tr><tr><td align="left">sech / SECH</td><td align="left">hyperbolic secand function</td></tr><tr><td align="left">csch / CSCH</td><td align="left">hyperbolic cosecand function</td></tr><tr><td align="left">coth / COTH</td><td align="left">hyperbolic cotangent function</td></tr><tr><td align="left">asin / ASIN</td><td align="left">arcsine function</td></tr><tr><td align="left">acos / ACOS</td><td align="left">arccosine function</td></tr><tr><td align="left">atan / ATAN</td><td align="left">arctangent function</td></tr><tr><td align="left">arcsec / ARCSEC</td><td align="left">arcsecand function</td></tr><tr><td align="left">arccsc / ARCCSC</td><td align="left">arccosecand function</td></tr><tr><td align="left">arccot / ARCCOT</td><td align="left">arccotangent function</td></tr><tr><td align="left">arcsinh / ARCSINH</td><td align="left">hyperbolic arcsine function</td></tr><tr><td align="left">arccosh / ARCCOSH</td><td align="left">hyperbolic arccosine function</td></tr><tr><td align="left">arctanh / ARCTANH</td><td align="left">hyperbolic arctangent function</td></tr><tr><td align="left">arcsech / ARCSECH</td><td align="left">hyperbolic arcsecand function</td></tr><tr><td align="left">arccsch / ARCCSCH</td><td align="left">hyperbolic arccosecand function</td></tr><tr><td align="left">arccoth / ARCCOTH</td><td align="left">hyperbolic arccotangent function</td></tr></tbody></table></div><p>
</p><p>
</p><div class="table"><a id="d0e1501"/><p class="title"><b>Table 1.4. Logical Functions</b></p><table summary="Logical Functions" border="1"><colgroup><col/><col/></colgroup><thead><tr><th align="left">Operator/Function</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">and / AND</td><td align="left">logical and (&amp;)</td></tr><tr><td align="left">or / OR</td><td align="left">logical or (|)</td></tr><tr><td align="left">xor / XOR</td><td align="left">logical xor</td></tr><tr><td align="left">not / NOT</td><td align="left">logical negation</td></tr><tr><td align="left">le / LE</td><td align="left">smaller or equal (&lt;=)</td></tr><tr><td align="left">lt / LT</td><td align="left">smaller (&lt;)</td></tr><tr><td align="left">ge / GE</td><td align="left">greater or equal (&gt;=)</td></tr><tr><td align="left">gt / GT</td><td align="left">greater (&gt;)</td></tr><tr><td align="left">ne / NE</td><td align="left">not equal (!=)</td></tr><tr><td align="left">eq / EQ</td><td align="left">equal (=)</td></tr></tbody></table></div><p>
</p><p>
</p><div class="table"><a id="d0e1565"/><p class="title"><b>Table 1.5. Miscellaneous</b></p><table summary="Miscellaneous" border="1"><colgroup><col/><col/></colgroup><thead><tr><th align="left">Operator/Function</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">if / IF</td><td align="left">if statement for the construction of piecewise defined functions etc.</td></tr><tr><td align="left">()</td><td align="left">parenthesis for grouping of elements</td></tr></tbody></table></div><p>

</p><p>Basic function names can be written with either all lowercase letters or all letters uppercase. Mixing of upper and lowercase letters is not allowed and will lead to errors.
</p><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Caution</h3><p>
Although Copasi allows the usage of discontinuous functions (ceil, floor, factorial, etc) all integration is done by LSODA which officially can not handle discontinuous functions. Nevertheless in most cases this will lead to correct results, however you should be aware of the fact that the usage of discontinuous functions in Copasi can lead to errors. Later versions of Copasi will use different integration methods that will be able to deal with discontinuous functions.  
</p></div><p>
In addition to the function above, Copasi knows some predefined constant names:
</p><div class="table"><a id="d0e1594"/><p class="title"><b>Table 1.6. Builtin Constants</b></p><table summary="Builtin Constants" border="1"><colgroup><col/><col/></colgroup><thead><tr><th align="left">Name</th><th align="left">Description</th></tr></thead><tbody><tr><td align="left">pi / PI</td><td align="left"> quotient of a circles circumference and its diameter ( 3.14159...) </td></tr><tr><td align="left">exponentiale / EXPONENTIALE</td><td align="left"> Euler's number ( 2.7183... ) </td></tr><tr><td align="left">true / TRUE</td><td align="left">boolean true value for conditional expressions</td></tr><tr><td align="left">false / FALSE</td><td align="left"> boolean false value for conditional expressions</td></tr><tr><td align="left">infinity / INFINITY</td><td align="left"> positive infinity </td></tr></tbody></table></div><p>
</p><p>Again, builtin constant names can be written with either all lowercase letters or all letters uppercase. Mixing of upper and lowercase letters is not allowed and will lead to errors.
</p><p>
In addition to defining "normal" functions, Copasi allows the definition of piecewise defined functions. Piecewise defined functions are constructed with the IF statement. The IF statement in Copasi is used like a function with three arguments. The first argument is a conditional expression that evaluates to either TRUE or FALSE, the second argument is an expression that is evaluated if the condition evaluates to TRUE otherwise the third argument, which can also be an expression, determines the value of the function. The second and third argument to the IF statement must evaluate to a double value, that means it can not be a conditional expression like the first argument. On the other hand, the second and third arguments themselves can be IF statements. So in order to make this a little more clear, we will look at how one would implement the Heaviside step function in Copasi:
</p><p>
<mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
    <mml:mrow>
      <mml:mi> if </mml:mi>
      <mml:mo> ⁡ </mml:mo>
      <mml:mo> ( </mml:mo>
      <mml:mrow>
        <mml:mi> x </mml:mi>
        <mml:mo> &lt; </mml:mo>
        <mml:mn> 0.0 </mml:mn>
      </mml:mrow>
      <mml:mo> , </mml:mo>
      <mml:mn> 0.0 </mml:mn>
      <mml:mo> , </mml:mo>
      <mml:mi> if </mml:mi>
      <mml:mo> ⁡ </mml:mo>
      <mml:mo> ( </mml:mo>
      <mml:mrow>
         <mml:mi> x </mml:mi>
         <mml:mo> &gt; </mml:mo>
         <mml:mn> 0.0 </mml:mn>
      </mml:mrow>
      <mml:mo> , </mml:mo>
      <mml:mn> 1.0 </mml:mn>
      <mml:mo> , </mml:mo>
      <mml:mn> 0.5 </mml:mn>
      <mml:mo> ) </mml:mo>
      <mml:mo> ) </mml:mo>
    </mml:mrow>
  </mml:math>  
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="steadyStateAnalysis"/>Doing a Steady State Analysis</h2></div></div></div><p>In order to run a steady state analysis, you have to navigate to the <span class="guibutton">Task-&gt;Steady-State</span> branch in the object tree.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/SteadyStateTask_01.png" align="middle" alt="dialog for doing calculating a stability analysis"/><div class="caption"><p>steady state task dialog</p></div></div></div><p>
In the dialog that appears there, you can make several settings that influence the way the steady state analysis is calculated. First of all, you can decide whether Copasi should calculate the Jacobian matrix and/or do a stability analysis as well by checking the corresponding checkbox. The <span class="guilabel">task executable</span> checkbox in non functional and can be ignored. In the <span class="guilabel">Parameter value</span> table you can also make several settings that influence the method for calculating the steady state itself. For a detailed description of those parameters will eventually by available in the corresponding methods part of this documentation. 
To finally run the steady state calculation, click on the <span class="guibutton">run</span> button at the bottom of the screen. After the calculation, Copasi will jump to the results widget.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/SteadyStateTask_02.png" align="middle" alt="dialog that displays the results of the stability analysis"/><div class="caption"><p>results of the stability analysis</p></div></div></div><p>
</p><p>
The results widget for the steady state calculation contains several tabs for the individual results. The first and the second tab contain the concentrations and the particle number at the steady state respectively. The third tab contains the fluxes for the reactions at the steady state. It contains concentration fluxes as well as particle fluxes. The fourth and fifth tab only contain results if you told Copasi to calculate the Jacobian matrix. The fourth tab then shows the Jacobian for the full system and the fifth tab contains the Jacobian matrix for the reduced system. The sixth and last tab contains the results for the stability analysis if a stability analysis was requested.  
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="stoichiometryStateAnalysis"/>Elementary Modes and Mass Conservation</h2></div></div></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="elementaryModes"/>Calculating Elementary Modes</h3></div></div></div><p>Letting Copasi calculate the elementary modes for the system is very easy. Select the <span class="guibutton">Tasks-&gt;Stoichiometry-&gt;Elementary Modes</span> in the object tree and click on the <span class="guibutton">run</span> button in the dialog that appears.  
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ElementaryModesTask_01.png" align="middle" alt="dialog showing the calculated elementary modes for a model"/><div class="caption"><p>elementary analysis dialog with results</p></div></div></div><p>
</p><p>
The elementary modes found will be displayed directly in this dialog. Each elementary mode lists the reactions it consists of together with their chemical equations. 
</p></div><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="massConservation"/>Calculating Mass Conservations</h3></div></div></div><p>Calculating mass conservations in Copasi is also very easy. Navigate to the <span class="guibutton">Tasks-&gt;Stoichiometry-&gt;Mass Conservation</span> branch in the object tree and click on the <span class="guibutton">recalculate</span> button.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/MassConservationTask_01.png" align="middle" alt="dialog showing the results of a mass conservation calculation"/><div class="caption"><p>mass conservation task dialog with results</p></div></div></div><p>
</p><p>
If the model contains any mass conservation relations they will be listed in a table directly in this dialog. </p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/MassConservationTask_02.png" align="middle" alt="dialog that shows one single mass conservation relation"/><div class="caption"><p>single mass conservation dialog</p></div></div></div><p>
</p><p>
Every mass conservation relation also has a separate leave in the object tree below the current dialog. To see those, either navigate there in the object tree or double click on the entry in the table.
</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="calculatingTrajectory"/>Running a Time Course Simulation</h2></div></div></div><p>To do a time course simulation, you have to navigate to the corresponding task branch in the object tree which is located at <span class="guibutton">Tasks-&gt;Time Course</span>.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/TimeCourseTask_01.png" align="middle" alt="dialog for calculating a trajectory"/><div class="caption"><p>trajectory task dialog</p></div></div></div><p>
</p><p>
The dialog should be more or less self explaining. You can change several parameters for the time course, e.g. the start time, the end time and the number of intervals that is being calculated in the time range. Alternatively to setting the number of intervals, you can also set the size of the interval. If you set either one, the other will be updated accordingly. Also if you change the time range, number of intervals will stay the same, which means that the interval size will be adjusted. The checkbox labeled <span class="guilabel">store time series in memory</span> tells Copasi to keep the result of the time series calculation in memory in order to display it in a result dialog. Since this can be a large amount of data depending on the size of your model and/or the number of intervals you want Copasi to calculate, you should disable this if you think the result might not fit into memory. The consequence of disabling this checkbox is that you need to <a href="#reportDefinitions" title="Defining Reports">define a report</a> in order to store the results of the time course simulation.</p><p>Copasi supports two different methods for calculating time course simulations. Copasi can use the LSODA solver to calculate the time course deterministically or it can use a stochastic solver which uses the <span class="emphasis"><em>Direct Method</em></span> by Gillespie to calculate the time course stochastically. Depending on the solver you have chosen, you can set several parameters in the <span class="guilabel">Parameter value</span> table that influence the way the method works. A detailed explanation of those parameters will follow in the methods part of this document.</p><p>In case you <a href="#reportDefinitions" title="Defining Reports">defined a report definition</a>, you have to associate this report definition with a file for Copasi to be able to write the results to that file. To do that, you click on the <span class="guibutton">Report Definition</span> button. If no report definition had been defined, Copasi informs you that it created a new one and asks you if you want to edit it. If you don't know how to define a report definition, please go back to the <a href="#reportDefinitions">Defining Reports</a> section. Since the report definition Copasi created automatically will be empty, it is recommended that you edit it in order to get some output. Once you are finished creating the report definition go back to the time course dialog and click on the <span class="guibutton">Report Definition</span> button again.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/TimeCourseTask_02.png" align="middle" alt="dialog to associate a report with a file"/><div class="caption"><p>file association dialog for a time course report</p></div></div></div><p>
</p><p>
The dialog that pops up will let you choose the report you want to use (in case you created more then one) and lets you browse for a file to store the report to. Additionally, you can choose whether you want to append the report to an already existing file. The default is to create a new file, or to overwrite an existing file. If you want to append to the selected file, you have to check the <span class="guilabel">Append</span> checkbox.</p><p>Once you made all the desired changes to the parameters, you can start the time course simulation by clicking on the run button. Copasi will show a progressbar while running the simulation, which might take some time depending on several factors like the hardware you are using, the simulation method you chose and/or the size of your model. Once Copasi finishes the calculation, you will find the results in the report file you defined and/or in a separate result dialog if you told Copasi to keep the results in memory.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/TimeCourseTask_03.png" align="middle" alt="dialog that shows the results of the trajectory task"/><div class="caption"><p>trajectory results</p></div></div></div><p>
</p><p>
The results dialog is located directly below the time course branch in the object tree. In this widget you can choose whether you want the results to be displayed as concentrations or as particle numbers and you have the possibility to store the results to file. The advantage a report has over writing a file in the results widget is that you can choose exactly which metabolite concentrations you want to store whereas the results dialog always stores all metabolites concentrations.  
</p><p>A button at the bottom of the dialog let's you create a plot output for the time course simulation. If you click on the button labeled <span class="guilabel">Output definition</span>, you can choose from a list of predefined plots. When you click on one of the plots in the list on the left side of the dialog, you can see a short description of what the plot does on the right side of the dialog. By selecting one of the predefined plots and clicking on the <span class="guilabel">Create!</span> button, Copasi will create the corresponding plot item.  
</p><div class="sect2" lang="en"><div class="titlepage"><div><div><h3 class="title"><a id="workingWithPlots"/>Working with Plots</h3></div></div></div><p>If you have an active plot defined while calculating a trajectory Copasi will draw the plot. The plot window has three elements. A toolbar at the top, that lets you zoom into the plot or print the plot. The actual plot and a legend at the bottom. The legend at the bottom is interactive and drawing of certain curves can be toggled by clicking on the corresponding legend entry.</p><p>In order to zoom further into a plot, you have to activate the zoom function by clicking on the <span class="guibutton">zoom</span> button in the toolbar at the top of the screen. Once this function is active, you can select a rectangular area on the plot by clicking somewhere in the plot and dragging the pointer. The plot will now zoom into the area you just selected. To go back to the original plot, right click on the plot area. </p><div class="note" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Note</h3><p>Macintosh users with single button mice use CTRL-click.</p></div><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Caution</h3><p>The qwt plot widget has some problems under Mac OS X. Especially zooming often leads to strange artifacts.</p></div><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/PlotWindow_01.png" align="middle" alt="dialog window showing a plot"/><div class="caption"><p>Copasi plot window</p></div></div></div><p>
</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="calculatingMCA"/>Doing a Metabolic Control Analysis (MCA)</h2></div></div></div><p>Starting with Build 11, Copasi can do the Metabolic Control Analysis (MCA) for your model. The MCA task is located under <span class="guibutton">Tasks-&gt;Metabolic Control Analysis</span>.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/MCATask_01.png" align="middle" alt="dialog for running a metabolic control analysis"/><div class="caption"><p>MCA task dialog</p></div></div></div><p>
</p><p>In order to do a full MCA (elasticities and control coefficients), Copasi needs to look for a steady state first, otherwise Copasi can only calculate the elasticities. If you did not already <a href="#steadyStateAnalysis" title="Doing a Steady State Analysis">do a steady state calculation</a> right before so that the system already is in the steady state if one was found, you should enable the checkbox that tells Copasi to do a steady state calculation before calculating the MCA. Depending on whether Copasi needs to do a steady state analysis or not, you can change one or more parameters that influence the way the MCA and the steady state are calculated. The parameters for the steady state calculation or the same as for the steady state widget explained in the <a href="#steadyStateAnalysis">Doing a Steady State Analysis</a> section. 
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/MCATask_02.png" align="middle" alt="dialog showing the results of the metabolic control analysis"/><div class="caption"><p>MCA results</p></div></div></div><p>
</p><p>
To start the calculation, you click the <span class="guibutton">run</span> button. After the calculation is finished, Copasi will automatically switch to the results dialog. The results dialog shows three tabs that contain the results for the elasticities, flux control coefficients and concentration control coefficients.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/MCATask_03.png" align="middle" alt="dialog showing the results of the MCA after no steady state was found"/><div class="caption"><p>MCA results at none steady state</p></div></div></div><p>
</p><p>
Depending on whether a steady state was found or not, only the elasticities tab might be enabled. Copasi will state that it could not find a steady state in a label right above the tabs. For all of the results, you can choose if you want Copasi to display them scaled or unscaled.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="parameterScan"/>Doing a Parameter Scan</h2></div></div></div><p>The leaf for parameter scans in the object tree is located under <span class="guibutton">Multiple Tasks -&gt; Parameter Scan</span>. At the top the dialog displays a box called <span class="guilabel">New scan item</span> together with a <span class="guibutton">create...</span>. and when the dialog is opened for the first time, the only item in the widget below is a green box called <span class="guilabel">Task</span>. This widget contains a dropdown list with all the tasks that can be used in a scan. Additionally there is a checkbox called <span class="guilabel">use initial conditions</span> and a checkbox called <span class="guilabel">do output during task</span>.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_01.png" align="middle" alt="dialog showing scan task dialog when first opened"/><div class="caption"><p>Initial scan task dialog</p></div></div></div><p>
</p><p>
    The tasks for which scan can be conducted are steady state, time course and metabolic control analysis calculations. So if we want to do a scan for a time course calculation, we choose "Time Course" from the dropdown list in the <span class="guilabel">Task</span> widget. We will ignore the two checkboxes for the time being and take a look at the dropdown list at the top of the <span class="guilabel">Scan Task</span> dialog. This dropdown list contains four entries named "Parameter Scan", "Repeat" and "Random distribution". Those are additional elements that can be added to the main widget below to form complex tasks. Let's look at one after the other and start with the "Parameter Scan". As it is right now, the scan task does not do anything since we haven't told it yet which parameter we want to scan. To define a parameter for the scan, you choose "Parameter Scan" from the dropdown list at the top and press the create button. Copasi will add a new widget to the dialog that is called <span class="guilabel">Scan</span>. The <span class="guilabel">Scan</span> widget contains some empty lineedit fields and a button labeled <span class="guibutton">...</span> and a checkbox labeled <span class="guilabel">logarithmic</span>. </p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_02.png" align="middle" alt="dialog showing scan task dialog with a Parameter Scan item"/><div class="caption"><p>scan task dialog with scan item</p></div></div></div><p>
</p><p>
First thing you have to do is select the parameter for the scan. You do this by clicking on the <span class="guibutton">...</span> button and selecting some parameter from the selection dialog that appears. Once you are finished with your selection and pressed the <span class="guibutton">OK</span> button, the name of the object you chose will appear in the lineedit field beside the <span class="guibutton">...</span> button. In the lineedit fields below you can now specify the minimal value the parameter will have during the scan as well as the maximal value. After choosing the object, these values will be set to half the objects value for the minimum and double the objects value for the maximum. In the <span class="guilabel">Interval</span> you can specify how many intervals Copasi uses during the scan to raise the value from minimum to maximum. Last but not least, the <span class="guilabel">logarithmic</span> checkbox determines welter the value is raised in linear steps if the box is unchecked or in logarithmic steps if the box is checked.  Now you are set to run your first simple scan by clicking on the <span class="guibutton">Run</span> at the bottom of the dialog. In order to actually see some result, you have to have some kind of output defined. The scan task can not do reports yet, but if a plot is defined, the scan task will do plotting while running the scan. If you did not change the number of intervals from the default, the scan task will run 10 time course simulations each with a different value for the chosen parameter and in turn you will see 10 plots overlaid in one plot window.
</p><p>
    So far we have only scratched the surface of the scan dialog. E.g. if you want to do a two-dimensional scan, i.e. a scan where two parameters are independently scanned, you can add a second <span class="guilabel">Scan</span> widget by adding it to the main dialog just like you did for the first parameter. You select "Parameter Scan" in the dropdown list and push the <span class="guibutton">... Create!</span> button.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_03.png" align="middle" alt="dialog showing scan task dialog with two Parameter Scan items"/><div class="caption"><p>scan task dialog with two scan items</p></div></div></div><p>
</p><p>
After adjusting the minimum and maximum as well as the number of intervals, you can run the scan task again. Copasi will now do a scan for the first parameter while holding the second parameter constant at the minimum. Next, Copasi will raise the second parameter and do another scan from minimum to maximum for the first parameter. This way a full scan for the first parameter is done for every value of the second parameter. You have to be careful because assuming that you chose 10 intervals for both parameters, Copasi will run 100 time course simulations during this two-dimensional scan which can take a long time.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_04.png" align="middle" alt="dialog showing scan task dialog with a Random distribution item"/><div class="caption"><p>scan task dialog with random distribution item</p></div></div></div><p>
</p><p>
    The "Random distribution" item is similar to the "Parameter Scan" item. With the random distribution a parameter can be given a random value. After adding a "Random distribution" widget to the main dialog, you first have to choose a parameter for which a random value will be set. You can then choose from three distribution forms to generate the random value. The three distributions are "Uniform distribution", "Normal Distribution" and "Poisson Distribution". Additionally you have to set the bounds within which the random value will be set. If all has been set and you press the <span class="guibutton">Run</span>, Copasi will set the parameters value to a random value from the chosen distribution and within the bounds set and run one time course simulation.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_05.png" align="middle" alt="dialog showing scan task dialog with a Random distribution and Repeat item"/><div class="caption"><p>scan task dialog with random distribution and repeat item</p></div></div></div><p>
</p><p>
    The "Repeat" item can be used to repeat a certain action several times. E.g. if you add a <span class="guilabel">Repeat</span> widget above a "Random distribution" item, the parameter will be give a random value as many times as specified in the "Repeat" item and run a time course simulation with this value or one of the other tasks specified in the <span class="guilabel">Task</span> item at the bottom of the main widget.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_06.png" align="middle" alt="dialog showing scan task dialog with a more complex combination of actions"/><div class="caption"><p>scan task dialog with combination of actions</p></div></div></div><p>
</p><p>
Different items can be combined in many ways to achieve certain goals. E.g. you could run 10 parameter scans for a certain value each with a different random value for another parameter by combining a "Parameter Scan" item with a "Random distribution" item and a repeat item.
</p><p>
With the buttons on the left of each item other then the <span class="guilabel">Task</span> at the bottom, you can move the items up or down in the list or close an item you no longer need. The order of the items in the main widgets determines in which order Copasi will handle the actions. A widget is controlled by the widget above it. So a <span class="guilabel">Repeat</span> item acts on the widget directly below it. This can be rather important. Consider you have added a <span class="guilabel">Repeat</span> widget and a <span class="guilabel">Random distribution</span> widget to the main widget. Now the <span class="guilabel">Repeat</span> widget can be either above the <span class="guilabel">Random distribution</span> widget or below it and the results you get when you push the run button are very different. Lets first look at the case where the <span class="guilabel">Repeat</span> widget is above the <span class="guilabel">Random distribution</span> widget. If you push the run button, Copasi will run the task as many times as you have specified in the <span class="guilabel">Repeat</span> widget, each time with a different random value for the parameter you have chosen in the <span class="guilabel">Random distribution</span> widget. Now lets assume the <span class="guilabel">Repeat</span> is below the <span class="guilabel">Random distribution</span>. If you push the run button now, Copasi will also run the task as many times as you specified in the <span class="guilabel">Repeat</span> widget, the difference is that this time, the parameter value gets a random value before the repeat takes effect, i.e. all runs are done with the same random value for the chosen parameter. If you do this for a deterministic time course simulation and a concentration plot is defined, the difference becomes  obvious because in the first case, you will probably get X different curves, whereas in the second case you will get X times the same curve.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_07.png" align="middle" alt="dialog showing scan task dialog with a repeated random distribution"/><div class="caption"><p>scan task dialog with repeated random distribution</p></div></div></div><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_08.png" align="middle" alt="plot with 10 different curves"/><div class="caption"><p>plot with 10 different curves</p></div></div></div><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_09.png" align="middle" alt="dialog showing scan task dialog with a random distribution where the time course task is repeated"/><div class="caption"><p>scan task dialog with with random distribution where time course task is repeated</p></div></div></div><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/ParameterScan_10.png" align="middle" alt="plot with 10 times the same curve"/><div class="caption"><p>plot with 10 identical curves</p></div></div></div><p>
</p><p>
What we have left out so far are the two checkboxes at the bottom of the <span class="guilabel">Task</span> widget. The first checkbox is labeled <span class="guilabel">always use initial conditions</span>. If this checkbox is checked, each task that is run runs with the same initial conditions. If the checkbox is not checked, only the first task that runs uses the initial conditions from the model, each subsequent task uses the conditions as they are after the preceding task has finished. 
</p><p>
The second checkbox is labeled <span class="guilabel">Output time series</span> is it is checked, Copasi will plot the complete time series result each time a time series task runs. So if during your scan, 10 time series are calculated, all ten are overloaded in the same window. If the checkbox is unchecked, Copasi will only plot the end result,i.e. the concentrations after the last step, of each time series. Since this checkbox only makes sense for the time series task, it will be disabled if another task is chosen for the scan.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="optimization"/>Running an Optimization Task</h2></div></div></div><p>
The optimization task lets you minimize a given objective function by scanning one or more parameters over a given range. This probably sounds rather cryptic, therefore, lets try to illustrate this with a simple example.
</p><p>
We assume you have a model that consists of several reactions and two of those reactions fluxes (R1, R2) depend on a certain parameter k (either directly or indirectly). Now you are interested in finding the optimal value of k so that the ratio of R1/R2 will be maximal. So lets see how you would do this in Copasi.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Optimization_01.png" align="middle" alt="linux screenshot that shows Copasi optimization dialog"/><div class="caption"><p>Optimization Dialog</p></div></div></div><p>
</p><p>
If you go to the optimization dialog which you can find in the tree under <span class="guilabel">Multiple Task</span>-&gt;<span class="guilabel">Optimization</span>, you will get a screen similar to the one above. At the top of the dialog, you can find an edit line called Expression where you have to input your objective function, that is the expression that Copasi will try to minimize during the optimization. In our case, we want to find the value of k where the ratio of R1 and R2 is maximal. At the beginning of this section, I stated that Copasi will minimize a given objective function, but we would like to maximize the objective function R1/R2. So how do we generate a function to be minimized out of the function R1/R2? This can be achieved in two ways, either we inverse the ratio in order to minimize R2/R1, or we add a "-" sign to or ratio R1/R2. (For the sake of simplicity, I will assume here that the fluxes R1 and R2 will always be positive.) For this example I will use the second possibility and therefore the objective function for Copasi to mimimize will be -(R1/R2). Now you can't just enter this expression into the line edit field since Copasi does not associate the names R1 and R2 with the fluxes through your reactions. In order to build this expression, you have to start typing "-(" into the line edit field. Now, you have to press the button to the right of the line edit field which opens the object browser. In this object browser, you select the flux (particle or concentration) which belongs to R1 and press the <span class="guibutton">OK</span> button. Now you will get a string that corresponds to this flux object right after the part of the expression you already typed. You can now go on by typing "/" followed by the selection of the flux for R2. You end the expression by typing ")". Please be aware that you are allowed to edit the expression, but only those parts of the expression that do not belong to object representation strings. That means everything that has been inserted via selection from the object browser may not be modified. You may however delete complete identifier expressions.
</p><p>
This interface is work in progress and we hope to have a better solution in upcoming releases.
</p><p>
You can run an optimization task with several different methods which can be selected via the drop down list below the input field for the objective function. Each of those methods has a number of parameters which are documented in the methods chapter. 
</p><p>
The optimization task can also be run on two subtasks, namely the "Time Course" and the "Steadystate" subtask. Which one is used for the optimization run can be selected via the correspondingly named checkboxes right of the method selection widget. So for our example we would choose the "Time Course" subtask.
</p><p>
The only thing we have not done yet is to tell Copasi which parameter(s) it should scan in order to minimize the objective function. This can be done by first clicking on the <span class="guibutton">Add</span> button below the subtask selection boxes. Once you have clicked on this button a new widget will appear in the box at the bottom. In the middle of this widget, there is another line edit field where you can specify which parameter is to be scanned. The selection is again done via clicking on the button to the right of the edit field and selecting the correct parameter from the object browser. To the left and the right of the parameter input, you can specify the upper and lower bounds for the parameter during the scan. Those bounds can also be expressions depending on other parameters. Per default, the checkboxes for -Infinity and +Infinity are selected as the range for the scan. Since a computer can't handle infinitesimally small or large numbers, the scan will effectively proceed from the lowest possible the the largest possible double precision number. If you want to specify your own range, you first have to deselect the <span class="guilabel">+Inf</span> or <span class="guilabel">-Inf</span> checkbox and then you can set your own bounds. If you want to delete a parameter from the scan list, you just click on the corresponding button which you find at the left side of each parameter row and if you want to scan more then one parameter, you just add more by clicking on the <span class="guibutton">Add</span> button again and add as many parameters as you like. Or more likely as many as your computer can handle since it should be clear that new each parameter will prolong the calculation depending on the value range and the method parameters used. You can also change the order in which the parameters are scanned by moving them up or down in the list with the corresponding buttons at the left side of each parameter row.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Optimization_02.png" align="middle" alt="linux screenshot that shows the progress dialog during an optimization task run "/><div class="caption"><p>Optimization Progress Dialog</p></div></div></div><p>
</p><p>
Once you have set up all the parameters, you are ready to run the optimization task by clicking on the <span class="guibutton">run</span>. Copasi will now display a progress dialog which informs you about the progress of the calculation and about the best (smallest) value found for the objective function up to this step. Since this progress dialog will close once the optimization task has run, you probably also want to define a report to be written during the calculation. The easiest way to define a report for the optimization task is to click on the <span class="guibutton">report</span> button at the bottom of the dialog. In the dialog that opens, you select "Optimization" from the drop down list labeled <span class="guilabel">ReportDefinition</span> and then you select a filename where the report is to be stored in the field labeled <span class="guilabel">Target</span>. You can either type a filename manually, or you can select one by clicking on the <span class="guibutton">browse</span> button. When you are finished, you click the <span class="guibutton">Confirm</span> button. Now the next time you run the optimization, a report will be stored in the location you specified.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="usingSliders"/>Defining and Using Sliders</h2></div></div></div><p>Starting with Copasi Build 11 sliders to change parameter values interactively are available. So far they can be used in the time course task and the steady state task.</p><p>Per default, the slider dialog is hidden, if you want it to be displayed, you have to activate it by toggling the corresponding menu entry in the <span class="guimenu">tools</span> menu or through the slider button in the toolbar. Depending on what element is selected in the object tree, the dialog will be disabled and a text will be displayed within the dialog that tells you so. If you select a task (or an element below the task) that supports sliders, the dialog will be enabled and the sliders that are defined for this task will be displayed.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Sliders_01.png" align="middle" alt="linux screenshot that shows Copasi with a plot window and the slider dialog"/><div class="caption"><p>Copasi with plot window and sliders</p></div></div></div><p>
</p><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Caution</h3><p>On Mac OS X the slider dialog interferes with file dialogs and other similar dialogs. So before opening a file dialog for loading or saving or similar, either move the slider dialog out of the way, or hide it altogether. If you forget to do so, the slider dialog will probably block the other dialog and you will not be able to make any input.</p></div><p>
Once the slider dialog has been activated, you can add new sliders with the <span class="guibutton">new slider</span> button at the top of the slider dialog. To edit the parameters of an already defined slider, just click on the <span class="guibutton">edit</span> button, which is located on the right side of the slider towards the bottom. If you no longer need a slider you have defined, you can close it by clicking on the <span class="guibutton">close</span> button which is the top button on the right side of the slider. 
Alternatively you can now add and modify existing sliders via a context menu. The context menu can be activated with the right mouse button (CTRL + Mouse button for single button mice on Macs!). If you right click on an existing slider, the menu will offer the possibilities to <span class="guisubmenu">delete</span> this slider or to <span class="guisubmenu">edit</span> it. If you right click into the dialog window where there is no slider, you will be offered the possibility to define a new slider.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Sliders_02.png" align="middle" alt="basic dialog for the definition of a slider"/><div class="caption"><p>basic slider definition dialog</p></div></div></div><p>
</p><p>
Once you are in the dialog for the definition of a new slider, you have to choose an object to manipulate via the slider. This object can be selected from the selection dialog that pops up when you click on the <span class="guibutton">choose object</span> button. The selection tree is the same as the ones you get when <a href="#plotDefinitions" title="Defining Plots">selecting objects for a plot</a>. The selection dialog also offers an expert mode in case the object you want to manipulate with the slider is not present in the simplified tree. Usually the objects that you want to modify in  the time course simulation are one or several of the reaction parameters. This way you can interactively see how the behavior of your model changes when you change a specific parameter. In combination with plots this is a very powerful way to examine the behavior of your model.</p><p>After you have selected an object, you can set the parameters for the slider. You specify the range the slider has to cover in the <span class="guilabel">Minimum Value</span> and <span class="guilabel">Maximum Value</span> fields. Additionally you can specify if the slider shall have a logarithmic or a linear scale. Per default sliders have a linear scale. Normally a slider will be available for all tasks that support sliders. An exception to this are slider for objects that are directly associated with a specific task, e.g. the number of steps in a time series, if you choose such an object for a slider, the slider will only be available for this task.  
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Sliders_03.png" align="middle" alt="extended dialog for the definition of a slider"/><div class="caption"><p>extended slider definition dialog</p></div></div></div><p>
</p><p>
At the bottom of the dialog there is a button labeled <span class="guilabel">extended options</span>. If you click on this button the label will change to <span class="guilabel">base options</span> and more options that influence the sliders behavior will show up. Clicking the button a second time will hide these options again.
The extended options contain mostly fields that let you modify how many steps the slider has (see explanation below).
The <span class="guilabel">Object Value</span> field determines the current value of the object that is associated with the slider. In the <span class="guilabel">Number of minor ticks</span> field you specify how many minor ticks your slider will have. And in the <span class="guilabel">Ticksize factor</span> field you specify how many minor ticks make a major tick. Major ticks can be used to coarsely go through the range of the slider whereas minor ticks allow you to step through the range in a more fine grained fashion. Instead of specifying the number of minor ticks, you can specify the size of a minor tick. If you change either of those two values, the other one will be adjusted accordingly. The formula is 

  <mml:math xmlns:mml="http://www.w3.org/1998/Math/MathML" overflow="scroll">
    <mml:mrow>
      <mml:mi>minor tick size</mml:mi>
      <mml:mo>=</mml:mo>
      <mml:mrow>
        <mml:mo>(</mml:mo>
          <mml:mrow>
            <mml:mi>Maximum Value</mml:mi>
            <mml:mo>-</mml:mo>
            <mml:mi>Minimum Value</mml:mi>
          </mml:mrow>      
        <mml:mo>)</mml:mo>
        <mml:mo>/</mml:mo>
        <mml:mi>number of minor ticks</mml:mi>
      </mml:mrow>
    </mml:mrow>
  </mml:math>

.
Once you have made all the settings, you confirm the slider definition with the <span class="guibutton">OK</span> button. A new slider should appear in the slider dialog.
</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Sliders_04.png" align="middle" alt="slider dialog with three sliders"/><div class="caption"><p>slider dialog with three sliders</p></div></div></div><p>
</p><p>
Each slider shows the name of the object, the current value and the range in its label. If the current value of the slider is outside of the defined range, a corresponding warning will be shown.
The slider dialog has a checkbox called <span class="guilabel">update automatically</span> if this box is checked, Copasi will run the corresponding task each time you release a slider handle after moving it. If you don't want Copasi to automatically run the task each time you change a sliders value, you can uncheck this box and run the task manually by clicking on the <span class="guibutton">run task</span> button.</p>
If the value of an object for which a slider has been defined changes when a task is run, the slider will automatically show the new value. If the checkbox called <span class="guilabel">update ranges</span> is checked, the sliders will automatically adjust their range if the value falls outside of the defined range. If the new value is larger than the old maximum value, the new maximum will be set to twice the new value. Likewise if the new value falls below the old minimum value, the new minimum will be set to half the current value.
<p>Modifying a slider is essentially the same as defining a slider. The only difference being that you can not change the object the slider is connected to. In order to do that, you have to delete the slider and define a new slider for the new object.
</p><p>
Most people will probably use the sliders in combination with the mouse, dragging the sliders pointer to the desired new value. Since this way of using a slider is rather coarse, especially if the slider contains a large number of steps, you can also use the keyboard to change a sliders value. In order to do this, the slider you want to manipulate needs to have the keyboard focus. To give the keyboard focus, you have to hit the TAB key several times until the slider is surrounded by a small frame. Once the slider has this frame, you can increment and decrement the sliders value via the cursor and the page up/down keys on the keyboard. The cursor keys are used to change the value in small steps, the page up/down keys can be used to change the value in larger steps (see the explanation for major and minor keys above). 
</p><div class="caution" style="margin-left: 0.5in; margin-right: 0.5in;"><h3 class="title">Caution</h3><p>On Mac OS X, the tab widget does not handle very wide tabs or many tabs well. This problem will be dealt with in upcoming versions of Copasi.</p></div></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="tutorialWizard"/>Using the Tutorial Wizard</h2></div></div></div><p>Copasi also includes a short tutorial on how you create a model and run a time course simulation with plotting. You can start the wizard from the <span class="guimenu">help</span> menu. The corresponding menu entry is called <span class="guimenuitem">Simple Wizard</span>.</p><p>
</p><div class="screenshot"><div class="mediaobject" align="center"><img src="images/Wizard_01.png" align="middle" alt="tutorial wizard dialog screenshot"/><div class="caption"><p>tutorial wizard</p></div></div></div><p>
</p><p>
The wizard leads you in six steps from creating a model to doing a time course simulation of the model and plotting the results of the time course.</p><p>On the left side of the wizard there are six buttons that correspond to the six steps. When you first open the wizard, step one is selected and the widget on the right shows some documentation that you should read and possibly repeat the steps explained. Once you are finished with step 1, you can either click directly on the button that corresponds to step 2, or you can click the <span class="guibutton">forward</span> button which will always bring you to the next step. If you would like to reread something from an earlier step, you can move to the specific step with the buttons or use the <span class="guibutton">forward</span> and <span class="guibutton">backward</span> buttons to navigate.
</p></div><div class="sect1" lang="en"><div class="titlepage"><div><div><h2 class="title" style="clear: both"><a id="importExport"/>Importing and Exporting SBML Files</h2></div></div></div><p>Copasi is able to import <a href="http://www.sbml.org" target="_top">SBML</a> level 1 and level 2 files as well as export SBML level 2 files through the corresponding entries in the <span class="guimenu">File</span> menu. For the import and export the SBML Model read with <a href="http://www.sbml.org/libsbml.html" target="_top">libsbml</a> is converted to the Copasi model structure and vice versa.</p><p>On exporting, Copasi converts its native model structure to an SBML model that is again written out using libsbml. Since the SBML model structure is converted into the Copasi model structure upon import, some of the information in the SBML file gets lots because Copasi does not support the corresponding model elements. Examples of data that gets lost are rules and events. Also all annotations get lost.</p><p>Likewise, SBML does not support all of the elements of a Copasi model so some information from the Copasi model also gets lost when exporting an SBML file. For example task, reports and plot definitions are not exported to SBML.</p><p>This is normally not a big problem since the essential parts of a model normally get imported or exported. A consequence however one should keep in mind is that if you import an SBML file into Copasi and later export it again, it might have lost some of the original information. So if your SBML model depends on rules and events, it is not suitable for import into Copasi, although this might change in the future.
</p><p>
Upon import of an SBML file, Copasi tries to identify the function calls it read. That means if Copasi find a reaction where the kinetic law consists of a single function call, Copasi tries to find out whether the function called corresponds to one of its built in functions. So for SBML files that have been exported from Copasi, the function calls can be identified upon reimport. Since all functions that can not be recognized have to be added to the global function database, this feature might save you some entries there and keep the global function database more manageable. The same goes for mass action kinetics. Copasi also tries to identify mass action kinetics on import but as opposed to other kinetics, Copasi also checks kinetic laws that don't only consist of a single function call.
</p><p>
This is still very rudimentary and we hope to improve this function recognition in the future so that also functions exported from other programs can be recognized.
</p></div></div></div></body></html>