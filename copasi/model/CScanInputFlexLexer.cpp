#define yyFlexLexer CScanInputFlexLexer

#line 4 "CScanInputFlexLexer.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /Volumes/Home/Users/shoops/cvs/copasi_dev/copasi/model/Attic/CScanInputFlexLexer.cpp,v 1.6 2002/05/30 12:57:19 shoops Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5



/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif


#ifdef __cplusplus

#include <stdlib.h>
#include "copasi.h"

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif	/* __STDC__ */
#endif	/* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif


#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 * 	if ( condition_holds )
 *		yyless( 5 );
 *	else
 *		do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		*yy_cp = yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yytext_ptr )

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;


struct yy_buffer_state
	{
	istream* yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	int yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via yyrestart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2
	};


/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer



static void *yy_flex_alloc YY_PROTO(( yy_size_t ));
static void *yy_flex_realloc YY_PROTO(( void *, yy_size_t ));
static void yy_flex_free YY_PROTO(( void * ));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! yy_current_buffer ) \
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE ); \
	yy_current_buffer->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)


#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "FlexLexer.h"


/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yytext_ptr = yy_bp; \
	yyleng = (int) (yy_cp - yy_bp); \
	yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 20
#define YY_END_OF_BUFFER 21
static yyconst short int yy_accept[198] =
    {   0,
        0,    0,   21,   20,    1,   10,    1,   20,    2,   13,
       14,   16,   11,   12,   20,   17,   19,   19,   18,   18,
       15,   18,    0,    0,    0,   19,   19,    0,   18,    2,
       19,   19,    0,    0,   19,   19,   18,   18,    0,    0,
       18,   18,   18,   18,    0,    0,    0,   19,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    6,    6,
       18,   18,   18,    0,   19,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    6,
        6,    0,    6,    6,   18,   19,   19,    0,    0,    0,
        4,    4,    0,    0,    0,    0,    0,    0,    0,    6,

        0,   18,    0,   18,   18,    3,    3,    0,    0,    7,
        7,    0,    0,    0,    9,    9,    0,    0,    0,    0,
        6,    0,    0,    0,   18,   18,    0,   18,   18,    7,
        7,    0,    7,    7,    0,    0,    0,    6,    6,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    7,    0,
        0,    0,    0,    0,    0,    0,    0,    0,    7,    0,
        0,    0,    0,    0,    0,    5,    5,    7,    7,    4,
        0,    4,    4,    5,    5,    0,    5,    5,    8,    4,
        4,    4,    4,    5,    0,    8,    0,    0,    5,    0,
        8,    5,    5,    8,    8,    8,    0

    } ;

static yyconst int yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        1,    1,    4,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    5,    1,    6,    1,    5,    1,    7,    8,
        9,   10,   11,   12,   13,   14,   15,   16,   17,   17,
       17,   17,   17,   17,   17,   17,   17,   18,    1,    1,
       19,    1,    1,    5,   20,   20,   20,   20,   21,   20,
       20,   20,   22,   20,   20,   23,   24,   25,   26,   20,
       20,   20,   20,   27,   28,   29,   20,   20,   20,   20,
        1,    1,    1,   30,    5,    1,   20,   20,   20,   20,

       31,   20,   20,   20,   32,   20,   20,   33,   34,   35,
       36,   20,   20,   20,   20,   37,   38,   39,   20,   20,
       20,   20,    1,    1,    1,    5,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst int yy_meta[40] =
    {   0,
        1,    2,    3,    1,    4,    1,    5,    6,    7,    8,
        8,    9,    8,   10,    8,   11,   11,    5,   12,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,    8,
       13,   13,   13,   13,   13,   13,   13,   13,   13
    } ;

static yyconst short int yy_base[220] =
    {   0,
        0,    0,  427,  907,   38,  907,  907,    0,    0,  907,
      907,  907,  907,  907,   25,  907,   42,   47,   64,   82,
      907,   22,   72,   77,   29,   94,  102,  119,   43,    0,
      137,   49,   59,   98,  112,  129,  132,  140,  411,  147,
       60,   80,  125,  137,   51,   90,  165,  169,  162,  172,
      120,  210,  228,   87,  397,  263,  178,  116,  189,  202,
      151,  172,  173,  376,  220,  232,  241,  164,  372,  385,
      163,  226,  187,  188,  254,  265,  183,  367,  279,  269,
      352,  241,  285,  290,  306,  295,  301,  223,  342,  312,
      336,    0,  299,  298,  304,  251,  296,  278,  341,  330,

      265,  360,  215,  378,  224,  267,    0,  331,  277,  350,
      367,  313,  329,  364,  259,    0,  373,  397,  408,  171,
      354,  387,  405,  424,  410,  271,  139,  293,  299,  430,
      163,  417,  436,  442,  352,  431,  434,  447,  452,  303,
      457,  464,  470,  473,  426,  191,  406,  490,  477,  472,
      474,  139,  495,  497,  499,  503,  519,  135,  512,  523,
      529,  531,  535,  542,  343,  548,  552,  555,  558,  565,
      398,  571,  575,  578,  104,  584,  588,  594,  601,   95,
      598,  611,  617,  501,  613,  576,  624,   54,  604,   45,
      627,  634,  636,   48,  638,  640,  907,  656,   35,  669,

      681,  693,  705,  717,  727,  739,  751,  763,  775,  787,
      799,  809,  821,  833,  845,  857,  869,  881,  893
    } ;

static yyconst short int yy_def[220] =
    {   0,
      197,    1,  197,  197,  198,  197,  197,  199,  200,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  201,  201,
      197,   20,  198,  198,  197,  197,  197,  202,   20,  200,
      197,  197,  197,  203,  197,  197,  197,  204,  205,  197,
       20,   20,   20,   20,  197,  206,  202,  197,  197,  203,
      203,  207,  207,   53,  205,  208,  197,  197,  197,  197,
       20,   20,   20,  197,  197,  197,  209,  197,  197,  210,
       53,   53,   53,   53,  197,  211,  197,  212,  208,  197,
      197,  197,  197,  197,   20,  197,  197,  197,  213,  197,
      210,  210,   53,   53,   53,  197,  214,  212,  215,  197,

      197,  197,  197,  204,  104,  213,  213,  197,  197,  197,
      197,   53,   53,   53,  214,  214,  197,  216,  215,  197,
      197,  197,  197,  197,  197,  104,  217,  104,  104,  197,
      197,  197,  197,  197,   53,   53,   53,  197,  197,  197,
      197,  197,  197,  197,  197,  217,  217,  218,  197,  197,
       53,  197,  197,  197,  219,  197,  218,  197,  197,  197,
      210,  197,  197,  197,  197,  197,  197,  197,  197,  210,
      197,  210,  210,  197,  197,  197,  197,  197,  197,  210,
      210,  210,  210,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,    0,  197,  197,  197,

      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197
    } ;

static yyconst short int yy_nxt[947] =
    {   0,
        4,    5,    6,    7,    8,    9,    4,   10,   11,   12,
       13,    4,   14,   15,   16,   17,   18,    4,    4,   19,
       19,   20,   19,   19,   19,   19,   19,   19,   19,   21,
       19,   22,   19,   19,   19,   19,   19,   19,   19,   23,
       31,   31,   24,   32,   31,   31,   41,   29,   32,  194,
       32,   25,   45,   26,   27,   25,   44,   33,   33,   34,
       25,  191,   35,   36,   34,   37,   34,   41,   38,   40,
      189,   39,   25,   23,   33,   33,   24,   41,  197,   38,
       38,  197,   40,   37,   41,   25,   38,   26,   27,   39,
      197,   45,  197,  197,   41,   32,  180,   38,   38,   50,

       40,   61,   51,   32,   41,  175,   42,   25,   40,   33,
       33,   34,   71,   32,   41,   25,   43,   35,   36,   34,
       45,  197,   74,   46,  197,   25,   53,   35,   35,   34,
       32,   80,   80,   37,   46,   46,   54,   40,   48,   39,
      146,   37,   25,  147,   35,   36,   34,   39,   57,   41,
       40,  159,   31,   31,   34,  153,   62,   49,   40,   41,
       58,   41,   59,   60,  131,   88,   45,   49,   63,   46,
       48,   41,   64,   50,   64,   41,   51,   85,   65,   57,
       46,   46,   89,   40,   96,   41,   34,  121,   71,   49,
       81,   58,  146,   59,   60,  147,   41,   41,   71,   49,

       53,   97,   58,   81,   82,   82,   41,   41,   85,   85,
       54,   66,   71,   71,   67,   58,   68,   83,   84,   94,
       95,   32,   71,   71,   88,   67,   67,   69,   70,   66,
      124,  124,   67,   66,   68,   86,   87,   34,   68,  128,
      129,   89,   66,   67,   67,   69,   70,   68,   93,   69,
       70,   71,   96,   72,   58,   75,   82,   82,   69,   70,
      115,   71,   77,   73,   75,   78,   75,   76,  106,   97,
      100,   77,   37,   77,   78,  120,   78,  120,   76,   76,
       75,  121,  197,   76,   80,   80,   81,   77,  197,  101,
       78,   81,  130,  130,   76,   76,   32,  115,   58,  101,

       83,   83,   32,   58,  140,   83,   84,  102,  128,  128,
       86,   86,   34,  108,  128,  129,   86,   87,   34,  103,
      127,  104,  105,   71,   71,  109,  112,  110,  111,   71,
       41,  100,  108,   71,   71,  113,  135,   91,   71,   71,
       41,  114,  117,  106,  109,  118,  110,  111,   71,   77,
      101,  131,   78,   81,   71,   81,  118,  118,  174,  174,
      101,  102,  136,  109,   71,  132,  132,   39,  131,  138,
      139,   98,  151,  103,  117,  122,  123,   71,   40,  125,
      109,   77,  133,  134,   78,   39,   91,   71,  140,   71,
       90,  103,   65,  126,  126,  127,   40,  137,  117,   71,

      103,  197,  141,  141,  127,   77,  140,  197,   78,  117,
      197,  125,  118,  179,  179,   55,   77,   39,  103,   78,
      142,  143,  127,  118,  118,  144,  197,  127,   40,  197,
      109,  149,  132,  132,  197,  197,  152,  131,  152,  124,
      124,  127,  153,  131,  145,  130,  130,  197,   81,  109,
      150,  133,  133,   81,  145,  109,   71,  133,  134,   71,
      150,  151,  138,  138,  151,  140,   71,  138,  139,   71,
      103,  140,  141,  141,  144,  160,  197,  103,  149,  142,
      142,  127,  158,  103,  158,  142,  143,  127,  159,  197,
      127,  154,  161,  145,  155,  197,  140,  150,  154,   71,

      154,  197,  184,  145,  164,  155,  155,  150,  156,   71,
      162,  163,  127,  131,  197,  156,  165,  156,  166,  167,
      154,  185,  197,  155,  160,  197,  197,  168,  169,   68,
      170,  185,  140,  197,  155,  155,  140,  156,  197,  197,
       69,  161,  171,  164,  172,  173,  162,  162,  127,  175,
      162,  163,  127,  175,  197,  165,  131,  166,  167,  131,
      197,  165,  197,  176,  176,  165,  170,  177,  178,  197,
      168,  168,  180,  168,  169,  197,  180,  186,  171,  184,
      172,  173,  197,  197,  171,  197,  181,  181,  171,  175,
      182,  183,  197,  174,  174,  175,  187,  165,  185,  176,

      176,  165,  186,  177,  177,  175,  187,  165,  185,  177,
      178,  171,  180,  181,  181,  197,  179,  179,  180,  192,
      193,  187,  197,  188,  171,  188,  182,  182,  194,  189,
      171,  187,  182,  183,  190,  175,  190,  175,  197,  194,
      191,  194,  195,  196,  197,  197,  197,  197,  197,  192,
      192,  192,  193,  195,  195,  195,  196,   28,  197,   28,
      197,  197,  197,  197,  197,   28,   28,  197,   28,   30,
       30,  197,   30,   30,   30,   30,   30,   30,   30,   30,
       30,   30,   41,  197,   41,  197,   41,  197,  197,  197,
      197,   41,   41,   41,   47,  197,   47,  197,  197,  197,

      197,  197,  197,   47,   47,   47,   52,  197,   52,  197,
      197,  197,  197,  197,  197,  197,  197,   52,   38,  197,
       38,  197,   38,  197,  197,  197,  197,   38,   38,   38,
       56,  197,  197,  197,  197,  197,  197,  197,  197,   56,
       46,  197,   46,  197,  197,  197,  197,  197,  197,   46,
       46,   46,   71,  197,   71,   71,  197,  197,  197,  197,
      197,   71,   71,   71,   79,  197,   79,  197,  197,   79,
      197,   79,  197,   79,  197,   79,   67,  197,   67,   67,
      197,  197,  197,  197,  197,   67,   67,   67,   92,  197,
       92,  197,   92,   92,   92,  197,  197,   92,  197,   92,

       76,  197,   76,  197,  197,   76,  197,   76,  197,   76,
      197,   76,   99,  197,  197,  197,  197,  197,  197,  197,
      197,   99,  107,  197,  107,  197,  107,  107,  107,  197,
      197,  107,  197,  107,  116,  197,  116,  197,  116,  116,
      116,  197,  197,  116,  197,  116,  119,  197,  119,  197,
      197,  119,  197,  119,  197,  119,  197,  119,  118,  197,
      118,  197,  197,  118,  197,  118,  197,  118,  197,  118,
      148,  197,  148,  197,  197,  197,  197,  197,  197,  197,
      197,  148,  157,  197,  157,  197,  197,  197,  197,  197,
      197,  157,  157,  157,  155,  197,  155,  197,  197,  197,

      197,  197,  197,  155,  155,  155,    3,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197
    } ;

static yyconst short int yy_chk[947] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
       15,   15,    5,   17,   25,   25,   22,  199,   18,  194,
       32,    5,   45,    5,    5,   17,   22,   17,   17,   17,
       18,  190,   18,   18,   18,   19,   32,   29,   19,   45,
      188,   19,   33,   23,   33,   33,   23,   29,   24,   19,
       19,   24,   19,   20,   41,   23,   20,   23,   23,   20,
       24,   46,   24,   24,   41,   26,  180,   20,   20,   34,

       20,   42,   34,   27,   42,  175,   20,   26,   46,   26,
       26,   26,   54,   35,   42,   27,   20,   27,   27,   27,
       28,   51,   54,   28,   51,   35,   34,   35,   35,   35,
       36,   58,   58,   37,   28,   28,   34,   28,   31,   37,
      127,   38,   36,  127,   36,   36,   36,   38,   40,   43,
       37,  158,   31,   31,   31,  152,   43,   31,   38,   43,
       40,   44,   40,   40,  131,   68,   47,   31,   44,   47,
       48,   44,   49,   50,   49,   61,   50,   61,   49,   57,
       47,   47,   68,   47,   77,   61,   48,  120,   71,   48,
       59,   57,  146,   57,   57,  146,   62,   63,   71,   48,

       50,   77,   59,   60,   59,   59,   62,   63,   62,   63,
       50,   52,   73,   74,   52,   60,   52,   60,   60,   73,
       74,   65,   73,   74,   88,   52,   52,   52,   52,   53,
      103,  103,   53,   66,   53,   65,   65,   65,   66,  105,
      105,   88,   67,   53,   53,   53,   53,   67,   72,   66,
       66,   72,   96,   53,   82,   75,   82,   82,   67,   67,
      115,   72,   75,   53,   56,   75,   76,   56,  106,   96,
       80,   56,  126,   76,   56,  101,   76,  101,   56,   56,
       79,  101,   98,   79,   80,   80,   83,   79,  126,   80,
       79,   84,  109,  109,   79,   79,   86,   97,   83,   80,

       83,   83,   87,   84,  140,   84,   84,   85,  128,  128,
       86,   86,   86,   90,  129,  129,   87,   87,   87,   85,
      140,   85,   85,   94,   93,   90,   93,   90,   90,   95,
       85,  100,  108,   94,   93,   94,  112,   91,  112,   95,
       85,   95,   99,   89,  108,   99,  108,  108,  112,   99,
      100,  110,   99,   81,  113,  121,   99,   99,  165,  165,
      100,  102,  113,  110,  113,  110,  110,  102,  111,  121,
      121,   78,  135,  102,  117,  102,  102,  135,  102,  104,
      111,  117,  111,  111,  117,  104,   70,  135,  122,  114,
       69,  104,   64,  104,  104,  104,  104,  114,  118,  114,

      122,   55,  122,  122,  122,  118,  123,  147,  118,  119,
      147,  125,  119,  171,  171,   39,  119,  125,  123,  119,
      123,  123,  123,  119,  119,  124,    3,  125,  125,    0,
      132,  130,  132,  132,    0,    0,  145,  133,  145,  124,
      124,  124,  145,  134,  124,  130,  130,    0,  138,  133,
      130,  133,  133,  139,  124,  134,  136,  134,  134,  137,
      130,  136,  138,  138,  137,  142,  136,  139,  139,  137,
      141,  143,  141,  141,  144,  151,    0,  142,  149,  142,
      142,  142,  150,  143,  150,  143,  143,  143,  150,    0,
      144,  148,  151,  144,  148,    0,  153,  149,  154,  151,

      155,    0,  184,  144,  156,  148,  148,  149,  148,  151,
      153,  153,  153,  159,    0,  154,  156,  155,  156,  156,
      157,  184,    0,  157,  160,    0,    0,  159,  159,  160,
      161,  184,  162,    0,  157,  157,  163,  157,    0,    0,
      160,  160,  161,  164,  161,  161,  162,  162,  162,  166,
      163,  163,  163,  167,    0,  164,  168,  164,  164,  169,
        0,  166,    0,  166,  166,  167,  170,  167,  167,    0,
      168,  168,  172,  169,  169,    0,  173,  186,  170,  174,
      170,  170,    0,    0,  172,    0,  172,  172,  173,  177,
      173,  173,    0,  174,  174,  178,  186,  176,  174,  176,

      176,  177,  179,  177,  177,  189,  186,  178,  174,  178,
      178,  181,  182,  181,  181,    0,  179,  179,  183,  189,
      189,  179,    0,  185,  182,  185,  182,  182,  191,  185,
      183,  179,  183,  183,  187,  192,  187,  193,    0,  195,
      187,  196,  191,  191,    0,    0,    0,    0,    0,  192,
      192,  193,  193,  195,  195,  196,  196,  198,    0,  198,
        0,    0,    0,    0,    0,  198,  198,    0,  198,  200,
      200,    0,  200,  200,  200,  200,  200,  200,  200,  200,
      200,  200,  201,    0,  201,    0,  201,    0,    0,    0,
        0,  201,  201,  201,  202,    0,  202,    0,    0,    0,

        0,    0,    0,  202,  202,  202,  203,    0,  203,    0,
        0,    0,    0,    0,    0,    0,    0,  203,  204,    0,
      204,    0,  204,    0,    0,    0,    0,  204,  204,  204,
      205,    0,    0,    0,    0,    0,    0,    0,    0,  205,
      206,    0,  206,    0,    0,    0,    0,    0,    0,  206,
      206,  206,  207,    0,  207,  207,    0,    0,    0,    0,
        0,  207,  207,  207,  208,    0,  208,    0,    0,  208,
        0,  208,    0,  208,    0,  208,  209,    0,  209,  209,
        0,    0,    0,    0,    0,  209,  209,  209,  210,    0,
      210,    0,  210,  210,  210,    0,    0,  210,    0,  210,

      211,    0,  211,    0,    0,  211,    0,  211,    0,  211,
        0,  211,  212,    0,    0,    0,    0,    0,    0,    0,
        0,  212,  213,    0,  213,    0,  213,  213,  213,    0,
        0,  213,    0,  213,  214,    0,  214,    0,  214,  214,
      214,    0,    0,  214,    0,  214,  215,    0,  215,    0,
        0,  215,    0,  215,    0,  215,    0,  215,  216,    0,
      216,    0,    0,  216,    0,  216,    0,  216,    0,  216,
      217,    0,  217,    0,    0,    0,    0,    0,    0,    0,
        0,  217,  218,    0,  218,    0,    0,    0,    0,    0,
        0,  218,  218,  218,  219,    0,  219,    0,    0,    0,

        0,    0,    0,  219,  219,  219,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197,  197,  197,  197,  197,
      197,  197,  197,  197,  197,  197
    } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "CScanInputFlexLexer.lpp"
#define INITIAL 0
#line 2 "CScanInputFlexLexer.lpp"

#include "CSpecLine.h"
#include "CDeTerm.h"
#include <iostream>

#define YY_NEVER_INTERACTIVE 1
/*rhs [ \t]*(-)?[_!@%~]?[a-zA-Z]+[-/+*_!@%~a-zA-Z0-9^ \t()]*  */
#line 612 "CScanInputFlexLexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO(( void ));
#else
extern int yywrap YY_PROTO(( void ));
#endif
#endif


#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO(( char *, yyconst char *, int ));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO(( yyconst char * ));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO(( int new_state ));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO(( void ));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO(( void ));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
		YY_FATAL_ERROR( "input in flex scanner failed" );
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

YY_DECL
	{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;

#line 37 "CScanInputFlexLexer.lpp"


#line 742 "CScanInputFlexLexer.cpp"

	if ( yy_init )
		{
		yy_init = 0;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yy_start )
			yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = &cin;

		if ( ! yyout )
			yyout = &cout;

		if ( ! yy_current_buffer )
			yy_current_buffer =
				yy_create_buffer( yyin, YY_BUF_SIZE );

		yy_load_buffer_state();
		}

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
			if ( yy_accept[yy_current_state] )
				{
				yy_last_accepting_state = yy_current_state;
				yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 198 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_base[yy_current_state] != 907 );

yy_find_action:
		yy_act = yy_accept[yy_current_state];
		if ( yy_act == 0 )
			{ /* have to back up */
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			yy_act = yy_accept[yy_current_state];
			}

		YY_DO_BEFORE_ACTION;


do_action:	/* This label is used only to access EOF actions. */


		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yy_hold_char;
			yy_cp = yy_last_accepting_cpos;
			yy_current_state = yy_last_accepting_state;
			goto yy_find_action;

case 1:
YY_RULE_SETUP
#line 39 "CScanInputFlexLexer.lpp"
;
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 41 "CScanInputFlexLexer.lpp"
{ // A comment
// cout << "Lex read a comment: " << yytext << endl;
}
	YY_BREAK
case 3:
YY_RULE_SETUP
#line 45 "CScanInputFlexLexer.lpp"
{ // A differential equation. 
			return CSpecLine::DE;
}
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 49 "CScanInputFlexLexer.lpp"
{ // An equation
			return CSpecLine::EQN;
}
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 53 "CScanInputFlexLexer.lpp"
{ // An initialization
			return CSpecLine::INIT;
}
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 57 "CScanInputFlexLexer.lpp"
{ // A constant specification
			return CSpecLine::CNST;
}
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 61 "CScanInputFlexLexer.lpp"
{ // A rate constant specification
			return CSpecLine::RATE;
}
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 65 "CScanInputFlexLexer.lpp"
{ // A volume specification
			return CSpecLine::CPT;
}
	YY_BREAK
case 9:
YY_RULE_SETUP
#line 69 "CScanInputFlexLexer.lpp"
{ // A function
			return CSpecLine::FUN;
}
	YY_BREAK
case 10:
YY_RULE_SETUP
#line 73 "CScanInputFlexLexer.lpp"
{ // A newline
			return CDeTerm::NL;
}
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 77 "CScanInputFlexLexer.lpp"
{ // A plus
			return CDeTerm::PLUS;
}
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 81 "CScanInputFlexLexer.lpp"
{ // A minus
			return CDeTerm::MINUS;
}
	YY_BREAK
case 13:
YY_RULE_SETUP
#line 85 "CScanInputFlexLexer.lpp"
{ // A left parenthesis
			return CDeTerm::LPAREN;
}
	YY_BREAK
case 14:
YY_RULE_SETUP
#line 89 "CScanInputFlexLexer.lpp"
{ // A right parenthesis
			return CDeTerm::RPAREN;
}
	YY_BREAK
case 15:
YY_RULE_SETUP
#line 93 "CScanInputFlexLexer.lpp"
{ // An exponent
			return CDeTerm::EXPONENT;
}
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 97 "CScanInputFlexLexer.lpp"
{ // A multiplication symbol
			return CDeTerm::MULT;
}
	YY_BREAK
case 17:
YY_RULE_SETUP
#line 101 "CScanInputFlexLexer.lpp"
{ // A division symbol
			return CDeTerm::DIV;
}
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 105 "CScanInputFlexLexer.lpp"
{ // An identifier
			return CDeTerm::IDENT; // :TODO: Is this correct ???
}
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 109 "CScanInputFlexLexer.lpp"
{ // A number
			return CDeTerm::NUM;
}
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 113 "CScanInputFlexLexer.lpp"
ECHO;
	YY_BREAK
#line 961 "CScanInputFlexLexer.cpp"
case YY_STATE_EOF(INITIAL):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * yylex().  If so, then we have to assure
			 * consistency between yy_current_buffer and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yy_n_chars = yy_current_buffer->yy_n_chars;
			yy_current_buffer->yy_input_file = yyin;
			yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state();

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state );

			yy_bp = yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yy_c_buf_p;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer() )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yy_did_buffer_switch_on_eof = 0;

				if ( yywrap() )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yy_c_buf_p =
					yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yy_c_buf_p =
				&yy_current_buffer->yy_ch_buf[yy_n_chars];

				yy_current_state = yy_get_previous_state();

				yy_cp = yy_c_buf_p;
				yy_bp = yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of yylex */

yyFlexLexer::yyFlexLexer( istream* arg_yyin, ostream* arg_yyout )
	{
	yyin = arg_yyin;
	yyout = arg_yyout;
	yy_c_buf_p = 0;
	yy_init = 1;
	yy_start = 0;
	yy_flex_debug = 0;
	yylineno = 1;	// this will only get updated if %option yylineno

	yy_did_buffer_switch_on_eof = 0;

	yy_looking_for_trail_begin = 0;
	yy_more_flag = 0;
	yy_more_len = 0;
	yy_more_offset = yy_prev_more_offset = 0;

	yy_start_stack_ptr = yy_start_stack_depth = 0;
	yy_start_stack = 0;

	yy_current_buffer = 0;

#ifdef YY_USES_REJECT
	yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
	yy_state_buf = 0;
#endif
	}

yyFlexLexer::~yyFlexLexer()
	{
	delete yy_state_buf;
	yy_delete_buffer( yy_current_buffer );
	}

void yyFlexLexer::switch_streams( istream* new_in, ostream* new_out )
	{
	if ( new_in )
		{
		yy_delete_buffer( yy_current_buffer );
		yy_switch_to_buffer( yy_create_buffer( new_in, YY_BUF_SIZE ) );
		}

	if ( new_out )
		yyout = new_out;
	}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput( char* buf, int /* max_size */ )
#else
int yyFlexLexer::LexerInput( char* buf, int max_size )
#endif
	{
	if ( yyin->eof() || yyin->fail() )
		return 0;

#ifdef YY_INTERACTIVE
	yyin->get( buf[0] );

	if ( yyin->eof() )
		return 0;

	if ( yyin->bad() )
		return -1;

	return 1;

#else
	(void) yyin->read( buf, max_size );

	if ( yyin->bad() )
		return -1;
	else
		return yyin->gcount();
#endif
	}

void yyFlexLexer::LexerOutput( const char* buf, int size )
	{
	(void) yyout->write( buf, size );
	}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
	{
	register char *dest = yy_current_buffer->yy_ch_buf;
	register char *source = yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( yy_current_buffer->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		yy_current_buffer->yy_n_chars = yy_n_chars = 0;

	else
		{
		int num_to_read =
			yy_current_buffer->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
			YY_FATAL_ERROR(
"input buffer overflow, can't enlarge buffer because scanner uses REJECT" );
#else

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = yy_current_buffer;

			int yy_c_buf_p_offset =
				(int) (yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				int new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					yy_flex_realloc( (void *) b->yy_ch_buf,
							 b->yy_buf_size + 2 );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = yy_current_buffer->yy_buf_size -
						number_to_move - 1;
#endif
			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&yy_current_buffer->yy_ch_buf[number_to_move]),
			yy_n_chars, num_to_read );

		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	if ( yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			yyrestart( yyin );
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			yy_current_buffer->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	yy_n_chars += number_to_move;
	yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

	return ret_val;
	}


/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
	{
	register yy_state_type yy_current_state;
	register char *yy_cp;

	yy_current_state = yy_start;

	for ( yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yy_last_accepting_state = yy_current_state;
			yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 198 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
	}


/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans( yy_state_type yy_current_state )
	{
	register int yy_is_jam;
	register char *yy_cp = yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yy_last_accepting_state = yy_current_state;
		yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 198 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 197);

	return yy_is_jam ? 0 : yy_current_state;
	}


void yyFlexLexer::yyunput( int c, register char* yy_bp )
	{
	register char *yy_cp = yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yy_hold_char;

	if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register int number_to_move = yy_n_chars + 2;
		register char *dest = &yy_current_buffer->yy_ch_buf[
					yy_current_buffer->yy_buf_size + 2];
		register char *source =
				&yy_current_buffer->yy_ch_buf[number_to_move];

		while ( source > yy_current_buffer->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		yy_current_buffer->yy_n_chars =
			yy_n_chars = yy_current_buffer->yy_buf_size;

		if ( yy_cp < yy_current_buffer->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;


	yytext_ptr = yy_bp;
	yy_hold_char = *yy_cp;
	yy_c_buf_p = yy_cp;
	}


int yyFlexLexer::yyinput()
	{
	int c;

	*yy_c_buf_p = yy_hold_char;

	if ( *yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars] )
			/* This was really a NUL. */
			*yy_c_buf_p = '\0';

		else
			{ /* need more input */
			int offset = yy_c_buf_p - yytext_ptr;
			++yy_c_buf_p;

			switch ( yy_get_next_buffer() )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					yyrestart( yyin );

					/* fall through */

				case EOB_ACT_END_OF_FILE:
					{
					if ( yywrap() )
						return EOF;

					if ( ! yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput();
#else
					return input();
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yy_c_buf_p = yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yy_c_buf_p;	/* cast for 8-bit char's */
	*yy_c_buf_p = '\0';	/* preserve yytext */
	yy_hold_char = *++yy_c_buf_p;


	return c;
	}


void yyFlexLexer::yyrestart( istream* input_file )
	{
	if ( ! yy_current_buffer )
		yy_current_buffer = yy_create_buffer( yyin, YY_BUF_SIZE );

	yy_init_buffer( yy_current_buffer, input_file );
	yy_load_buffer_state();
	}


void yyFlexLexer::yy_switch_to_buffer( YY_BUFFER_STATE new_buffer )
	{
	if ( yy_current_buffer == new_buffer )
		return;

	if ( yy_current_buffer )
		{
		/* Flush out information for old buffer. */
		*yy_c_buf_p = yy_hold_char;
		yy_current_buffer->yy_buf_pos = yy_c_buf_p;
		yy_current_buffer->yy_n_chars = yy_n_chars;
		}

	yy_current_buffer = new_buffer;
	yy_load_buffer_state();

	/* We don't actually know whether we did this switch during
	 * EOF (yywrap()) processing, but the only time this flag
	 * is looked at is after yywrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yy_did_buffer_switch_on_eof = 1;
	}


void yyFlexLexer::yy_load_buffer_state()
	{
	yy_n_chars = yy_current_buffer->yy_n_chars;
	yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
	yyin = yy_current_buffer->yy_input_file;
	yy_hold_char = *yy_c_buf_p;
	}


YY_BUFFER_STATE yyFlexLexer::yy_create_buffer( istream* file, int size )
	{
	YY_BUFFER_STATE b;

	b = (YY_BUFFER_STATE) yy_flex_alloc( sizeof( struct yy_buffer_state ) );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) yy_flex_alloc( b->yy_buf_size + 2 );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in yy_create_buffer()" );

	b->yy_is_our_buffer = 1;

	yy_init_buffer( b, file );

	return b;
	}


void yyFlexLexer::yy_delete_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	if ( b == yy_current_buffer )
		yy_current_buffer = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		yy_flex_free( (void *) b->yy_ch_buf );

	yy_flex_free( (void *) b );
	}


extern "C" int isatty YY_PROTO(( int ));
void yyFlexLexer::yy_init_buffer( YY_BUFFER_STATE b, istream* file )

	{
	yy_flush_buffer( b );

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

	b->yy_is_interactive = 0;
	}


void yyFlexLexer::yy_flush_buffer( YY_BUFFER_STATE b )
	{
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == yy_current_buffer )
		yy_load_buffer_state();
	}


#ifndef YY_NO_SCAN_BUFFER
#endif


#ifndef YY_NO_SCAN_STRING
#endif


#ifndef YY_NO_SCAN_BYTES
#endif


#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state( int new_state )
	{
	if ( yy_start_stack_ptr >= yy_start_stack_depth )
		{
		yy_size_t new_size;

		yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yy_start_stack_depth * sizeof( int );

		if ( ! yy_start_stack )
			yy_start_stack = (int *) yy_flex_alloc( new_size );

		else
			yy_start_stack = (int *) yy_flex_realloc(
					(void *) yy_start_stack, new_size );

		if ( ! yy_start_stack )
			YY_FATAL_ERROR(
			"out of memory expanding start-condition stack" );
		}

	yy_start_stack[yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
	}
#endif


#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
	{
	if ( --yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yy_start_stack[yy_start_stack_ptr]);
	}
#endif


#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
	{
	return yy_start_stack[yy_start_stack_ptr - 1];
	}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif


void yyFlexLexer::LexerError( yyconst char msg[] )
	{
	cerr << msg << '\n';
	exit( YY_EXIT_FAILURE );
	}


/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
		yytext[yyleng] = yy_hold_char; \
		yy_c_buf_p = yytext + n; \
		yy_hold_char = *yy_c_buf_p; \
		*yy_c_buf_p = '\0'; \
		yyleng = n; \
		} \
	while ( 0 )


/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy( char *s1, yyconst char *s2, int n )
#else
static void yy_flex_strncpy( s1, s2, n )
char *s1;
yyconst char *s2;
int n;
#endif
	{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
	}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen( yyconst char *s )
#else
static int yy_flex_strlen( s )
yyconst char *s;
#endif
	{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
	}
#endif


#ifdef YY_USE_PROTOS
static void *yy_flex_alloc( yy_size_t size )
#else
static void *yy_flex_alloc( size )
yy_size_t size;
#endif
	{
	return (void *) malloc( size );
	}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc( void *ptr, yy_size_t size )
#else
static void *yy_flex_realloc( ptr, size )
void *ptr;
yy_size_t size;
#endif
	{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
	}

#ifdef YY_USE_PROTOS
static void yy_flex_free( void *ptr )
#else
static void yy_flex_free( ptr )
void *ptr;
#endif
	{
	free( ptr );
	}

#if YY_MAIN
int main()
	{
	yylex();
	return 0;
	}
#endif
#line 113 "CScanInputFlexLexer.lpp"
