/* Begin CVS Header
   $Source: /Volumes/Home/Users/shoops/cvs/copasi_dev/copasi/function/CEvaluationLexer_lex.cpp,v $
   $Revision: 1.17 $
   $Name:  $
   $Author: shoops $
   $Date: 2006/06/20 13:18:39 $
   End CVS Header */

// Copyright © 2005 by Pedro Mendes, Virginia Tech Intellectual
// Properties, Inc. and EML Research, gGmbH.
// All rights reserved.

#define yyFlexLexer CEvaluationFlexLexer

#line 4 "CEvaluationLexer_lex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /Volumes/Home/Users/shoops/cvs/copasi_dev/copasi/function/CEvaluationLexer_lex.cpp,v 1.17 2006/06/20 13:18:39 shoops Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif

#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>
using namespace std;
#ifndef _WIN32
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif /* __STDC__ */
#endif /* ! __cplusplus */

#ifdef __TURBOC__
#pragma warn -rch
#pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *  if (condition_holds)
 *  yyless(5);
 * else
 *  do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
 do \
  {\
  /* Undo effects of setting up yytext. */ \
  *yy_cp = yy_hold_char; \
  YY_RESTORE_YY_MORE_OFFSET \
  yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
  YY_DO_BEFORE_ACTION; /* set up yytext again */ \
  } \
 while (0)

#define unput(c) yyunput(c, yytext_ptr)

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;

struct yy_buffer_state
  {
    istream* yy_input_file;

    char *yy_ch_buf;  /* input buffer */
    char *yy_buf_pos;  /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2
  };

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer

static void *yy_flex_alloc YY_PROTO((yy_size_t));
static void *yy_flex_realloc YY_PROTO((void *, yy_size_t));
static void yy_flex_free YY_PROTO((void *));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
 {\
 if (! yy_current_buffer) \
  yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE); \
 yy_current_buffer->yy_is_interactive = is_interactive; \
 }

#define yy_set_bol(at_bol) \
 {\
 if (! yy_current_buffer) \
  yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE); \
 yy_current_buffer->yy_at_bol = at_bol; \
 }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "FlexLexer.h"

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
 yytext_ptr = yy_bp; \
 yyleng = (int) (yy_cp - yy_bp); \
 yy_hold_char = *yy_cp; \
 *yy_cp = '\0'; \
 yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 70
#define YY_END_OF_BUFFER 71
static yyconst short int yy_accept[494] =
  {0,
   0, 0, 0, 0, 0, 0, 0, 0, 71, 69,
   68, 68, 69, 59, 62, 65, 57, 55, 64, 54,
   58, 1, 69, 67, 67, 67, 67, 67, 67, 67,
   67, 67, 67, 67, 56, 67, 67, 67, 67, 67,
   67, 67, 67, 67, 67, 63, 66, 69, 60, 61,
   69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
   69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
   69, 69, 69, 69, 69, 69, 69, 67, 67, 68,
   0, 67, 0, 1, 1, 0, 0, 18, 0, 53,
   67, 67, 67, 67, 67, 67, 67, 67, 67, 67,

   67, 67, 67, 67, 67, 67, 67, 3, 67, 67,
   67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
   67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
   67, 67, 67, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 14, 0, 0, 0,
   11, 12, 0, 0, 9, 0, 10, 0, 13, 17,
   3, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
   1, 52, 67, 67, 67, 67, 67, 67, 67, 67,

   67, 67, 67, 67, 67, 51, 67, 67, 7, 8,
   67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
   67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
   67, 67, 67, 67, 0, 0, 15, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   7, 0, 0, 0, 0, 0, 16, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 47, 67, 67, 67,
   67, 67, 67, 67, 23, 67, 27, 67, 26, 67,
   21, 67, 67, 67, 67, 67, 19, 67, 25, 67,

   22, 67, 67, 24, 67, 4, 67, 67, 67, 67,
   67, 67, 67, 67, 67, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 4, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 35, 67, 67, 67, 67,
   67, 34, 36, 49, 29, 33, 32, 67, 67, 5,
   67, 67, 67, 31, 28, 46, 30, 67, 67, 67,
   67, 67, 67, 67, 67, 0, 0, 0, 0, 0,
   0, 0, 5, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 67, 67, 67, 67, 67, 67,

   67, 67, 48, 67, 20, 67, 67, 67, 67, 67,
   67, 67, 67, 67, 0, 0, 0, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
   0, 0, 67, 39, 67, 38, 67, 37, 67, 67,
   67, 67, 67, 67, 67, 67, 67, 0, 0, 0,
   0, 0, 0, 0, 0, 0, 0, 0, 0, 41,
   45, 44, 43, 40, 42, 67, 67, 6, 67, 67,
   0, 0, 6, 0, 0, 67, 67, 67, 0, 0,
   0, 67, 50, 67, 0, 0, 67, 67, 0, 0,
   2, 2, 0
  };

static yyconst int yy_ec[256] =
  {0,
   1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
   1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 2, 1, 4, 1, 1, 5, 1, 1, 6,
   7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
   16, 16, 16, 16, 16, 16, 16, 1, 1, 17,
   1, 18, 1, 1, 19, 20, 21, 22, 23, 24,
   25, 26, 27, 28, 28, 29, 28, 30, 31, 32,
   33, 34, 35, 36, 37, 28, 28, 38, 39, 28,
   1, 40, 1, 41, 28, 1, 42, 43, 44, 45,

   46, 47, 48, 49, 50, 28, 28, 51, 28, 52,
   53, 54, 55, 56, 57, 58, 59, 28, 28, 60,
   61, 28, 62, 1, 63, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,

   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1
  };

static yyconst int yy_meta[64] =
  {0,
   1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
   1, 1, 1, 2, 2, 2, 1, 1, 2, 2,
   2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
   2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
   1, 2, 2, 2, 2, 2, 2, 2, 2, 2,
   2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
   2, 1, 1
  };

static yyconst short int yy_base[499] =
  {0,
   0, 0, 0, 0, 63, 0, 118, 119, 1073, 1074,
   129, 131, 132, 1074, 1074, 1074, 1074, 1074, 1074, 1074,
   1074, 123, 122, 139, 1066, 145, 141, 135, 137, 146,
   147, 136, 159, 175, 1074, 144, 138, 150, 177, 151,
   152, 179, 149, 183, 184, 1074, 1074, 202, 1074, 1074,
   214, 1065, 208, 218, 198, 224, 231, 235, 240, 191,
   209, 246, 248, 187, 247, 239, 202, 258, 262, 259,
   264, 270, 216, 268, 269, 271, 272, 274, 281, 209,
   290, 1064, 1066, 317, 322, 332, 289, 1074, 1065, 1060,
   1060, 291, 283, 277, 275, 282, 315, 322, 329, 333,

   338, 343, 1059, 345, 346, 347, 348, 1058, 349, 350,
   354, 355, 356, 358, 360, 366, 367, 369, 370, 372,
   375, 373, 377, 380, 376, 383, 384, 381, 388, 385,
   386, 389, 390, 394, 1057, 1059, 1055, 391, 393, 201,
   395, 398, 399, 408, 416, 432, 1054, 434, 438, 437,
   1053, 1052, 1051, 439, 1050, 440, 1049, 441, 1048, 1047,
   1046, 448, 442, 444, 449, 450, 451, 401, 454, 455,
   458, 456, 467, 464, 468, 469, 470, 471, 474, 476,
   480, 477, 475, 478, 482, 483, 484, 485, 517, 478,
   481, 1074, 1045, 499, 515, 512, 514, 510, 190, 511,

   539, 540, 541, 543, 542, 1043, 547, 280, 1043, 1042,
   546, 549, 548, 550, 556, 502, 551, 506, 554, 560,
   555, 558, 561, 562, 563, 574, 564, 575, 394, 577,
   579, 576, 580, 581, 1041, 583, 1040, 584, 582, 586,
   585, 587, 596, 597, 593, 594, 626, 627, 629, 397,
   1039, 631, 633, 630, 634, 632, 1038, 588, 635, 590,
   591, 595, 638, 641, 642, 643, 592, 645, 646, 647,
   495, 656, 657, 658, 659, 648, 1036, 1036, 669, 661,
   492, 1035, 1034, 1033, 1031, 1031, 1029, 1029, 1027, 1027,
   1025, 665, 667, 662, 675, 671, 1024, 664, 1023, 1023,

   1021, 1021, 1020, 1018, 1018, 1017, 666, 668, 670, 663,
   674, 676, 677, 680, 697, 1016, 704, 701, 707, 1015,
   1014, 1013, 1012, 1011, 1010, 711, 714, 715, 719, 724,
   723, 1009, 1008, 1007, 1006, 1005, 683, 725, 728, 736,
   737, 738, 740, 741, 742, 1003, 743, 744, 745, 746,
   751, 1002, 1001, 1000, 999, 998, 997, 749, 752, 997,
   996, 753, 995, 993, 992, 991, 990, 754, 755, 756,
   757, 758, 761, 762, 763, 767, 768, 771, 776, 785,
   781, 788, 990, 982, 789, 981, 777, 779, 792, 791,
   795, 799, 802, 811, 813, 814, 815, 818, 820, 822,

   808, 823, 979, 819, 978, 821, 824, 825, 826, 827,
   831, 836, 843, 845, 846, 851, 853, 856, 857, 858,
   848, 854, 850, 847, 859, 860, 861, 862, 863, 865,
   879, 881, 978, 975, 975, 972, 972, 970, 970, 969,
   968, 883, 885, 884, 886, 888, 889, 966, 965, 964,
   963, 962, 961, 891, 894, 892, 893, 895, 896, 959,
   957, 955, 952, 949, 947, 899, 909, 934, 908, 901,
   914, 916, 498, 910, 912, 915, 497, 900, 927, 493,
   919, 918, 401, 922, 926, 929, 930, 937, 942, 943,
   400, 396, 1074, 989, 991, 282, 993, 211
  };

static yyconst short int yy_def[499] =
  {0,
   493, 1, 1, 1, 493, 5, 1, 1, 493, 493,
   493, 493, 494, 493, 493, 493, 493, 493, 493, 493,
   493, 493, 495, 496, 496, 496, 496, 496, 496, 496,
   496, 496, 496, 496, 493, 496, 496, 496, 496, 496,
   496, 496, 496, 496, 496, 493, 493, 497, 493, 493,
   498, 498, 498, 498, 498, 498, 498, 498, 498, 498,
   498, 498, 498, 498, 498, 498, 498, 498, 498, 498,
   498, 498, 498, 498, 498, 498, 498, 496, 496, 493,
   494, 493, 494, 493, 493, 493, 495, 493, 495, 493,
   496, 496, 496, 496, 496, 496, 496, 496, 496, 496,

   496, 496, 496, 496, 496, 496, 496, 496, 496, 496,
   496, 496, 496, 496, 496, 496, 496, 496, 496, 496,
   496, 496, 496, 496, 496, 496, 496, 496, 496, 496,
   496, 496, 496, 497, 493, 497, 498, 498, 498, 498,
   498, 498, 498, 498, 498, 498, 498, 498, 498, 498,
   498, 498, 498, 498, 498, 498, 498, 498, 498, 498,
   498, 498, 498, 498, 498, 498, 498, 498, 498, 498,
   498, 498, 498, 498, 498, 498, 498, 498, 498, 498,
   498, 498, 498, 498, 498, 498, 498, 498, 493, 493,
   493, 493, 496, 496, 496, 496, 496, 496, 496, 496,

   496, 496, 496, 496, 496, 493, 496, 496, 496, 496,
   496, 496, 496, 496, 496, 496, 496, 496, 496, 496,
   496, 496, 496, 496, 496, 496, 496, 496, 496, 496,
   496, 496, 496, 496, 498, 498, 498, 498, 498, 498,
   498, 498, 498, 498, 498, 498, 498, 498, 498, 498,
   498, 498, 498, 498, 498, 498, 498, 498, 498, 498,
   498, 498, 498, 498, 498, 498, 498, 498, 498, 498,
   498, 498, 498, 498, 498, 498, 493, 496, 496, 496,
   496, 496, 496, 496, 493, 496, 493, 496, 493, 496,
   493, 496, 496, 496, 496, 496, 493, 496, 493, 496,

   493, 496, 496, 493, 496, 496, 496, 496, 496, 496,
   496, 496, 496, 496, 496, 498, 498, 498, 498, 498,
   498, 498, 498, 498, 498, 498, 498, 498, 498, 498,
   498, 498, 498, 498, 498, 498, 498, 498, 498, 498,
   498, 498, 498, 498, 498, 493, 496, 496, 496, 496,
   496, 493, 493, 493, 493, 493, 493, 496, 496, 496,
   496, 496, 496, 493, 493, 493, 493, 496, 496, 496,
   496, 496, 496, 496, 496, 498, 498, 498, 498, 498,
   498, 498, 498, 498, 498, 498, 498, 498, 498, 498,
   498, 498, 498, 498, 496, 496, 496, 496, 496, 496,

   496, 496, 493, 496, 493, 496, 496, 496, 496, 496,
   496, 496, 496, 496, 498, 498, 498, 498, 498, 498,
   498, 498, 498, 498, 498, 498, 498, 498, 498, 498,
   498, 498, 496, 493, 496, 493, 496, 493, 496, 496,
   496, 496, 496, 496, 496, 496, 496, 498, 498, 498,
   498, 498, 498, 498, 498, 498, 498, 498, 498, 493,
   493, 493, 493, 493, 493, 496, 496, 496, 496, 496,
   498, 498, 498, 498, 498, 496, 496, 496, 498, 498,
   498, 496, 493, 496, 498, 498, 496, 496, 498, 498,
   496, 498, 0, 493, 493, 493, 493, 493
  };

static yyconst short int yy_nxt[1138] =
  {0,
   10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
   20, 10, 21, 22, 22, 22, 23, 10, 24, 25,
   26, 25, 27, 28, 25, 25, 29, 25, 30, 31,
   25, 32, 25, 25, 33, 34, 25, 25, 25, 10,
   35, 36, 25, 37, 25, 38, 39, 25, 25, 40,
   41, 42, 25, 43, 25, 25, 44, 45, 25, 25,
   25, 46, 47, 10, 11, 12, 48, 14, 15, 16,
   17, 49, 19, 50, 10, 21, 22, 22, 22, 23,
   10, 51, 52, 53, 52, 54, 55, 56, 52, 57,
   52, 58, 59, 60, 61, 52, 52, 62, 63, 52,

   64, 52, 10, 35, 65, 52, 66, 52, 67, 68,
   69, 52, 70, 71, 72, 73, 74, 52, 52, 75,
   76, 52, 77, 52, 46, 47, 10, 10, 10, 10,
   80, 80, 80, 80, 84, 82, 85, 85, 85, 88,
   90, 90, 90, 90, 90, 86, 90, 78, 78, 90,
   90, 90, 90, 101, 90, 90, 90, 90, 92, 93,
   103, 89, 108, 102, 90, 106, 104, 97, 86, 79,
   79, 83, 94, 95, 96, 98, 105, 107, 100, 99,
   90, 109, 90, 119, 90, 110, 114, 115, 90, 90,
   120, 111, 90, 112, 121, 285, 90, 103, 108, 116,

   117, 118, 125, 90, 126, 135, 90, 90, 113, 122,
   80, 80, 137, 90, 90, 286, 149, 167, 123, 90,
   127, 90, 237, 90, 160, 132, 150, 124, 129, 90,
   144, 128, 130, 138, 139, 161, 90, 131, 145, 133,
   90, 136, 146, 140, 90, 90, 151, 141, 142, 143,
   147, 90, 90, 90, 153, 148, 147, 155, 158, 152,
   154, 177, 159, 90, 90, 156, 165, 90, 162, 90,
   157, 160, 163, 90, 90, 90, 90, 90, 164, 90,
   90, 166, 90, 91, 174, 297, 90, 90, 90, 168,
   169, 175, 106, 82, 298, 176, 90, 195, 170, 178,

   197, 196, 171, 172, 173, 153, 88, 151, 179, 155,
   180, 182, 186, 194, 183, 159, 181, 161, 184, 152,
   90, 157, 127, 185, 188, 193, 187, 90, 89, 83,
   189, 189, 189, 84, 90, 85, 85, 85, 90, 86,
   190, 198, 190, 90, 86, 191, 191, 191, 90, 201,
   90, 90, 90, 90, 90, 90, 199, 200, 203, 90,
   90, 90, 86, 90, 202, 90, 204, 86, 207, 211,
   208, 90, 90, 205, 90, 90, 209, 90, 90, 212,
   90, 90, 90, 210, 214, 90, 90, 213, 90, 90,
   90, 90, 215, 90, 90, 90, 90, 135, 90, 297,

   90, 90, 297, 90, 90, 90, 90, 192, 315, 217,
   219, 331, 216, 90, 193, 238, 218, 240, 223, 220,
   225, 90, 228, 236, 239, 235, 224, 226, 221, 222,
   229, 230, 227, 136, 241, 209, 231, 90, 210, 90,
   233, 232, 90, 90, 90, 90, 90, 90, 234, 90,
   242, 243, 244, 90, 90, 90, 90, 235, 246, 90,
   90, 90, 249, 90, 250, 245, 247, 248, 252, 90,
   251, 253, 90, 90, 90, 90, 90, 254, 255, 90,
   90, 90, 90, 90, 257, 90, 256, 90, 90, 90,
   90, 191, 191, 191, 191, 191, 191, 90, 483, 237,

   297, 259, 483, 90, 90, 260, 258, 90, 261, 345,
   351, 90, 265, 262, 267, 90, 287, 90, 272, 90,
   90, 268, 270, 266, 263, 264, 269, 271, 251, 273,
   189, 189, 189, 278, 275, 279, 288, 274, 284, 86,
   257, 282, 276, 283, 289, 291, 90, 90, 90, 280,
   281, 299, 90, 90, 301, 304, 90, 282, 278, 90,
   285, 90, 86, 287, 290, 90, 289, 291, 90, 90,
   292, 300, 295, 296, 302, 305, 293, 294, 306, 90,
   90, 90, 299, 303, 301, 304, 90, 90, 90, 90,
   90, 90, 285, 90, 307, 90, 90, 90, 291, 90,

   90, 287, 289, 286, 317, 283, 288, 308, 309, 290,
   284, 320, 323, 322, 310, 321, 313, 316, 318, 319,
   311, 324, 325, 326, 314, 300, 306, 302, 305, 327,
   312, 90, 90, 303, 90, 90, 299, 90, 301, 304,
   90, 320, 321, 285, 316, 322, 287, 289, 291, 341,
   90, 90, 90, 90, 336, 330, 332, 329, 333, 335,
   328, 299, 301, 90, 304, 334, 90, 90, 90, 90,
   90, 90, 90, 90, 90, 90, 90, 363, 337, 90,
   90, 90, 90, 349, 360, 90, 323, 350, 90, 324,
   325, 338, 339, 336, 358, 340, 344, 359, 343, 347,

   362, 342, 90, 348, 332, 333, 90, 335, 361, 90,
   363, 372, 90, 370, 373, 334, 90, 371, 368, 90,
   90, 360, 369, 378, 90, 380, 374, 379, 90, 90,
   90, 375, 361, 90, 376, 387, 386, 383, 377, 388,
   381, 90, 90, 90, 382, 90, 90, 90, 90, 90,
   90, 90, 384, 385, 90, 386, 90, 90, 90, 90,
   90, 90, 90, 90, 397, 398, 90, 90, 90, 391,
   389, 401, 90, 90, 390, 399, 90, 395, 396, 404,
   400, 90, 90, 383, 90, 402, 90, 392, 417, 393,
   90, 418, 394, 90, 90, 384, 90, 90, 408, 409,

   90, 415, 416, 421, 90, 419, 412, 90, 410, 411,
   406, 407, 414, 90, 420, 423, 90, 413, 90, 434,
   436, 422, 426, 438, 90, 90, 90, 90, 90, 434,
   436, 438, 90, 424, 425, 427, 90, 442, 433, 435,
   437, 90, 428, 439, 430, 440, 429, 441, 90, 443,
   90, 90, 90, 90, 444, 90, 434, 431, 436, 90,
   432, 438, 90, 90, 434, 436, 438, 90, 90, 433,
   90, 448, 435, 437, 439, 440, 449, 454, 450, 441,
   455, 451, 452, 453, 90, 456, 90, 445, 90, 90,
   90, 90, 446, 90, 90, 448, 90, 90, 90, 90,

   90, 90, 447, 467, 90, 90, 90, 449, 450, 451,
   452, 453, 472, 90, 90, 90, 457, 90, 466, 90,
   90, 90, 468, 90, 90, 476, 471, 90, 458, 470,
   473, 90, 90, 482, 90, 90, 475, 477, 459, 90,
   479, 484, 90, 469, 480, 485, 487, 90, 90, 468,
   474, 477, 491, 192, 489, 192, 473, 478, 192, 481,
   486, 192, 480, 192, 492, 192, 465, 464, 463, 462,
   461, 460, 488, 465, 464, 463, 192, 462, 192, 490,
   461, 192, 491, 460, 192, 192, 405, 403, 492, 81,
   81, 87, 87, 134, 134, 90, 192, 192, 192, 192,

   405, 403, 90, 192, 192, 192, 192, 192, 192, 192,
   90, 367, 366, 365, 364, 357, 356, 355, 354, 353,
   352, 346, 90, 367, 192, 366, 365, 192, 364, 192,
   192, 192, 357, 192, 356, 192, 355, 192, 354, 353,
   352, 346, 192, 90, 90, 90, 277, 90, 90, 192,
   277, 90, 90, 90, 90, 90, 206, 90, 90, 90,
   90, 493, 90, 90, 206, 90, 192, 493, 493, 90,
   90, 90, 493, 9, 493, 493, 493, 493, 493, 493,
   493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
   493, 493, 493, 493, 493, 493, 493, 493, 493, 493,

   493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
   493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
   493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
   493, 493, 493, 493, 493, 493, 493
  };

static yyconst short int yy_chk[1138] =
  {0,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
   1, 1, 1, 5, 5, 5, 5, 5, 5, 5,
   5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
   5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
   5, 5, 5, 5, 5, 5, 5, 5, 5, 5,

   5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
   5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
   5, 5, 5, 5, 5, 5, 7, 8, 7, 8,
   11, 11, 12, 12, 22, 13, 22, 22, 22, 23,
   28, 32, 29, 37, 24, 22, 27, 7, 8, 36,
   26, 30, 31, 28, 43, 38, 40, 41, 24, 24,
   29, 23, 32, 28, 33, 31, 29, 26, 22, 7,
   8, 13, 24, 24, 24, 26, 30, 31, 27, 26,
   34, 33, 39, 37, 42, 33, 36, 36, 44, 45,
   37, 33, 64, 34, 37, 199, 60, 40, 43, 36,

   36, 36, 40, 55, 41, 48, 140, 67, 34, 38,
   80, 80, 498, 53, 61, 199, 55, 64, 39, 51,
   42, 73, 140, 54, 60, 45, 55, 39, 44, 56,
   53, 42, 44, 51, 51, 61, 57, 44, 53, 45,
   58, 48, 53, 51, 66, 59, 56, 51, 51, 51,
   54, 62, 65, 63, 57, 54, 67, 58, 59, 56,
   57, 67, 59, 68, 70, 58, 63, 69, 62, 71,
   58, 73, 62, 74, 75, 72, 76, 77, 62, 78,
   95, 63, 94, 496, 66, 208, 79, 96, 93, 65,
   65, 66, 78, 81, 208, 66, 92, 94, 65, 68,

   96, 95, 65, 65, 65, 70, 87, 69, 68, 71,
   70, 72, 76, 93, 75, 72, 71, 74, 75, 69,
   97, 71, 79, 75, 77, 92, 76, 98, 87, 81,
   84, 84, 84, 85, 99, 85, 85, 85, 100, 84,
   86, 97, 86, 101, 85, 86, 86, 86, 102, 99,
   104, 105, 106, 107, 109, 110, 98, 98, 101, 111,
   112, 113, 84, 114, 100, 115, 101, 85, 104, 109,
   105, 116, 117, 102, 118, 119, 106, 120, 122, 110,
   121, 125, 123, 107, 112, 124, 128, 111, 126, 127,
   130, 131, 113, 129, 132, 133, 138, 134, 139, 229,

   141, 492, 250, 142, 143, 491, 168, 483, 229, 116,
   118, 250, 115, 144, 114, 141, 117, 143, 121, 119,
   123, 145, 125, 139, 142, 138, 122, 123, 120, 120,
   126, 129, 124, 134, 144, 127, 130, 146, 128, 148,
   132, 131, 150, 149, 154, 156, 158, 163, 133, 164,
   145, 145, 146, 162, 165, 166, 167, 168, 149, 169,
   170, 172, 154, 171, 156, 148, 149, 150, 162, 174,
   158, 163, 173, 175, 176, 177, 178, 164, 165, 179,
   183, 180, 182, 184, 167, 181, 166, 185, 186, 187,
   188, 190, 190, 190, 191, 191, 191, 281, 480, 170,

   271, 171, 477, 473, 194, 172, 169, 216, 173, 271,
   281, 218, 176, 174, 178, 198, 200, 196, 183, 197,
   195, 178, 180, 177, 175, 175, 179, 181, 182, 184,
   189, 189, 189, 194, 186, 195, 200, 185, 198, 189,
   188, 196, 187, 197, 201, 202, 203, 205, 204, 195,
   195, 211, 207, 213, 212, 214, 217, 218, 216, 219,
   221, 215, 189, 222, 201, 220, 223, 224, 225, 227,
   202, 211, 205, 207, 212, 214, 203, 204, 215, 226,
   228, 232, 230, 213, 231, 233, 234, 239, 236, 238,
   241, 240, 242, 258, 217, 260, 261, 267, 245, 246,

   262, 243, 244, 221, 238, 219, 222, 217, 217, 223,
   220, 239, 242, 241, 224, 240, 227, 236, 238, 238,
   225, 243, 244, 245, 228, 230, 234, 231, 233, 246,
   226, 247, 248, 232, 249, 254, 252, 256, 253, 255,
   259, 260, 261, 263, 258, 262, 264, 265, 266, 267,
   268, 269, 270, 276, 256, 249, 252, 248, 253, 255,
   247, 272, 273, 274, 275, 254, 280, 294, 310, 298,
   292, 307, 293, 308, 279, 309, 296, 298, 259, 311,
   295, 312, 313, 280, 294, 314, 263, 280, 337, 264,
   265, 259, 259, 276, 292, 266, 270, 293, 269, 279,

   296, 268, 315, 279, 272, 273, 318, 275, 295, 317,
   315, 309, 319, 308, 310, 274, 326, 308, 307, 327,
   328, 312, 307, 318, 329, 319, 311, 318, 331, 330,
   338, 314, 313, 339, 317, 337, 331, 328, 317, 337,
   326, 340, 341, 342, 327, 343, 344, 345, 347, 348,
   349, 350, 329, 330, 358, 345, 351, 359, 362, 368,
   369, 370, 371, 372, 348, 349, 373, 374, 375, 339,
   338, 358, 376, 377, 338, 350, 378, 347, 347, 362,
   351, 379, 387, 342, 388, 359, 381, 340, 377, 341,
   380, 378, 344, 382, 385, 343, 390, 389, 369, 370,

   391, 376, 376, 381, 392, 379, 373, 393, 371, 372,
   368, 368, 375, 401, 380, 385, 394, 374, 395, 396,
   397, 382, 388, 398, 404, 399, 406, 400, 402, 407,
   408, 409, 410, 387, 387, 389, 411, 401, 395, 396,
   397, 412, 390, 398, 392, 399, 391, 400, 413, 402,
   414, 415, 424, 421, 404, 423, 416, 393, 417, 422,
   394, 418, 419, 420, 425, 426, 427, 428, 429, 406,
   430, 415, 407, 408, 409, 410, 416, 421, 417, 411,
   422, 418, 419, 420, 431, 423, 432, 412, 442, 444,
   443, 445, 413, 446, 447, 424, 454, 456, 457, 455,

   458, 459, 414, 443, 466, 478, 470, 425, 426, 427,
   428, 429, 455, 469, 467, 474, 430, 475, 442, 471,
   476, 472, 444, 482, 481, 466, 454, 484, 431, 446,
   456, 485, 479, 476, 486, 487, 458, 467, 432, 468,
   471, 478, 488, 445, 472, 479, 482, 489, 490, 447,
   457, 470, 487, 465, 485, 464, 459, 469, 463, 474,
   481, 462, 475, 461, 489, 460, 453, 452, 451, 450,
   449, 448, 484, 441, 440, 439, 438, 437, 436, 486,
   435, 434, 488, 433, 405, 403, 386, 384, 490, 494,
   494, 495, 495, 497, 497, 383, 367, 366, 365, 364,

   363, 361, 360, 357, 356, 355, 354, 353, 352, 346,
   336, 335, 334, 333, 332, 325, 324, 323, 322, 321,
   320, 316, 306, 305, 304, 303, 302, 301, 300, 299,
   297, 291, 290, 289, 288, 287, 286, 285, 284, 283,
   282, 278, 277, 257, 251, 237, 235, 210, 209, 206,
   193, 161, 160, 159, 157, 155, 153, 152, 151, 147,
   137, 136, 135, 108, 103, 91, 90, 89, 83, 82,
   52, 25, 9, 493, 493, 493, 493, 493, 493, 493,
   493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
   493, 493, 493, 493, 493, 493, 493, 493, 493, 493,

   493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
   493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
   493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
   493, 493, 493, 493, 493, 493, 493
  };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "CEvaluationLexer.lpp"
#define INITIAL 0
/* scanner for kinetic functions */
#define YY_NEVER_INTERACTIVE 1
#define sSIGN 1
#define sOPERATOR 2
#define sID 3

#line 12 "CEvaluationLexer.lpp"
#include <vector>

#include "copasi.h"
#include "CEvaluationNode.h"
#include "CEvaluationLexer.h"
#include "CEvaluationParser_yacc.h"

#ifndef YYERRCODE
#define YYERRCODE 256
#endif

#define YY_USER_INIT \
    mpNode = NULL;\
    mPosition = 0;\
    mpNodeList = new std::vector< CEvaluationNode * >;

#define COMMON_ACTION \
    mPosition += yyleng;\
    mpNodeList->push_back(mpNode);

#line 775 "CEvaluationLexer_lex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO((void));
#else
extern int yywrap YY_PROTO((void));
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO((char *, yyconst char *, int));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO((yyconst char *));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO((int new_state));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO((void));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO((void));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput(yytext, yyleng)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
 if ((result = LexerInput((char *) buf, max_size)) < 0) \
  YY_FATAL_ERROR("input in flex scanner failed");
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError(msg)
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
 YY_USER_ACTION

YY_DECL
{
  register yy_state_type yy_current_state;
  register char *yy_cp, *yy_bp;
  register int yy_act;

#line 37 "CEvaluationLexer.lpp"

#line 904 "CEvaluationLexer_lex.cpp"

  if (yy_init)
  {
    yy_init = 0;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if (! yy_start)
        yy_start = 1; /* first start state */

      if (! yyin)
        yyin = &cin;

      if (! yyout)
        yyout = &cout;

      if (! yy_current_buffer)
        yy_current_buffer =
          yy_create_buffer(yyin, YY_BUF_SIZE);

      yy_load_buffer_state();
    }

  while (1)  /* loops until end-of-file is reached */
  {
    yy_cp = yy_c_buf_p;

    /* Support of yytext. */
    *yy_cp = yy_hold_char;

    /* yy_bp points to the position in yy_ch_buf of the start of
     * the current run.
     */
    yy_bp = yy_cp;

    yy_current_state = yy_start;
  yy_match:
    do
      {
        register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
          if (yy_accept[yy_current_state])
            {
              yy_last_accepting_state = yy_current_state;
              yy_last_accepting_cpos = yy_cp;
            }
          while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
            {
              yy_current_state = (int) yy_def[yy_current_state];
              if (yy_current_state >= 494)
                yy_c = yy_meta[(unsigned int) yy_c];
            }
          yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
          ++yy_cp;
        }
      while (yy_base[yy_current_state] != 1074);

  yy_find_action:
      yy_act = yy_accept[yy_current_state];
      if (yy_act == 0)
        {/* have to back up */
          yy_cp = yy_last_accepting_cpos;
          yy_current_state = yy_last_accepting_state;
          yy_act = yy_accept[yy_current_state];
        }

      YY_DO_BEFORE_ACTION;

  do_action: /* This label is used only to access EOF actions. */

      switch (yy_act)
        {/* beginning of action switch */
        case 0: /* must back up */
          /* undo the effects of YY_DO_BEFORE_ACTION */
          *yy_cp = yy_hold_char;
          yy_cp = yy_last_accepting_cpos;
          yy_current_state = yy_last_accepting_state;
          goto yy_find_action;

        case 1:
          YY_RULE_SETUP
#line 38 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeNumber(CEvaluationNodeNumber::DOUBLE,
                                             yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 2:
          YY_RULE_SETUP
#line 46 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::EXPONENTIALE,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 3:
          YY_RULE_SETUP
#line 54 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::PI,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 4:
          YY_RULE_SETUP
#line 62 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::TRUE,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 5:
          YY_RULE_SETUP
#line 70 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::FALSE,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 6:
          YY_RULE_SETUP
#line 78 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::_INFINITY,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 7:
          YY_RULE_SETUP
#line 86 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::_NaN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 8:
          YY_RULE_SETUP
#line 94 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::NOT,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_NOT;

          YY_BREAK
        case 9:
          YY_RULE_SETUP
#line 102 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::LE,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_LE;

          YY_BREAK
        case 10:
          YY_RULE_SETUP
#line 110 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::LT,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_LT;

          YY_BREAK
        case 11:
          YY_RULE_SETUP
#line 118 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::GE,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_GE;

          YY_BREAK
        case 12:
          YY_RULE_SETUP
#line 126 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::GT,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_GT;

          YY_BREAK
        case 13:
          YY_RULE_SETUP
#line 134 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::NE,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_NE;

          YY_BREAK
        case 14:
          YY_RULE_SETUP
#line 142 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::EQ,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_EQ;

          YY_BREAK
        case 15:
          YY_RULE_SETUP
#line 150 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::AND,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_AND;

          YY_BREAK
        case 16:
          YY_RULE_SETUP
#line 158 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::XOR,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_XOR;

          YY_BREAK
        case 17:
          YY_RULE_SETUP
#line 166 "CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::OR,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_OR;

          YY_BREAK
        case 18:
          YY_RULE_SETUP
#line 173 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeObject(CEvaluationNodeObject::ANY,
                                             yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 19:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 181 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::LOG,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 20:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 189 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::LOG10,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 21:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 197 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::EXP,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 22:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 205 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SIN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 23:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 213 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 24:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 221 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::TAN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 25:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 229 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SEC,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 26:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 237 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CSC,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 27:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 245 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COT,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 28:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 253 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SINH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 29:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 261 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COSH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 30:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 269 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::TANH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 31:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 277 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SECH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 32:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 285 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CSCH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 33:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 293 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COTH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 34:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 301 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSIN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 35:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 309 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 36:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 317 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCTAN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 37:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 325 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSEC,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 38:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 333 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCSC,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 39:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 341 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOT,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 40:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 349 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSINH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 41:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 357 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOSH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 42:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 365 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCTANH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 43:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 373 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSECH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 44:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 381 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCSCH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 45:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 389 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOTH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 46:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 397 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SQRT,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 47:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 405 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ABS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 48:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 413 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::FLOOR,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 49:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 421 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CEIL,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 50:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 429 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::FACTORIAL,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 51:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 437 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeChoice(CEvaluationNodeChoice::IF,
                                             yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_CHOICE;

          YY_BREAK
        case 52:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 445 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          {
            std::string tmp(yytext);
            mpNode = new CEvaluationNodeCall(CEvaluationNodeCall::EXPRESSION,
                                             tmp.substr(0, tmp.length() - 1));
          }
          COMMON_ACTION;
          return TOKEN_CALL;

          YY_BREAK
        case 53:
          YY_RULE_SETUP
#line 456 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          {
            std::string tmp(yytext);
            mpNode = new CEvaluationNodeCall(CEvaluationNodeCall::FUNCTION,
                                             tmp.substr(0, tmp.length() - 1));
          }
          COMMON_ACTION;
          return TOKEN_CALL;

          YY_BREAK
        case 54:
          YY_RULE_SETUP
#line 467 "CEvaluationLexer.lpp"

          BEGIN(sID);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::MINUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_SIGN;

          YY_BREAK
        case 55:
          YY_RULE_SETUP
#line 475 "CEvaluationLexer.lpp"

          BEGIN(sID);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::PLUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_SIGN;

          YY_BREAK
        case 56:
          YY_RULE_SETUP
#line 483 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::POWER,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_POWER;

          YY_BREAK
        case 57:
          YY_RULE_SETUP
#line 491 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MULTIPLY,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_MULTIPLY;

          YY_BREAK
        case 58:
          YY_RULE_SETUP
#line 499 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::DIVIDE,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_MULTIPLY;

          YY_BREAK
        case 59:
          YY_RULE_SETUP
#line 507 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MODULUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_MODULUS;

          YY_BREAK
        case 60:
          YY_RULE_SETUP
#line 515 "CEvaluationLexer.lpp"

          BEGIN(sID);
          mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::PLUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_PLUS;

          YY_BREAK
        case 61:
          YY_RULE_SETUP
#line 523 "CEvaluationLexer.lpp"

          BEGIN(sID);
          mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MINUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_PLUS;

          YY_BREAK
        case 62:
          YY_RULE_SETUP
#line 531 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::OPEN,
                                                yytext);
          COMMON_ACTION;
          return TOKEN_STRUCTURE_OPEN;

          YY_BREAK
        case 63:
          YY_RULE_SETUP
#line 539 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::VECTOR_OPEN,
                                                yytext);
          COMMON_ACTION;
          return TOKEN_STRUCTURE_VECTOR_OPEN;

          YY_BREAK
        case 64:
          YY_RULE_SETUP
#line 547 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::COMMA,
                                                yytext);
          COMMON_ACTION;
          return TOKEN_STRUCTURE_COMMA;

          YY_BREAK
        case 65:
          YY_RULE_SETUP
#line 555 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::CLOSE,
                                                yytext);
          COMMON_ACTION;
          return TOKEN_STRUCTURE_CLOSE;

          YY_BREAK
        case 66:
          YY_RULE_SETUP
#line 563 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::VECTOR_CLOSE,
                                                yytext);
          COMMON_ACTION;
          return TOKEN_STRUCTURE_VECTOR_CLOSE;

          YY_BREAK
        case 67:
          YY_RULE_SETUP
#line 571 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeVariable(CEvaluationNodeVariable::ANY,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_VARIABLE;

          YY_BREAK
        case 68:
          YY_RULE_SETUP
#line 579 "CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeWhiteSpace(CEvaluationNodeWhiteSpace::ANY,
                                                 yytext);
          COMMON_ACTION;

          YY_BREAK
        case YY_STATE_EOF(INITIAL):
              case YY_STATE_EOF(sSIGN):
                case YY_STATE_EOF(sOPERATOR):
                  case YY_STATE_EOF(sID):
#line 585 "CEvaluationLexer.lpp"
                      return 0;
          YY_BREAK
        case 69:
          YY_RULE_SETUP
#line 587 "CEvaluationLexer.lpp"

          CCopasiMessage(CCopasiMessage::ERROR, MCFunction + 2, mPosition);
          return YYERRCODE;

          YY_BREAK
        case 70:
          YY_RULE_SETUP
#line 592 "CEvaluationLexer.lpp"
          ECHO;
          YY_BREAK
#line 1860 "CEvaluationLexer_lex.cpp"

        case YY_END_OF_BUFFER:
      {
            /* Amount of text matched not including the EOB char. */
            int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

            /* Undo the effects of YY_DO_BEFORE_ACTION. */
            *yy_cp = yy_hold_char;
            YY_RESTORE_YY_MORE_OFFSET

            if (yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW)
              {
                /* We're scanning a new file or input source.  It's
                 * possible that this happened because the user
                 * just pointed yyin at a new source and called
                 * yylex().  If so, then we have to assure
                 * consistency between yy_current_buffer and our
                 * globals.  Here is the right place to do so, because
                 * this is the first action (other than possibly a
                 * back-up) that will match for the new input source.
                 */
                yy_n_chars = yy_current_buffer->yy_n_chars;
                yy_current_buffer->yy_input_file = yyin;
                yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
              }

            /* Note that here we test for yy_c_buf_p "<=" to the position
             * of the first EOB in the buffer, since yy_c_buf_p will
             * already have been incremented past the NUL character
             * (since all states make transitions on EOB to the
             * end-of-buffer state).  Contrast this with the test
             * in input().
             */
            if (yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars])
              {/* This was really a NUL. */
                yy_state_type yy_next_state;

                yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                /* Okay, we're now positioned to make the NUL
                 * transition.  We couldn't have
                 * yy_get_previous_state() go ahead and do it
                 * for us because it doesn't know how to deal
                 * with the possibility of jamming (and we don't
                 * want to build jamming into it because then it
                 * will run more slowly).
                 */

                yy_next_state = yy_try_NUL_trans(yy_current_state);

                yy_bp = yytext_ptr + YY_MORE_ADJ;

                if (yy_next_state)
                  {
                    /* Consume the NUL. */
                    yy_cp = ++yy_c_buf_p;
                    yy_current_state = yy_next_state;
                    goto yy_match;
                  }

                else
                  {
                    yy_cp = yy_c_buf_p;
                    goto yy_find_action;
                  }
              }

            else switch (yy_get_next_buffer())
                {
                case EOB_ACT_END_OF_FILE:
                  {
                    yy_did_buffer_switch_on_eof = 0;

                    if (yywrap())
                      {
                        /* Note: because we've taken care in
                         * yy_get_next_buffer() to have set up
                         * yytext, we can now set up
                         * yy_c_buf_p so that if some total
                         * hoser (like flex itself) wants to
                         * call the scanner after we return the
                         * YY_NULL, it'll still work - another
                         * YY_NULL will get returned.
                         */
                        yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                        yy_act = YY_STATE_EOF(YY_START);
                        goto do_action;
                      }

                    else
                      {
                        if (! yy_did_buffer_switch_on_eof)
                          YY_NEW_FILE;
                      }
                    break;
                  }

                case EOB_ACT_CONTINUE_SCAN:
                  yy_c_buf_p =
                    yytext_ptr + yy_amount_of_matched_text;

                  yy_current_state = yy_get_previous_state();

                  yy_cp = yy_c_buf_p;
                  yy_bp = yytext_ptr + YY_MORE_ADJ;
                  goto yy_match;

                case EOB_ACT_LAST_MATCH:
                  yy_c_buf_p =
                    &yy_current_buffer->yy_ch_buf[yy_n_chars];

                  yy_current_state = yy_get_previous_state();

                  yy_cp = yy_c_buf_p;
                  yy_bp = yytext_ptr + YY_MORE_ADJ;
                  goto yy_find_action;
                }
            break;
          }

        default:
          YY_FATAL_ERROR(
            "fatal flex scanner internal error--no action found");
        } /* end of action switch */
    } /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer(istream* arg_yyin, ostream* arg_yyout)
{
  yyin = arg_yyin;
  yyout = arg_yyout;
  yy_c_buf_p = 0;
  yy_init = 1;
  yy_start = 0;
  yy_flex_debug = 0;
  yylineno = 1; // this will only get updated if %option yylineno

  yy_did_buffer_switch_on_eof = 0;

  yy_looking_for_trail_begin = 0;
  yy_more_flag = 0;
  yy_more_len = 0;
  yy_more_offset = yy_prev_more_offset = 0;

  yy_start_stack_ptr = yy_start_stack_depth = 0;
  yy_start_stack = 0;

  yy_current_buffer = 0;

#ifdef YY_USES_REJECT
  yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
  yy_state_buf = 0;
#endif
}

yyFlexLexer::~yyFlexLexer()
{
  delete yy_state_buf;
  yy_delete_buffer(yy_current_buffer);
}

void yyFlexLexer::switch_streams(istream* new_in, ostream* new_out)
{
  if (new_in)
    {
      yy_delete_buffer(yy_current_buffer);
      yy_switch_to_buffer(yy_create_buffer(new_in, YY_BUF_SIZE));
    }

  if (new_out)
    yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput(char* buf, int /* max_size */)
#else
int yyFlexLexer::LexerInput(char* buf, int max_size)
#endif
{
  if (yyin->eof() || yyin->fail())
    return 0;

#ifdef YY_INTERACTIVE
  yyin->get(buf[0]);

  if (yyin->eof())
    return 0;

  if (yyin->bad())
    return - 1;

  return 1;

#else
  (void) yyin->read(buf, max_size);

  if (yyin->bad())
    return - 1;
  else
    return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput(const char* buf, int size)
{
  (void) yyout->write(buf, size);
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 * EOB_ACT_LAST_MATCH -
 * EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 * EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
{
  register char *dest = yy_current_buffer->yy_ch_buf;
  register char *source = yytext_ptr;
  register int number_to_move, i;
  int ret_val;

  if (yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1])
    YY_FATAL_ERROR(
      "fatal flex scanner internal error--end of buffer missed");

  if (yy_current_buffer->yy_fill_buffer == 0)
    {/* Don't try to fill the buffer, so this is an EOF. */
      if (yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1)
        {
          /* We matched a single character, the EOB, so
           * treat this as a final EOF.
           */
          return EOB_ACT_END_OF_FILE;
        }

      else
        {
          /* We matched some text prior to the EOB, first
           * process it.
           */
          return EOB_ACT_LAST_MATCH;
        }
    }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

  for (i = 0; i < number_to_move; ++i)
    *(dest++) = *(source++);

  if (yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING)
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    yy_current_buffer->yy_n_chars = yy_n_chars = 0;

  else
    {
      int num_to_read =
        yy_current_buffer->yy_buf_size - number_to_move - 1;

      while (num_to_read <= 0)
        {/* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
          YY_FATAL_ERROR(
            "input buffer overflow, can't enlarge buffer because scanner uses REJECT");
#else

          /* just a shorter name for the current buffer */
          YY_BUFFER_STATE b = yy_current_buffer;

          int yy_c_buf_p_offset =
            (int) (yy_c_buf_p - b->yy_ch_buf);

          if (b->yy_is_our_buffer)
            {
              int new_size = b->yy_buf_size * 2;

              if (new_size <= 0)
                b->yy_buf_size += b->yy_buf_size / 8;
              else
                b->yy_buf_size *= 2;

              b->yy_ch_buf = (char *)
                             /* Include room in for 2 EOB chars. */
                             yy_flex_realloc((void *) b->yy_ch_buf,
                                             b->yy_buf_size + 2);
            }
          else
            /* Can't grow it, we don't own it. */
            b->yy_ch_buf = 0;

          if (! b->yy_ch_buf)
            YY_FATAL_ERROR(
              "fatal error - scanner input buffer overflow");

          yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

          num_to_read = yy_current_buffer->yy_buf_size -
                        number_to_move - 1;
#endif
        }

      if (num_to_read > YY_READ_BUF_SIZE)
        num_to_read = YY_READ_BUF_SIZE;

      /* Read in more data. */
      YY_INPUT((&yy_current_buffer->yy_ch_buf[number_to_move]),
               yy_n_chars, num_to_read);

      yy_current_buffer->yy_n_chars = yy_n_chars;
    }

  if (yy_n_chars == 0)
    {
      if (number_to_move == YY_MORE_ADJ)
        {
          ret_val = EOB_ACT_END_OF_FILE;
          yyrestart(yyin);
        }

      else
        {
          ret_val = EOB_ACT_LAST_MATCH;
          yy_current_buffer->yy_buffer_status =
            YY_BUFFER_EOF_PENDING;
        }
    }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  yy_n_chars += number_to_move;
  yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
  yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

  yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
{
  register yy_state_type yy_current_state;
  register char *yy_cp;

  yy_current_state = yy_start;

  for (yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp)
    {
      register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
      if (yy_accept[yy_current_state])
        {
          yy_last_accepting_state = yy_current_state;
          yy_last_accepting_cpos = yy_cp;
        }
      while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
        {
          yy_current_state = (int) yy_def[yy_current_state];
          if (yy_current_state >= 494)
            yy_c = yy_meta[(unsigned int) yy_c];
        }
      yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 * next_state = yy_try_NUL_trans(current_state);
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans(yy_state_type yy_current_state)
{
  register int yy_is_jam;
  register char *yy_cp = yy_c_buf_p;

  register YY_CHAR yy_c = 1;
  if (yy_accept[yy_current_state])
    {
      yy_last_accepting_state = yy_current_state;
      yy_last_accepting_cpos = yy_cp;
    }
  while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
    {
      yy_current_state = (int) yy_def[yy_current_state];
      if (yy_current_state >= 494)
        yy_c = yy_meta[(unsigned int) yy_c];
    }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
  yy_is_jam = (yy_current_state == 493);

  return yy_is_jam ? 0 : yy_current_state;
}

void yyFlexLexer::yyunput(int c, register char* yy_bp)
{
  register char *yy_cp = yy_c_buf_p;

  /* undo effects of setting up yytext */
  *yy_cp = yy_hold_char;

  if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
    {/* need to shift things up to make room */
      /* +2 for EOB chars. */
      register int number_to_move = yy_n_chars + 2;
      register char *dest = &yy_current_buffer->yy_ch_buf[
                              yy_current_buffer->yy_buf_size + 2];
      register char *source =
        &yy_current_buffer->yy_ch_buf[number_to_move];

      while (source > yy_current_buffer->yy_ch_buf)
        *--dest = *--source;

      yy_cp += (int) (dest - source);
      yy_bp += (int) (dest - source);
      yy_current_buffer->yy_n_chars =
        yy_n_chars = yy_current_buffer->yy_buf_size;

      if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
        YY_FATAL_ERROR("flex scanner push-back overflow");
    }

  *--yy_cp = (char) c;

  yytext_ptr = yy_bp;
  yy_hold_char = *yy_cp;
  yy_c_buf_p = yy_cp;
}

int yyFlexLexer::yyinput()
{
  int c;

  *yy_c_buf_p = yy_hold_char;

  if (*yy_c_buf_p == YY_END_OF_BUFFER_CHAR)
    {
      /* yy_c_buf_p now points to the character we want to return.
       * If this occurs *before* the EOB characters, then it's a
       * valid NUL; if not, then we've hit the end of the buffer.
       */
      if (yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars])
        /* This was really a NUL. */
        *yy_c_buf_p = '\0';

      else
        {/* need more input */
          int offset = yy_c_buf_p - yytext_ptr;
          ++yy_c_buf_p;

          switch (yy_get_next_buffer())
            {
            case EOB_ACT_LAST_MATCH:
              /* This happens because yy_g_n_b()
               * sees that we've accumulated a
               * token and flags that we need to
               * try matching the token before
               * proceeding.  But for input(),
               * there's no matching to consider.
               * So convert the EOB_ACT_LAST_MATCH
               * to EOB_ACT_END_OF_FILE.
               */

              /* Reset buffer status. */
              yyrestart(yyin);

              /* fall through */

            case EOB_ACT_END_OF_FILE:
              {
                if (yywrap())
                  return EOF;

                if (! yy_did_buffer_switch_on_eof)
                  YY_NEW_FILE;
#ifdef __cplusplus
                return yyinput();
#else
                return input();
#endif
              }

            case EOB_ACT_CONTINUE_SCAN:
              yy_c_buf_p = yytext_ptr + offset;
              break;
            }
        }
    }

  c = *(unsigned char *) yy_c_buf_p; /* cast for 8-bit char's */
  *yy_c_buf_p = '\0'; /* preserve yytext */
  yy_hold_char = *++yy_c_buf_p;

  return c;
}

void yyFlexLexer::yyrestart(istream* input_file)
{
  if (! yy_current_buffer)
    yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE);

  yy_init_buffer(yy_current_buffer, input_file);
  yy_load_buffer_state();
}

void yyFlexLexer::yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
{
  if (yy_current_buffer == new_buffer)
    return;

  if (yy_current_buffer)
    {
      /* Flush out information for old buffer. */
      *yy_c_buf_p = yy_hold_char;
      yy_current_buffer->yy_buf_pos = yy_c_buf_p;
      yy_current_buffer->yy_n_chars = yy_n_chars;
    }

  yy_current_buffer = new_buffer;
  yy_load_buffer_state();

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  yy_did_buffer_switch_on_eof = 1;
}

void yyFlexLexer::yy_load_buffer_state()
{
  yy_n_chars = yy_current_buffer->yy_n_chars;
  yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
  yyin = yy_current_buffer->yy_input_file;
  yy_hold_char = *yy_c_buf_p;
}

YY_BUFFER_STATE yyFlexLexer::yy_create_buffer(istream* file, int size)
{
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE) yy_flex_alloc(sizeof(struct yy_buffer_state));
  if (! b)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *) yy_flex_alloc(b->yy_buf_size + 2);
  if (! b->yy_ch_buf)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  yy_init_buffer(b, file);

  return b;
}

void yyFlexLexer::yy_delete_buffer(YY_BUFFER_STATE b)
{
  if (! b)
    return;

  if (b == yy_current_buffer)
    yy_current_buffer = (YY_BUFFER_STATE) 0;

  if (b->yy_is_our_buffer)
    yy_flex_free((void *) b->yy_ch_buf);

  yy_flex_free((void *) b);
}

void yyFlexLexer::yy_init_buffer(YY_BUFFER_STATE b, istream* file)

{
  yy_flush_buffer(b);

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

  b->yy_is_interactive = 0;
}

void yyFlexLexer::yy_flush_buffer(YY_BUFFER_STATE b)
{
  if (! b)
    return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == yy_current_buffer)
    yy_load_buffer_state();
}

#ifndef YY_NO_SCAN_BUFFER
#endif

#ifndef YY_NO_SCAN_STRING
#endif

#ifndef YY_NO_SCAN_BYTES
#endif

#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state(int new_state)
{
  if (yy_start_stack_ptr >= yy_start_stack_depth)
    {
      yy_size_t new_size;

      yy_start_stack_depth += YY_START_STACK_INCR;
      new_size = yy_start_stack_depth * sizeof(int);

      if (! yy_start_stack)
        yy_start_stack = (int *) yy_flex_alloc(new_size);

      else
        yy_start_stack = (int *) yy_flex_realloc(
                           (void *) yy_start_stack, new_size);

      if (! yy_start_stack)
        YY_FATAL_ERROR(
          "out of memory expanding start-condition stack");
    }

  yy_start_stack[yy_start_stack_ptr++] = YY_START;

  BEGIN(new_state);
}
#endif

#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
{
  if (--yy_start_stack_ptr < 0)
    YY_FATAL_ERROR("start-condition stack underflow");

  BEGIN(yy_start_stack[yy_start_stack_ptr]);
}
#endif

#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
{
  return yy_start_stack[yy_start_stack_ptr - 1];
}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError(yyconst char msg[])
{
  cerr << msg << '\n';
  exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
 do \
  {\
  /* Undo effects of setting up yytext. */ \
  yytext[yyleng] = yy_hold_char; \
  yy_c_buf_p = yytext + n; \
  yy_hold_char = *yy_c_buf_p; \
  *yy_c_buf_p = '\0'; \
  yyleng = n; \
  } \
 while (0)

/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy(char *s1, yyconst char *s2, int n)
#else
static void yy_flex_strncpy(s1, s2, n)
char *s1;
yyconst char *s2;
int n;
#endif
{
  register int i;
  for (i = 0; i < n; ++i)
    s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen(yyconst char *s)
#else
static int yy_flex_strlen(s)
yyconst char *s;
#endif
{
  register int n;
  for (n = 0; s[n]; ++n)
;

  return n;
}
#endif

#ifdef YY_USE_PROTOS
static void *yy_flex_alloc(yy_size_t size)
#else
static void *yy_flex_alloc(size)
yy_size_t size;
#endif
{
  return (void *) malloc(size);
}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc(void *ptr, yy_size_t size)
#else
static void *yy_flex_realloc(ptr, size)
void *ptr;
yy_size_t size;
#endif
{
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return (void *) realloc((char *) ptr, size);
}

#ifdef YY_USE_PROTOS
static void yy_flex_free(void *ptr)
#else
static void yy_flex_free(ptr)
void *ptr;
#endif
{
  free(ptr);
}

#if YY_MAIN
int main()
{
  yylex();
  return 0;
}
#endif
#line 592 "CEvaluationLexer.lpp"
