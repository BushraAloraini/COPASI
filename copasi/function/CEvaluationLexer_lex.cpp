// Begin CVS Header
//   $Source: /Volumes/Home/Users/shoops/cvs/copasi_dev/copasi/function/CEvaluationLexer_lex.cpp,v $
//   $Revision: 1.26 $
//   $Name:  $
//   $Author: shoops $
//   $Date: 2009/04/29 21:24:40 $
// End CVS Header

// Copyright (C) 2008 by Pedro Mendes, Virginia Tech Intellectual
// Properties, Inc., EML Research, gGmbH, University of Heidelberg,
// and The University of Manchester.
// All rights reserved.

#line 2 "CEvaluationLexer_lex.cpp"

#line 4 "CEvaluationLexer_lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 33
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* The c++ scanner is a mess. The FlexLexer.h header file relies on the
 * following macro. This is required in order to pass the c++-multiple-scanners
 * test in the regression suite. We get reports that it breaks inheritance.
 * We will address this in a future release of flex, or omit the C++ scanner
 * altogether.
 */
#define yyFlexLexer CEvaluationFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

#if __STDC__

#define YY_USE_CONST

#endif  /* __STDC__ */
#endif  /* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
  do \
    {\
      /* Undo effects of setting up yytext. */ \
      int yyless_macro_arg = (n); \
      YY_LESS_LINENO(yyless_macro_arg);\
      *yy_cp = (yy_hold_char); \
      YY_RESTORE_YY_MORE_OFFSET \
      (yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
      YY_DO_BEFORE_ACTION; /* set up yytext again */ \
    } \
  while (0)

#define unput(c) yyunput(c, (yytext_ptr))

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef unsigned int yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{

  std::istream* yy_input_file;

  char *yy_ch_buf;    /* input buffer */
  char *yy_buf_pos;   /* current position in input buffer */

  /* Size of input buffer in bytes, not including room for EOB
   * characters.
   */
  yy_size_t yy_buf_size;

  /* Number of characters read into yy_ch_buf, not including EOB
   * characters.
   */
  int yy_n_chars;

  /* Whether we "own" the buffer - i.e., we know we created it,
   * and can realloc() it to grow it, and should free() it to
   * delete it.
   */
  int yy_is_our_buffer;

  /* Whether this is an "interactive" input source; if so, and
   * if we're using stdio for input, then we want to use getc()
   * instead of fread(), to make sure we stop fetching input after
   * each newline.
   */
  int yy_is_interactive;

  /* Whether we're considered to be at the beginning of a line.
   * If so, '^' rules will be active on the next match, otherwise
   * not.
   */
  int yy_at_bol;

  int yy_bs_lineno; /**< The line count. */
  int yy_bs_column; /**< The column count. */

  /* Whether to try to fill the input buffer when we reach the
   * end of it.
   */
  int yy_fill_buffer;

  int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
  /* When an EOF's been seen but there's still some text to process
   * then we mark the buffer as YY_EOF_PENDING, to indicate that we
   * shouldn't try reading from the input source any more.  We might
   * still have a bunch of tokens to match, though, because of
   * possible backing-up.
   *
   * When we actually see the EOF, we change the status to "new"
   * (via yyrestart()), so that the user can continue scanning by
   * just pointing yyin at a new input file.
   */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ((yy_buffer_stack) \
                            ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                            : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *CEvaluationalloc(yy_size_t);
void *CEvaluationrealloc(void *, yy_size_t);
void CEvaluationfree(void *);

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
  {\
    if (! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
        YY_CURRENT_BUFFER_LVALUE =    \
                                      yy_create_buffer(yyin, YY_BUF_SIZE ); \
      } \
    YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
  }

#define yy_set_bol(at_bol) \
  {\
    if (! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
        YY_CURRENT_BUFFER_LVALUE =    \
                                      yy_create_buffer(yyin, YY_BUF_SIZE ); \
      } \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
  }

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define yywrap(n) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include "copasi/FlexLexer.h"

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
  (yytext_ptr) = yy_bp; \
  yyleng = (size_t) (yy_cp - yy_bp); \
  (yy_hold_char) = *yy_cp; \
  *yy_cp = '\0'; \
  (yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 72
#define YY_END_OF_BUFFER 73
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
  flex_int32_t yy_verify;
  flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_accept[540] =
  {0,
      0,    0,    0,    0,    0,    0,    0,    0,   73,   71,
      70,   70,   71,   61,   64,   67,   59,   57,   66,   56,
      60,    1,   71,   69,   69,   69,   69,   69,   69,   69,
      69,   69,   69,   69,   69,   58,   69,   69,   69,   69,
      69,   69,   69,   69,   69,   69,   69,   65,   68,   71,
      62,   63,   71,   71,   71,   71,   71,   71,   71,   71,
      71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
      71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
      71,   69,   69,   70,    0,   69,    0,    1,    1,    0,
      0,   18,    0,   55,   69,   69,   69,   69,   69,   69,

      69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
      69,    3,   69,   69,   69,   69,   69,   69,   69,   69,
      69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
      69,   69,   69,   69,   69,   69,   69,   69,   69,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      0,    0,   14,    0,    0,    0,   11,   12,    0,    0,
      9,    0,   10,    0,   13,    0,   17,    3,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,   69,   69,

      1,    0,    1,   54,   69,   69,   69,   69,   69,   69,
      69,   69,   69,   69,   69,   69,   69,   53,   69,   69,
      7,   69,    8,   69,   69,   69,   69,   69,   69,   69,
      69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
      69,   69,   69,   69,   69,   69,   69,   69,   69,   69,
      0,    0,   15,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    7,    0,    0,    0,
      0,    0,    0,    0,   16,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,   47,   69,   69,   69,

      69,   69,   69,   69,   23,   69,   27,   69,   26,   69,
      21,   69,   69,   69,   69,   69,   19,   69,   69,   25,
      69,   22,   69,   69,   24,   69,    4,   69,   69,   69,
      69,   69,   69,   69,   69,   69,   69,   69,   69,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      4,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,   35,   69,   69,   69,   69,   69,   34,
      36,   49,   29,   33,   32,   69,   69,    5,   69,   69,
      69,   69,   31,   28,   46,   30,   69,   69,   69,   69,

      69,   69,   69,   69,   69,   69,   69,    0,    0,    0,
      0,    0,    0,    0,    5,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      69,   69,   69,   69,   69,   69,   69,   69,   48,   69,
      20,   69,   69,   69,   69,   69,   69,   69,   69,   69,
      69,   69,   69,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
      0,    0,    0,    0,   69,   39,   69,   38,   69,   37,
      69,   69,   69,   69,   69,   69,   52,   69,   69,   69,
      69,    0,    0,    0,    0,    0,    0,    0,    0,    0,

      0,    0,    0,    0,   41,   45,   44,   43,   40,   42,
      69,   69,    6,   51,   69,   69,    0,    0,    6,    0,
      0,   69,   69,   69,    0,    0,    0,   69,   50,   69,
      0,    0,   69,   69,    0,    0,    2,    2,    0
  };

static yyconst flex_int32_t yy_ec[256] =
  {0,
      1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
      1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    2,    1,    4,    1,    1,    5,    1,    1,    6,
      7,    8,    9,   10,   11,   12,   13,   14,   15,   16,
      16,   16,   16,   16,   16,   16,   16,    1,    1,   17,
      1,   18,    1,    1,   19,   20,   21,   22,   23,   24,
      25,   26,   27,   28,   28,   29,   30,   31,   32,   33,
      34,   35,   36,   37,   38,   28,   28,   39,   40,   28,
      1,   41,    1,   42,   28,    1,   43,   44,   45,   46,

      47,   48,   49,   50,   51,   28,   28,   52,   53,   54,
      55,   56,   57,   58,   59,   60,   61,   28,   28,   62,
      63,   28,   64,    1,   65,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1
  };

static yyconst flex_int32_t yy_meta[66] =
  {0,
      1,    1,    1,    1,    1,    2,    1,    1,    1,    1,
      1,    1,    1,    2,    2,    2,    1,    1,    2,    2,
      2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      1,    1,    2,    2,    2,    2,    2,    2,    2,    2,
      2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      2,    2,    2,    1,    1
  };

static yyconst flex_int16_t yy_base[545] =
  {0,
      0,    0,    0,    0,   65,    0,  122,  123, 1169, 1170,
      133,  135,  137, 1170, 1170, 1170, 1170, 1170, 1170, 1170,
      1170,  128,  121,  144, 1162,  150,  146,  139,  143,  140,
      151,  142,  165,  178,  160, 1170,  149,  155,  141,  153,
      181,  157,  183,  189,  192,  184,  194, 1170, 1170,  200,
      1170, 1170,  216, 1161,  222,  225,  205,  195,  238,  240,
      251,  215,  249,  255,  260,  250,  254,  259,  261,  211,
      269,  224,  274,  279,  282,  284,  281,  293,  287,  292,
      286,  291,  288,  213,  292, 1160, 1162,  291,  337,  347,
      283, 1170, 1161, 1156, 1156,  321,  303,  294,  341,  200,

      342,  330,  349,  348,  353,  358, 1155,  359,  366,  365,
      367, 1154,  371,  369,  370,  372,  373,  374,  379,  380,
      381,  382,  387,  383,  388,  391,  389,  392,  400,  393,
      401,  402,  403,  404,  406,  407,  408,  409,  413,  412,
      1153, 1155, 1151,  415,  411,  417,  419,  425,  214,  440,
      421,  448, 1150,  426,  460,  436, 1149, 1148, 1147,  466,
      1146,  467, 1145,  465, 1144,  468, 1143, 1142,  470,  469,
      471,  473,  472,  474,  476,  477,  478,  479,  481,  480,
      487,  488,  482,  489,  491,  492,  493,  501,  496,  499,
      502,  506,  503,  507,  508,  509,  510,  511,  515,  513,

      540,  508,  513, 1170, 1141,  532,  537,  546,  553,  560,
      285,  514,  566,  558,  561,  540,  569, 1139,  572,  414,
      1139,  573, 1138,  574,  576,  575,  579,  512,  580,  577,
      582,  585,  589,  588,  587,  600,  601,  590,  602,  604,
      591,  603,  605,  607,  608,  609,  610,  611,  617,  618,
      1137,  612, 1136,  632,  613,  616,  620,  626,  629,  650,
      625,  628,  661,  666,  665,  615, 1135,  669,  667,  668,
      671,  674,  672,  677, 1134,  622,  673,  676,  680,  679,
      678,  685,  690,  681,  682,  684,  683,  696,  697,  698,
      699,  700,  701,  703,  705,  707, 1132, 1132,  709,  721,

      704, 1131, 1130, 1129, 1127, 1127, 1125, 1125, 1123, 1123,
      1121,  708,  714,  731,  723,  750, 1120,  619,  751, 1119,
      1119, 1117, 1117, 1116, 1114, 1114, 1113,  753,  710,  713,
      719,  718,  711,  716,  715,  720,  761,  762,  765, 1112,
      770,  771,  772, 1111, 1110, 1109, 1108, 1107, 1106,  773,
      776,  774,  777,  778,  781,  780, 1105, 1104, 1103, 1102,
      1101,  782,  783,  784,  786,  787,  790,  797,  794,  795,
      801,  804,  805, 1099,  817,  807,  811,  812,  815, 1098,
      1097, 1096, 1095, 1094, 1093,  810,  813, 1093, 1092,  824,
      1091,  821, 1089, 1088, 1087, 1086,  820,  816,  818,  819,

      828,  830,  831,  833,  834,  850,  851,  852,  853,  856,
      855,  859,  860,  861, 1086, 1085,  865, 1084,  864,  862,
      863,  866,  867,  873,  874,  888,  875,  881,  889,  892,
      893,  894,  895,  898,  899,  900,  907,  902, 1082,  897,
      1081, 1081,  901,  904,  908,  909,  910,  911,  912,  924,
      930,  931,  933,  937,  938,  939,  940,  941,  942,  943,
      945,  934, 1073,  946,  947,  949,  950,  951,  963,  964,
      936,  967,  969,  971, 1072, 1070, 1069, 1067, 1067, 1065,
      1065, 1064, 1062,  973,  974,  976, 1060, 1060,  977,  978,
      979, 1059, 1058, 1057, 1056, 1055, 1054,  982,  983,  986,

      1052,  981,  988,  989, 1048, 1044, 1039, 1038, 1037, 1029,
      990,  998,  623,  525,  992,  997, 1001, 1003,  422,  999,
      1002, 1006,  418, 1005, 1014,  416, 1016, 1009,  411, 1017,
      1024, 1028, 1033, 1000, 1034, 1029,  296,  219, 1170, 1080,
      1082,  221, 1084,  158
  };

static yyconst flex_int16_t yy_def[545] =
  {0,
      539,    1,    1,    1,  539,    5,    1,    1,  539,  539,
      539,  539,  540,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  541,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  539,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  539,  539,  543,
      539,  539,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  542,  542,  539,  540,  539,  540,  539,  539,  539,
      541,  539,  541,  539,  542,  542,  542,  542,  542,  542,

      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  543,
      539,  543,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  542,  542,

      539,  539,  539,  539,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  539,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  539,  542,  542,  542,

      542,  542,  542,  542,  539,  542,  539,  542,  539,  542,
      539,  542,  542,  542,  542,  542,  539,  542,  542,  539,
      542,  539,  542,  542,  539,  542,  542,  542,  542,  542,
      542,  542,  542,  542,  542,  542,  542,  542,  542,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  539,  542,  542,  542,  542,  542,  539,
      539,  539,  539,  539,  539,  542,  542,  542,  542,  542,
      542,  542,  539,  539,  539,  539,  542,  542,  542,  542,

      542,  542,  542,  542,  542,  542,  542,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      542,  542,  542,  542,  542,  542,  542,  542,  539,  542,
      539,  542,  542,  542,  542,  542,  542,  542,  542,  542,
      542,  542,  542,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  544,  544,  544,  544,  544,  544,
      544,  544,  544,  544,  542,  539,  542,  539,  542,  539,
      542,  542,  542,  542,  542,  542,  539,  542,  542,  542,
      542,  544,  544,  544,  544,  544,  544,  544,  544,  544,

      544,  544,  544,  544,  539,  539,  539,  539,  539,  539,
      542,  542,  542,  539,  542,  542,  544,  544,  544,  544,
      544,  542,  542,  542,  544,  544,  544,  542,  539,  542,
      544,  544,  542,  542,  544,  544,  542,  544,    0,  539,
      539,  539,  539,  539
  };

static yyconst flex_int16_t yy_nxt[1236] =
  {0,
      10,   11,   12,   13,   14,   15,   16,   17,   18,   19,
      20,   10,   21,   22,   22,   22,   23,   10,   24,   25,
      26,   25,   27,   28,   25,   25,   29,   25,   30,   25,
      31,   25,   32,   25,   25,   33,   34,   35,   25,   25,
      10,   36,   37,   25,   38,   25,   39,   40,   25,   25,
      41,   42,   25,   43,   25,   44,   25,   25,   45,   46,
      47,   25,   25,   48,   49,   10,   11,   12,   50,   14,
      15,   16,   17,   51,   19,   52,   10,   21,   22,   22,
      22,   23,   10,   53,   54,   55,   54,   56,   57,   58,
      54,   59,   54,   60,   54,   61,   62,   63,   54,   54,

      64,   65,   66,   67,   54,   10,   36,   68,   54,   69,
      54,   70,   71,   72,   54,   73,   74,   54,   75,   76,
      77,   54,   54,   78,   79,   80,   81,   54,   48,   49,
      10,   10,   10,   10,   84,   84,   84,   84,   92,   88,
      86,   89,   89,   89,   94,   94,   94,   94,   94,   94,
      90,   94,   82,   82,   94,   94,   94,  105,   94,  143,
      94,   93,   94,   96,   97,   94,  107,  106,  112,  110,
      94,  109,  101,  108,   90,   83,   83,   87,   98,   99,
      100,  102,  111,   94,  104,  103,   94,  113,   94,   94,
      118,  114,  119,  120,   94,  128,  116,   94,  115,   94,

      94,  124,  127,  141,  129,   94,  121,  122,  123,  125,
      94,  131,  117,  126,   84,   84,   94,  157,  209,   94,
      94,   94,   95,  155,   94,  132,  137,   94,  107,   94,
      94,  158,  256,  156,  130,  144,  145,  133,  134,  112,
      142,  138,  135,   94,  150,   94,  146,  139,  136,  167,
      147,  148,  149,  151,   94,   94,   94,  152,  153,   94,
      94,  159,  161,  154,   94,   94,   94,  153,  160,  164,
      157,  162,  185,  165,   94,  168,  163,  169,  172,   94,
      174,  170,  166,  158,   94,  175,   94,   94,  171,   94,
      305,   94,   94,   94,  173,   86,   94,   94,   94,   94,

      92,   94,  176,  177,  201,  201,  201,  182,   94,  110,
      306,  186,  178,   90,  207,  183,  179,  180,  181,  184,
      187,  159,  199,   93,  190,  161,   94,  188,  165,  195,
      132,  168,   87,  189,  206,   94,  191,   90,  163,  192,
      198,  167,  200,  193,  196,  197,   94,   94,   88,  194,
      89,   89,   89,   94,   94,  202,  205,  202,   94,   90,
      203,  203,  203,   94,   94,  211,  212,  208,  210,  213,
      94,   94,   94,  215,   94,   94,   94,   94,   94,   94,
      214,  216,  219,   90,   94,   94,   94,   94,   94,  217,
      220,  224,   94,   94,   94,  221,   94,   94,   94,  225,

      229,  222,  227,  223,  226,   94,   94,   94,   94,   94,
      228,   94,   94,   94,   94,  141,   94,  204,   94,  317,
      94,  529,   94,  529,   94,  231,   94,   94,  318,  233,
      94,   94,  232,  234,  230,  237,  239,  205,  253,  254,
      242,   94,  252,  240,  238,   94,  235,  236,  245,  243,
      251,  255,  142,   94,  241,  221,  258,  259,  261,  246,
      244,  248,  223,  250,  247,   94,  257,  264,  260,  249,
      94,   94,   94,   94,   94,   94,   94,   94,   94,   94,
      262,   94,   94,   94,   94,   94,   94,   94,  263,  265,
      269,  266,   94,   94,   94,  267,   94,   94,   94,  270,

      274,   94,  268,  272,   94,  271,   94,   94,   94,  273,
      275,   94,   94,   94,   94,   94,   94,   94,   94,  307,
      94,  203,  203,  203,  253,  277,  203,  203,  203,  279,
      278,  204,  276,  283,  327,  251,  285,   94,  280,  308,
      281,  282,   94,  286,  289,   94,  284,  287,  288,  222,
      291,   94,  267,  201,  201,  201,  292,  299,   94,  290,
      296,  294,   90,  311,  293,   94,   94,  298,  275,  295,
      244,  309,  300,  301,   94,  314,  302,   94,   94,  320,
      94,  322,   94,  303,  325,   94,   90,   94,  304,  312,
      94,  310,  305,   94,   94,  311,   94,  313,  316,  321,

      315,  323,  319,  328,  326,  307,  309,   94,   94,   94,
      317,  324,   94,  320,  322,   94,  325,   94,   94,  337,
      317,   94,   94,   94,   94,   94,  329,   94,   94,  355,
      311,  305,  391,   94,  307,  298,  306,   94,  302,  304,
      330,  331,  303,  344,  332,  335,  345,  340,  346,  308,
      310,  347,  341,  336,  348,  309,  350,  321,  323,  338,
      326,  333,  334,  327,  351,  339,   94,  342,  343,  324,
      94,   94,  320,  322,   94,  349,   94,   94,   94,  325,
      340,   94,   94,  305,   94,   94,  311,   94,   94,   94,
      307,  354,  357,  358,  361,  309,  352,  353,  356,  360,

      362,   94,  317,   94,  320,  322,   94,  359,  325,   94,
      94,  371,   94,   94,   94,   94,   94,  363,   94,   94,
      94,   94,  379,   94,   94,   94,   94,  347,   94,  344,
      346,  364,  365,  345,  348,  366,   94,  369,  386,  349,
      375,  367,  368,  377,  376,  387,  370,  378,  357,  358,
      372,  361,  360,  388,  373,   94,   94,  389,   94,  400,
      359,  402,  388,  401,  398,  404,   94,   94,  399,  392,
      94,  403,  389,  405,  391,   94,   94,   94,   94,   94,
      390,   94,   94,   94,  397,   94,   94,   94,   94,   94,
      412,   94,   94,  410,  418,   94,  415,  411,  419,   94,

      94,  408,   94,  413,  406,  409,   94,  414,  417,   94,
      94,  416,   94,  420,  418,   94,   94,   94,   94,  407,
      94,   94,   94,   94,   94,   94,   94,  433,  425,   94,
      423,  434,  437,   94,  424,   94,   94,  421,   94,   94,
      426,  422,  435,  415,  427,  436,  429,  438,  428,  442,
      440,  416,  431,  432,  443,   94,   94,   94,   94,  430,
      94,   94,  446,  447,   94,   94,   94,   94,   94,   94,
      94,   94,   94,  456,  444,  445,  457,  450,   94,   94,
      94,  448,  460,  449,  452,  458,   94,  454,  455,  459,
      451,  462,  463,   94,   94,  461,  464,   94,   94,  476,

      478,  442,   94,  480,   94,   94,   94,   94,  453,   94,
      467,  468,   94,  476,  478,  480,   94,   94,  475,  477,
      479,  465,  466,  481,  482,  483,  469,  470,  485,   94,
      488,  473,  472,  486,  471,   94,   94,  484,   94,   94,
      463,   94,   94,  476,  478,  480,   94,   94,   94,  474,
      94,   94,   94,  475,  476,  478,  480,  477,  479,  481,
      482,  483,  492,  493,  494,  495,  496,  497,   94,   94,
      500,  499,   94,  498,   94,  501,   94,  489,   94,   94,
      490,   94,   94,   94,   94,  488,   94,   94,   94,  502,
      491,   94,  512,   94,   94,   94,  492,   94,  493,  494,

      495,  518,   94,   94,   94,   94,   94,   94,   94,  511,
      94,   94,  496,  497,   94,  513,  522,  503,  517,   94,
      516,   94,   94,  501,  528,  519,  523,  525,  504,   94,
      521,  526,  531,   94,   94,  204,  515,  533,   94,   94,
      520,  513,  524,  204,  204,  204,  537,  530,  523,  527,
      204,  519,  535,  526,  204,  537,  538,  514,  532,  510,
      509,  508,  507,  506,  505,  514,  204,  510,  534,  509,
      508,  204,  507,  204,  506,  538,  204,  505,  487,  536,
      85,   85,   91,   91,  140,  140,  487,  204,  204,  441,
      439,   94,  204,  204,  204,  204,  441,  439,   94,  204,

      204,  204,  204,  204,  204,  204,   94,  396,  395,  394,
      393,  385,  384,  383,  382,  381,  380,  374,   94,  396,
      204,  395,  394,  204,  393,  204,  204,  204,  385,  204,
      384,  204,  383,  204,  382,  381,  380,  374,  204,   94,
      94,   94,  297,   94,   94,  204,  297,   94,   94,   94,
      94,   94,  218,   94,   94,   94,   94,  539,   94,   94,
      218,   94,  204,  539,  539,   94,   94,   94,  539,    9,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,

      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539
  };

static yyconst flex_int16_t yy_chk[1236] =
  {0,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    5,    5,    5,    5,    5,
      5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
      5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
      5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

      5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
      5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
      5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
      7,    8,    7,    8,   11,   11,   12,   12,   23,   22,
      13,   22,   22,   22,   28,   30,   39,   32,   29,   24,
      22,   27,    7,    8,   37,   26,   31,   28,   40,  544,
      38,   23,   42,   24,   24,   35,   29,   28,   32,   31,
      33,   30,   26,   29,   22,    7,    8,   13,   24,   24,
      24,   26,   31,   34,   27,   26,   41,   33,   43,   46,
      35,   33,   37,   37,   44,   40,   34,   45,   33,   47,

      58,   38,   39,   50,   40,  100,   37,   37,   37,   38,
      57,   42,   34,   38,   84,   84,   70,   58,  100,  149,
      62,   53,  542,   57,  538,   43,   46,   55,   41,   72,
      56,   58,  149,   57,   41,   53,   53,   43,   45,   44,
      50,   46,   45,   59,   55,   60,   53,   47,   45,   62,
      53,   53,   53,   55,   63,   66,   61,   55,   56,   67,
      64,   59,   60,   56,   68,   65,   69,   70,   59,   61,
      72,   60,   70,   61,   71,   63,   60,   64,   65,   73,
      66,   64,   61,   72,   74,   67,   77,   75,   64,   76,
      211,   81,   79,   83,   65,   85,   82,   80,   78,   98,

      91,  537,   68,   68,   88,   88,   88,   69,   97,   82,
      211,   71,   68,   88,   98,   69,   68,   68,   68,   69,
      71,   73,   82,   91,   75,   74,   96,   73,   75,   79,
      83,   77,   85,   74,   97,  102,   75,   88,   74,   78,
      81,   76,   83,   78,   79,   80,   99,  101,   89,   78,
      89,   89,   89,  104,  103,   90,   96,   90,  105,   89,
      90,   90,   90,  106,  108,  102,  102,   99,  101,  103,
      110,  109,  111,  105,  114,  115,  113,  116,  117,  118,
      104,  105,  108,   89,  119,  120,  121,  122,  124,  106,
      109,  113,  123,  125,  127,  110,  126,  128,  130,  114,

      118,  111,  116,  111,  115,  129,  131,  132,  133,  134,
      117,  135,  136,  137,  138,  140,  145,  529,  139,  220,
      144,  526,  146,  523,  147,  121,  151,  519,  220,  123,
      148,  154,  122,  124,  120,  126,  128,  119,  146,  147,
      130,  156,  145,  128,  127,  150,  125,  125,  134,  131,
      144,  148,  140,  152,  129,  132,  151,  151,  154,  135,
      133,  137,  133,  139,  136,  155,  150,  156,  152,  138,
      164,  160,  162,  166,  170,  169,  171,  173,  172,  174,
      155,  175,  176,  177,  178,  180,  179,  183,  155,  160,
      169,  162,  181,  182,  184,  164,  185,  186,  187,  170,

      174,  189,  166,  172,  190,  171,  188,  191,  193,  173,
      175,  192,  194,  195,  196,  197,  198,  228,  200,  212,
      199,  202,  202,  202,  178,  179,  203,  203,  203,  181,
      180,  514,  177,  184,  228,  176,  186,  206,  182,  212,
      183,  183,  207,  186,  189,  216,  185,  187,  188,  199,
      192,  208,  190,  201,  201,  201,  193,  207,  209,  191,
      197,  195,  201,  214,  194,  210,  215,  206,  198,  196,
      200,  213,  207,  207,  217,  216,  208,  219,  222,  224,
      226,  225,  230,  209,  227,  229,  201,  231,  210,  214,
      232,  213,  235,  234,  233,  238,  241,  215,  219,  224,

      217,  225,  222,  229,  227,  236,  237,  239,  242,  240,
      243,  226,  244,  245,  246,  247,  248,  252,  255,  243,
      266,  256,  249,  250,  318,  257,  231,  276,  513,  266,
      261,  258,  318,  262,  259,  230,  235,  254,  232,  234,
      231,  231,  233,  255,  238,  241,  256,  252,  257,  236,
      237,  258,  254,  242,  259,  260,  261,  245,  246,  244,
      248,  239,  240,  249,  262,  250,  263,  254,  254,  247,
      265,  264,  269,  270,  268,  260,  271,  273,  277,  272,
      276,  278,  274,  281,  280,  279,  284,  285,  287,  286,
      282,  265,  269,  270,  273,  283,  263,  264,  268,  272,

      274,  288,  289,  290,  291,  292,  293,  271,  294,  301,
      295,  289,  296,  312,  299,  329,  333,  277,  330,  313,
      335,  334,  301,  332,  331,  336,  300,  281,  315,  278,
      280,  277,  277,  279,  282,  284,  314,  287,  312,  283,
      299,  285,  286,  300,  299,  313,  288,  300,  291,  292,
      290,  295,  294,  314,  296,  316,  319,  315,  328,  330,
      293,  331,  334,  330,  329,  333,  337,  338,  329,  319,
      339,  332,  335,  336,  337,  341,  342,  343,  350,  352,
      316,  351,  353,  354,  328,  356,  355,  362,  363,  364,
      343,  365,  366,  342,  355,  367,  352,  342,  356,  369,

      370,  341,  368,  350,  338,  341,  371,  351,  354,  372,
      373,  353,  376,  362,  371,  386,  377,  378,  387,  339,
      379,  398,  375,  399,  400,  397,  392,  376,  365,  390,
      364,  377,  386,  401,  364,  402,  403,  363,  404,  405,
      366,  363,  378,  368,  367,  379,  372,  387,  370,  392,
      390,  369,  375,  375,  397,  406,  407,  408,  409,  373,
      411,  410,  399,  400,  412,  413,  414,  420,  421,  419,
      417,  422,  423,  409,  398,  398,  410,  403,  424,  425,
      427,  401,  413,  402,  405,  411,  428,  408,  408,  412,
      404,  417,  419,  426,  429,  414,  420,  430,  431,  432,

      433,  406,  440,  434,  435,  436,  443,  438,  407,  444,
      422,  423,  437,  445,  446,  447,  448,  449,  431,  432,
      433,  421,  421,  434,  435,  436,  424,  425,  438,  450,
      443,  428,  427,  440,  426,  451,  452,  437,  453,  462,
      429,  471,  454,  455,  456,  457,  458,  459,  460,  430,
      461,  464,  465,  444,  466,  467,  468,  445,  446,  447,
      448,  449,  454,  455,  456,  457,  458,  459,  469,  470,
      462,  461,  472,  460,  473,  464,  474,  450,  484,  485,
      451,  486,  489,  490,  491,  453,  502,  498,  499,  471,
      452,  500,  485,  503,  504,  511,  465,  515,  466,  467,

      468,  499,  516,  512,  520,  534,  517,  521,  518,  484,
      524,  522,  469,  470,  528,  486,  511,  472,  498,  525,
      490,  527,  530,  474,  522,  500,  512,  517,  473,  531,
      503,  518,  525,  532,  536,  510,  489,  528,  533,  535,
      502,  491,  515,  509,  508,  507,  534,  524,  516,  520,
      506,  504,  531,  521,  505,  533,  535,  501,  527,  497,
      496,  495,  494,  493,  492,  488,  487,  483,  530,  482,
      481,  480,  479,  478,  477,  536,  476,  475,  463,  532,
      540,  540,  541,  541,  543,  543,  442,  441,  439,  418,
      416,  415,  396,  395,  394,  393,  391,  389,  388,  385,

      384,  383,  382,  381,  380,  374,  361,  360,  359,  358,
      357,  349,  348,  347,  346,  345,  344,  340,  327,  326,
      325,  324,  323,  322,  321,  320,  317,  311,  310,  309,
      308,  307,  306,  305,  304,  303,  302,  298,  297,  275,
      267,  253,  251,  223,  221,  218,  205,  168,  167,  165,
      163,  161,  159,  158,  157,  153,  143,  142,  141,  112,
      107,   95,   94,   93,   87,   86,   54,   25,    9,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,

      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539,  539,  539,  539,  539,  539,
      539,  539,  539,  539,  539
  };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "CEvaluationLexer.lpp"
/* scanner for kinetic functions */

#line 12 "CEvaluationLexer.lpp"
#include <vector>

#include "copasi.h"
#include "CEvaluationNode.h"
#include "CEvaluationLexer.h"
#include "CEvaluationParser_yacc.h"

#ifndef YYERRCODE
#define YYERRCODE 256
#endif

#define YY_USER_INIT \
  mpNode = NULL;\
  mPosition = 0;\
  mpNodeList = new std::vector< CEvaluationNode * >;

#define COMMON_ACTION \
  mPosition += yyleng;\
  mpNodeList->push_back(mpNode);

#line 885 "CEvaluationLexer_lex.cpp"

#define INITIAL 0
#define sSIGN 1
#define sOPERATOR 2
#define sID 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy(char *, yyconst char *, int);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *);
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput(yytext, yyleng)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
  \
  if ((result = LexerInput((char *) buf, max_size )) < 0 ) \
    YY_FATAL_ERROR("input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError(msg)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
  YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
  register yy_state_type yy_current_state;
  register char *yy_cp, *yy_bp;
  register int yy_act;

#line 37 "CEvaluationLexer.lpp"

#line 990 "CEvaluationLexer_lex.cpp"

  if (!(yy_init))
    {
      (yy_init) = 1;

#ifdef YY_USER_INIT
      YY_USER_INIT;
#endif

      if (!(yy_start))
        (yy_start) = 1; /* first start state */

      if (! yyin)
        yyin = & std::cin;

      if (! yyout)
        yyout = & std::cout;

      if (! YY_CURRENT_BUFFER)
        {
          yyensure_buffer_stack();
          YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin, YY_BUF_SIZE);
        }

      yy_load_buffer_state();
    }

  while (1)      /* loops until end-of-file is reached */
    {
      yy_cp = (yy_c_buf_p);

      /* Support of yytext. */
      *yy_cp = (yy_hold_char);

      /* yy_bp points to the position in yy_ch_buf of the start of
       * the current run.
       */
      yy_bp = yy_cp;

      yy_current_state = (yy_start);
yy_match:

      do
        {
          register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];

          if (yy_accept[yy_current_state])
            {
              (yy_last_accepting_state) = yy_current_state;
              (yy_last_accepting_cpos) = yy_cp;
            }

          while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
            {
              yy_current_state = (int) yy_def[yy_current_state];

              if (yy_current_state >= 540)
                yy_c = yy_meta[(unsigned int) yy_c];
            }

          yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
          ++yy_cp;
        }
      while (yy_current_state != 539);

      yy_cp = (yy_last_accepting_cpos);
      yy_current_state = (yy_last_accepting_state);

yy_find_action:
      yy_act = yy_accept[yy_current_state];

      YY_DO_BEFORE_ACTION;

do_action:  /* This label is used only to access EOF actions. */

      switch (yy_act)
        {/* beginning of action switch */
          case 0: /* must back up */
            /* undo the effects of YY_DO_BEFORE_ACTION */
            *yy_cp = (yy_hold_char);
            yy_cp = (yy_last_accepting_cpos);
            yy_current_state = (yy_last_accepting_state);
            goto yy_find_action;

          case 1:
            YY_RULE_SETUP
#line 38 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeNumber(CEvaluationNodeNumber::DOUBLE,
                                               yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 2:
            YY_RULE_SETUP
#line 46 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::EXPONENTIALE,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 3:
            YY_RULE_SETUP
#line 54 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::PI,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 4:
            YY_RULE_SETUP
#line 62 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::TRUE,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_VALUE;

            YY_BREAK
          case 5:
            YY_RULE_SETUP
#line 70 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::FALSE,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_VALUE;

            YY_BREAK
          case 6:
            YY_RULE_SETUP
#line 78 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::_INFINITY,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 7:
            YY_RULE_SETUP
#line 86 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::_NaN,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 8:
            YY_RULE_SETUP
#line 94 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::NOT,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_NOT;

            YY_BREAK
          case 9:
            YY_RULE_SETUP
#line 102 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::LE,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_LE;

            YY_BREAK
          case 10:
            YY_RULE_SETUP
#line 110 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::LT,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_LT;

            YY_BREAK
          case 11:
            YY_RULE_SETUP
#line 118 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::GE,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_GE;

            YY_BREAK
          case 12:
            YY_RULE_SETUP
#line 126 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::GT,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_GT;

            YY_BREAK
          case 13:
            YY_RULE_SETUP
#line 134 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::NE,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_NE;

            YY_BREAK
          case 14:
            YY_RULE_SETUP
#line 142 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::EQ,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_EQ;

            YY_BREAK
          case 15:
            YY_RULE_SETUP
#line 150 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::AND,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_AND;

            YY_BREAK
          case 16:
            YY_RULE_SETUP
#line 158 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::XOR,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_XOR;

            YY_BREAK
          case 17:
            YY_RULE_SETUP
#line 166 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::OR,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_OR;

            YY_BREAK
          case 18:
            /* rule 18 can match eol */
            YY_RULE_SETUP
#line 174 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeObject(CEvaluationNodeObject::CN,
                                               yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 19:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 182 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::LOG,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 20:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 190 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::LOG10,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 21:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 198 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::EXP,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 22:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 206 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SIN,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 23:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 214 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 24:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 222 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::TAN,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 25:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 230 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SEC,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 26:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 238 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CSC,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 27:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 246 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COT,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 28:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 254 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SINH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 29:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 262 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COSH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 30:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 270 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::TANH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 31:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 278 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SECH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 32:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 286 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CSCH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 33:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 294 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COTH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 34:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 302 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSIN,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 35:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 310 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 36:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 318 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCTAN,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 37:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 326 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSEC,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 38:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 334 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCSC,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 39:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 342 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOT,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 40:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 350 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSINH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 41:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 358 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOSH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 42:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 366 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCTANH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 43:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 374 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSECH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 44:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 382 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCSCH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 45:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 390 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOTH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 46:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 398 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SQRT,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 47:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 406 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ABS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 48:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 414 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::FLOOR,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 49:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 422 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CEIL,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 50:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 430 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::FACTORIAL,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 51:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 438 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::RUNIFORM,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION_2;

            YY_BREAK
          case 52:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 446 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::RNORMAL,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION_2;

            YY_BREAK
          case 53:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 454 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeChoice(CEvaluationNodeChoice::IF,
                                               yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_CHOICE;

            YY_BREAK
          case 54:
            /* rule 54 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 462 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            {
              std::string tmp(yytext);
              mpNode = new CEvaluationNodeCall(CEvaluationNodeCall::EXPRESSION,
                                               tmp.substr(0, tmp.length() - 1));
            }
            COMMON_ACTION;
            return TOKEN_CALL;

            YY_BREAK
          case 55:
            /* rule 55 can match eol */
            YY_RULE_SETUP
#line 473 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            {
              std::string tmp(yytext);
              mpNode = new CEvaluationNodeCall(CEvaluationNodeCall::FUNCTION,
                                               tmp.substr(0, tmp.length() - 1));
            }
            COMMON_ACTION;
            return TOKEN_CALL;

            YY_BREAK
          case 56:
            YY_RULE_SETUP
#line 484 "CEvaluationLexer.lpp"

            BEGIN(sID);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::MINUS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_SIGN;

            YY_BREAK
          case 57:
            YY_RULE_SETUP
#line 492 "CEvaluationLexer.lpp"

            BEGIN(sID);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::PLUS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_SIGN;

            YY_BREAK
          case 58:
            YY_RULE_SETUP
#line 500 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::POWER,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_OPERATOR_POWER;

            YY_BREAK
          case 59:
            YY_RULE_SETUP
#line 508 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MULTIPLY,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_OPERATOR_MULTIPLY;

            YY_BREAK
          case 60:
            YY_RULE_SETUP
#line 516 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::DIVIDE,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_OPERATOR_MULTIPLY;

            YY_BREAK
          case 61:
            YY_RULE_SETUP
#line 524 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MODULUS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_OPERATOR_MODULUS;

            YY_BREAK
          case 62:
            YY_RULE_SETUP
#line 532 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::PLUS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_OPERATOR_PLUS;

            YY_BREAK
          case 63:
            YY_RULE_SETUP
#line 540 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MINUS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_OPERATOR_PLUS;

            YY_BREAK
          case 64:
            YY_RULE_SETUP
#line 548 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mPosition += yyleng;
            // mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::OPEN,
            //                                       yytext);
            // COMMON_ACTION;
            return TOKEN_STRUCTURE_OPEN;

            YY_BREAK
          case 65:
            YY_RULE_SETUP
#line 557 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mPosition += yyleng;
            // mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::VECTOR_OPEN,
            //                                       yytext);
            // COMMON_ACTION;
            return TOKEN_STRUCTURE_VECTOR_OPEN;

            YY_BREAK
          case 66:
            YY_RULE_SETUP
#line 566 "CEvaluationLexer.lpp"

            BEGIN(sSIGN);
            mPosition += yyleng;
            // mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::COMMA,
            //                                       yytext);
            // COMMON_ACTION;
            return TOKEN_STRUCTURE_COMMA;

            YY_BREAK
          case 67:
            YY_RULE_SETUP
#line 575 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mPosition += yyleng;
            // mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::CLOSE,
            //                                       yytext);
            // COMMON_ACTION;
            return TOKEN_STRUCTURE_CLOSE;

            YY_BREAK
          case 68:
            YY_RULE_SETUP
#line 584 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mPosition += yyleng;
            // mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::VECTOR_CLOSE,
            //                                       yytext);
            // COMMON_ACTION;
            return TOKEN_STRUCTURE_VECTOR_CLOSE;

            YY_BREAK
          case 69:
            /* rule 69 can match eol */
            YY_RULE_SETUP
#line 593 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeVariable(CEvaluationNodeVariable::ANY,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_VARIABLE;

            YY_BREAK
          case 70:
            /* rule 70 can match eol */
            YY_RULE_SETUP
#line 601 "CEvaluationLexer.lpp"

            mPosition += yyleng;
            // mpNode = new CEvaluationNodeWhiteSpace(CEvaluationNodeWhiteSpace::ANY,
            //                                        yytext);
            // COMMON_ACTION;

            YY_BREAK
          case YY_STATE_EOF(INITIAL):
          case YY_STATE_EOF(sSIGN):
          case YY_STATE_EOF(sOPERATOR):
          case YY_STATE_EOF(sID):
#line 608 "CEvaluationLexer.lpp"
            return 0;
            YY_BREAK
          case 71:
            YY_RULE_SETUP
#line 610 "CEvaluationLexer.lpp"

            CCopasiMessage(CCopasiMessage::ERROR, MCFunction + 2, mPosition);
            return YYERRCODE;

            YY_BREAK
          case 72:
            YY_RULE_SETUP
#line 615 "CEvaluationLexer.lpp"
            ECHO;
            YY_BREAK
#line 1982 "CEvaluationLexer_lex.cpp"

          case YY_END_OF_BUFFER:
          {
            /* Amount of text matched not including the EOB char. */
            int yy_amount_of_matched_text = (int)(yy_cp - (yytext_ptr)) - 1;

            /* Undo the effects of YY_DO_BEFORE_ACTION. */
            *yy_cp = (yy_hold_char);
            YY_RESTORE_YY_MORE_OFFSET

            if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW)
              {
                /* We're scanning a new file or input source.  It's
                 * possible that this happened because the user
                 * just pointed yyin at a new source and called
                 * yylex().  If so, then we have to assure
                 * consistency between YY_CURRENT_BUFFER and our
                 * globals.  Here is the right place to do so, because
                 * this is the first action (other than possibly a
                 * back-up) that will match for the new input source.
                 */
                (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
                YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
                YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
              }

            /* Note that here we test for yy_c_buf_p "<=" to the position
             * of the first EOB in the buffer, since yy_c_buf_p will
             * already have been incremented past the NUL character
             * (since all states make transitions on EOB to the
             * end-of-buffer state).  Contrast this with the test
             * in input().
             */
            if ((yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
              {/* This was really a NUL. */
                yy_state_type yy_next_state;

                (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                /* Okay, we're now positioned to make the NUL
                 * transition.  We couldn't have
                 * yy_get_previous_state() go ahead and do it
                 * for us because it doesn't know how to deal
                 * with the possibility of jamming (and we don't
                 * want to build jamming into it because then it
                 * will run more slowly).
                 */

                yy_next_state = yy_try_NUL_trans(yy_current_state);

                yy_bp = (yytext_ptr) + YY_MORE_ADJ;

                if (yy_next_state)
                  {
                    /* Consume the NUL. */
                    yy_cp = ++(yy_c_buf_p);
                    yy_current_state = yy_next_state;
                    goto yy_match;
                  }

                else
                  {
                    yy_cp = (yy_last_accepting_cpos);
                    yy_current_state = (yy_last_accepting_state);
                    goto yy_find_action;
                  }
              }

            else switch (yy_get_next_buffer())
                {
                  case EOB_ACT_END_OF_FILE:
                  {
                    (yy_did_buffer_switch_on_eof) = 0;

                    if (yywrap())
                      {
                        /* Note: because we've taken care in
                         * yy_get_next_buffer() to have set up
                         * yytext, we can now set up
                         * yy_c_buf_p so that if some total
                         * hoser (like flex itself) wants to
                         * call the scanner after we return the
                         * YY_NULL, it'll still work - another
                         * YY_NULL will get returned.
                         */
                        (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                        yy_act = YY_STATE_EOF(YY_START);
                        goto do_action;
                      }

                    else
                      {
                        if (!(yy_did_buffer_switch_on_eof))
                          YY_NEW_FILE;
                      }

                    break;
                  }

                  case EOB_ACT_CONTINUE_SCAN:
                    (yy_c_buf_p) =
                      (yytext_ptr) + yy_amount_of_matched_text;

                    yy_current_state = yy_get_previous_state();

                    yy_cp = (yy_c_buf_p);
                    yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                    goto yy_match;

                  case EOB_ACT_LAST_MATCH:
                    (yy_c_buf_p) =
                      &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                    yy_current_state = yy_get_previous_state();

                    yy_cp = (yy_c_buf_p);
                    yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                    goto yy_find_action;
                }

            break;
          }

          default:
            YY_FATAL_ERROR(
              "fatal flex scanner internal error--no action found");
        } /* end of action switch */
    } /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer(std::istream* arg_yyin, std::ostream* arg_yyout)
{
  yyin = arg_yyin;
  yyout = arg_yyout;
  yy_c_buf_p = 0;
  yy_init = 0;
  yy_start = 0;
  yy_flex_debug = 0;
  yylineno = 1; // this will only get updated if %option yylineno

  yy_did_buffer_switch_on_eof = 0;

  yy_looking_for_trail_begin = 0;
  yy_more_flag = 0;
  yy_more_len = 0;
  yy_more_offset = yy_prev_more_offset = 0;

  yy_start_stack_ptr = yy_start_stack_depth = 0;
  yy_start_stack = NULL;

  (yy_buffer_stack) = 0;
  (yy_buffer_stack_top) = 0;
  (yy_buffer_stack_max) = 0;

  yy_state_buf = 0;
}

yyFlexLexer::~yyFlexLexer()
{
  delete [] yy_state_buf;
  CEvaluationfree(yy_start_stack);
  yy_delete_buffer(YY_CURRENT_BUFFER);
}

void yyFlexLexer::switch_streams(std::istream* new_in, std::ostream* new_out)
{
  if (new_in)
    {
      yy_delete_buffer(YY_CURRENT_BUFFER);
      yy_switch_to_buffer(yy_create_buffer(new_in, YY_BUF_SIZE));
    }

  if (new_out)
    yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput(char* buf, int /* max_size */)
#else
int yyFlexLexer::LexerInput(char* buf, int max_size)
#endif
{

  if (yyin->eof() || yyin->fail())
    return 0;

#ifdef YY_INTERACTIVE
  yyin->get(buf[0]);

  if (yyin->eof())
    return 0;

  if (yyin->bad())
    return -1;

  return 1;

#else
  (void) yyin->read(buf, max_size);

  if (yyin->bad())
    return -1;
  else
    return yyin->gcount();

#endif
}

void yyFlexLexer::LexerOutput(const char* buf, int size)
{
  (void) yyout->write(buf, size);
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *  EOB_ACT_LAST_MATCH -
 *  EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *  EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
  register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
  register char *source = (yytext_ptr);
  register int number_to_move, i;
  int ret_val;

  if ((yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1])
    YY_FATAL_ERROR(
      "fatal flex scanner internal error--end of buffer missed");

  if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0)
    {/* Don't try to fill the buffer, so this is an EOF. */
      if ((yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1)
        {
          /* We matched a single character, the EOB, so
           * treat this as a final EOF.
           */
          return EOB_ACT_END_OF_FILE;
        }

      else
        {
          /* We matched some text prior to the EOB, first
           * process it.
           */
          return EOB_ACT_LAST_MATCH;
        }
    }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int)((yy_c_buf_p) - (yytext_ptr)) - 1;

  for (i = 0; i < number_to_move; ++i)
    *(dest++) = *(source++);

  if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

  else
    {
      int num_to_read =
        YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

      while (num_to_read <= 0)
        {/* Not enough room in the buffer - grow it. */

          /* just a shorter name for the current buffer */
          YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

          int yy_c_buf_p_offset =
            (int)((yy_c_buf_p) - b->yy_ch_buf);

          if (b->yy_is_our_buffer)
            {
              int new_size = b->yy_buf_size * 2;

              if (new_size <= 0)
                b->yy_buf_size += b->yy_buf_size / 8;
              else
                b->yy_buf_size *= 2;

              b->yy_ch_buf = (char *)
                             /* Include room in for 2 EOB chars. */
                             CEvaluationrealloc((void *) b->yy_ch_buf, b->yy_buf_size + 2);
            }
          else
            /* Can't grow it, we don't own it. */
            b->yy_ch_buf = 0;

          if (! b->yy_ch_buf)
            YY_FATAL_ERROR(
              "fatal error - scanner input buffer overflow");

          (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

          num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
                        number_to_move - 1;
        }

      if (num_to_read > YY_READ_BUF_SIZE)
        num_to_read = YY_READ_BUF_SIZE;

      /* Read in more data. */
      YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
               (yy_n_chars), num_to_read);

      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

  if ((yy_n_chars) == 0)
    {
      if (number_to_move == YY_MORE_ADJ)
        {
          ret_val = EOB_ACT_END_OF_FILE;
          yyrestart(yyin);
        }

      else
        {
          ret_val = EOB_ACT_LAST_MATCH;
          YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
            YY_BUFFER_EOF_PENDING;
        }
    }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  (yy_n_chars) += number_to_move;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

  (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
{
  register yy_state_type yy_current_state;
  register char *yy_cp;

  yy_current_state = (yy_start);

  for (yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp)
    {
      register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);

      if (yy_accept[yy_current_state])
        {
          (yy_last_accepting_state) = yy_current_state;
          (yy_last_accepting_cpos) = yy_cp;
        }

      while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
        {
          yy_current_state = (int) yy_def[yy_current_state];

          if (yy_current_state >= 540)
            yy_c = yy_meta[(unsigned int) yy_c];
        }

      yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *  next_state = yy_try_NUL_trans(current_state );
 */
yy_state_type yyFlexLexer::yy_try_NUL_trans(yy_state_type yy_current_state)
{
  register int yy_is_jam;
  register char *yy_cp = (yy_c_buf_p);

  register YY_CHAR yy_c = 1;

  if (yy_accept[yy_current_state])
    {
      (yy_last_accepting_state) = yy_current_state;
      (yy_last_accepting_cpos) = yy_cp;
    }

  while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
    {
      yy_current_state = (int) yy_def[yy_current_state];

      if (yy_current_state >= 540)
        yy_c = yy_meta[(unsigned int) yy_c];
    }

  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
  yy_is_jam = (yy_current_state == 539);

  return yy_is_jam ? 0 : yy_current_state;
}

void yyFlexLexer::yyunput(int c, register char* yy_bp)
{
  register char *yy_cp;

  yy_cp = (yy_c_buf_p);

  /* undo effects of setting up yytext */
  *yy_cp = (yy_hold_char);

  if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2)
    {/* need to shift things up to make room */
      /* +2 for EOB chars. */
      register int number_to_move = (yy_n_chars) + 2;
      register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
                              YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
      register char *source =
        &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

      while (source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
        *--dest = *--source;

      yy_cp += (int)(dest - source);
      yy_bp += (int)(dest - source);
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
        (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

      if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2)
        YY_FATAL_ERROR("flex scanner push-back overflow");
    }

  *--yy_cp = (char) c;

  (yytext_ptr) = yy_bp;
  (yy_hold_char) = *yy_cp;
  (yy_c_buf_p) = yy_cp;
}

int yyFlexLexer::yyinput()
{
  int c;

  *(yy_c_buf_p) = (yy_hold_char);

  if (*(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR)
    {
      /* yy_c_buf_p now points to the character we want to return.
       * If this occurs *before* the EOB characters, then it's a
       * valid NUL; if not, then we've hit the end of the buffer.
       */
      if ((yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
        /* This was really a NUL. */
        *(yy_c_buf_p) = '\0';

      else
        {/* need more input */
          int offset = (yy_c_buf_p) - (yytext_ptr);
          ++(yy_c_buf_p);

          switch (yy_get_next_buffer())
            {
              case EOB_ACT_LAST_MATCH:
                /* This happens because yy_g_n_b()
                 * sees that we've accumulated a
                 * token and flags that we need to
                 * try matching the token before
                 * proceeding.  But for input(),
                 * there's no matching to consider.
                 * So convert the EOB_ACT_LAST_MATCH
                 * to EOB_ACT_END_OF_FILE.
                 */

                /* Reset buffer status. */
                yyrestart(yyin);

                /*FALLTHROUGH*/

              case EOB_ACT_END_OF_FILE:
              {
                if (yywrap())
                  return 0;

                if (!(yy_did_buffer_switch_on_eof))
                  YY_NEW_FILE;

#ifdef __cplusplus
                return yyinput();
#else
                return input();
#endif
              }

              case EOB_ACT_CONTINUE_SCAN:
                (yy_c_buf_p) = (yytext_ptr) + offset;
                break;
            }
        }
    }

  c = *(unsigned char *)(yy_c_buf_p);   /* cast for 8-bit char's */
  *(yy_c_buf_p) = '\0'; /* preserve yytext */
  (yy_hold_char) = *++(yy_c_buf_p);

  return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart(std::istream* input_file)
{

  if (! YY_CURRENT_BUFFER)
    {
      yyensure_buffer_stack();
      YY_CURRENT_BUFFER_LVALUE =
        yy_create_buffer(yyin, YY_BUF_SIZE);
    }

  yy_init_buffer(YY_CURRENT_BUFFER, input_file);
  yy_load_buffer_state();
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yyFlexLexer::yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
{

  /* TODO. We should be able to replace this entire function body
   * with
   *    yypop_buffer_state();
   *    yypush_buffer_state(new_buffer);
     */
  yyensure_buffer_stack();

  if (YY_CURRENT_BUFFER == new_buffer)
    return;

  if (YY_CURRENT_BUFFER)
    {
      /* Flush out information for old buffer. */
      *(yy_c_buf_p) = (yy_hold_char);
      YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

  YY_CURRENT_BUFFER_LVALUE = new_buffer;
  yy_load_buffer_state();

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  (yy_did_buffer_switch_on_eof) = 1;
}

void yyFlexLexer::yy_load_buffer_state()
{
  (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
  (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
  yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
  (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yyFlexLexer::yy_create_buffer(std::istream* file, int size)
{
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE) CEvaluationalloc(sizeof(struct yy_buffer_state));

  if (! b)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *) CEvaluationalloc(b->yy_buf_size + 2);

  if (! b->yy_ch_buf)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  yy_init_buffer(b, file);

  return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yyFlexLexer::yy_delete_buffer(YY_BUFFER_STATE b)
{

  if (! b)
    return;

  if (b == YY_CURRENT_BUFFER)   /* Not sure if we should pop here. */
    YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

  if (b->yy_is_our_buffer)
    CEvaluationfree((void *) b->yy_ch_buf);

  CEvaluationfree((void *) b);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
void yyFlexLexer::yy_init_buffer(YY_BUFFER_STATE b, std::istream* file)

{
  int oerrno = errno;

  yy_flush_buffer(b);

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

  /* If b is the current buffer, then yy_init_buffer was _probably_
   * called from yyrestart() or through yy_get_next_buffer.
   * In that case, we don't want to reset the lineno or column.
   */
  if (b != YY_CURRENT_BUFFER)
    {
      b->yy_bs_lineno = 1;
      b->yy_bs_column = 0;
    }

  b->yy_is_interactive = 0;
  errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yyFlexLexer::yy_flush_buffer(YY_BUFFER_STATE b)
{
  if (! b)
    return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == YY_CURRENT_BUFFER)
    yy_load_buffer_state();
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yyFlexLexer::yypush_buffer_state(YY_BUFFER_STATE new_buffer)
{
  if (new_buffer == NULL)
    return;

  yyensure_buffer_stack();

  /* This block is copied from yy_switch_to_buffer. */
  if (YY_CURRENT_BUFFER)
    {
      /* Flush out information for old buffer. */
      *(yy_c_buf_p) = (yy_hold_char);
      YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

  /* Only push if top exists. Otherwise, replace top. */
  if (YY_CURRENT_BUFFER)
    (yy_buffer_stack_top)++;

  YY_CURRENT_BUFFER_LVALUE = new_buffer;

  /* copied from yy_switch_to_buffer. */
  yy_load_buffer_state();
  (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yyFlexLexer::yypop_buffer_state(void)
{
  if (!YY_CURRENT_BUFFER)
    return;

  yy_delete_buffer(YY_CURRENT_BUFFER);
  YY_CURRENT_BUFFER_LVALUE = NULL;

  if ((yy_buffer_stack_top) > 0)
    --(yy_buffer_stack_top);

  if (YY_CURRENT_BUFFER)
    {
      yy_load_buffer_state();
      (yy_did_buffer_switch_on_eof) = 1;
    }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
  int num_to_alloc;

  if (!(yy_buffer_stack))
    {

      /* First allocation is just for 2 elements, since we don't know if this
       * scanner will even need a stack. We use 2 instead of 1 to avoid an
       * immediate realloc on the next call.
           */
      num_to_alloc = 1;
      (yy_buffer_stack) = (struct yy_buffer_state**)CEvaluationalloc
                          (num_to_alloc * sizeof(struct yy_buffer_state*)
                          );

      memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

      (yy_buffer_stack_max) = num_to_alloc;
      (yy_buffer_stack_top) = 0;
      return;
    }

  if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1)
    {

      /* Increase the buffer to prepare for a possible push. */
      int grow_size = 8 /* arbitrary grow size */;

      num_to_alloc = (yy_buffer_stack_max) + grow_size;
      (yy_buffer_stack) = (struct yy_buffer_state**)CEvaluationrealloc
                          ((yy_buffer_stack),
                           num_to_alloc * sizeof(struct yy_buffer_state*)
                          );

      /* zero only the new slots.*/
      memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
      (yy_buffer_stack_max) = num_to_alloc;
    }
}

void yyFlexLexer::yy_push_state(int new_state)
{
  if ((yy_start_stack_ptr) >= (yy_start_stack_depth))
    {
      yy_size_t new_size;

      (yy_start_stack_depth) += YY_START_STACK_INCR;
      new_size = (yy_start_stack_depth) * sizeof(int);

      if (!(yy_start_stack))
        (yy_start_stack) = (int *) CEvaluationalloc(new_size);

      else
        (yy_start_stack) = (int *) CEvaluationrealloc((void *)(yy_start_stack), new_size);

      if (!(yy_start_stack))
        YY_FATAL_ERROR(
          "out of memory expanding start-condition stack");
    }

  (yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

  BEGIN(new_state);
}

void yyFlexLexer::yy_pop_state()
{
  if (--(yy_start_stack_ptr) < 0)
    YY_FATAL_ERROR("start-condition stack underflow");

  BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

int yyFlexLexer::yy_top_state()
{
  return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError(yyconst char msg[])
{
  std::cerr << msg << std::endl;
  exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
  do \
    {\
      /* Undo effects of setting up yytext. */ \
      int yyless_macro_arg = (n); \
      YY_LESS_LINENO(yyless_macro_arg);\
      yytext[yyleng] = (yy_hold_char); \
      (yy_c_buf_p) = yytext + yyless_macro_arg; \
      (yy_hold_char) = *(yy_c_buf_p); \
      *(yy_c_buf_p) = '\0'; \
      yyleng = yyless_macro_arg; \
    } \
  while (0)

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char* s1, yyconst char * s2, int n)
{
  register int i;

  for (i = 0; i < n; ++i)
    s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char * s)
{
  register int n;

  for (n = 0; s[n]; ++n)
    ;

  return n;
}
#endif

void *CEvaluationalloc(yy_size_t  size)
{
  return (void *) malloc(size);
}

void *CEvaluationrealloc(void * ptr, yy_size_t  size)
{
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return (void *) realloc((char *) ptr, size);
}

void CEvaluationfree(void * ptr)
{
  free((char *) ptr);    /* see CEvaluationrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 615 "CEvaluationLexer.lpp"
