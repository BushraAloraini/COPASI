// Copyright (C) 2010 - 2016 by Pedro Mendes, Virginia Tech Intellectual
// Properties, Inc., University of Heidelberg, and The University
// of Manchester.
// All rights reserved.

// Copyright (C) 2008 - 2009 by Pedro Mendes, Virginia Tech Intellectual
// Properties, Inc., EML Research, gGmbH, University of Heidelberg,
// and The University of Manchester.
// All rights reserved.

// Copyright (C) 2005 - 2007 by Pedro Mendes, Virginia Tech Intellectual
// Properties, Inc. and EML Research, gGmbH.
// All rights reserved.

#line 3 "<stdout>"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* The c++ scanner is a mess. The FlexLexer.h header file relies on the
 * following macro. This is required in order to pass the c++-multiple-scanners
 * test in the regression suite. We get reports that it breaks inheritance.
 * We will address this in a future release of flex, or omit the C++ scanner
 * altogether.
 */
#define yyFlexLexer CEvaluationFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstdio>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif  /* defined (__STDC__) */
#endif  /* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
  do \
    {\
    /* Undo effects of setting up yytext. */ \
    int yyless_macro_arg = (n); \
    YY_LESS_LINENO(yyless_macro_arg);\
    *yy_cp = (yy_hold_char); \
    YY_RESTORE_YY_MORE_OFFSET \
    (yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
    YY_DO_BEFORE_ACTION; /* set up yytext again */ \
  } \
  while (0)

#define unput(c) yyunput(c, (yytext_ptr))

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{

std::istream* yy_input_file;

char *yy_ch_buf;    /* input buffer */
char *yy_buf_pos;   /* current position in input buffer */

/* Size of input buffer in bytes, not including room for EOB
 * characters.
 */
yy_size_t yy_buf_size;

/* Number of characters read into yy_ch_buf, not including EOB
 * characters.
 */
int yy_n_chars;

/* Whether we "own" the buffer - i.e., we know we created it,
 * and can realloc() it to grow it, and should free() it to
 * delete it.
 */
int yy_is_our_buffer;

/* Whether this is an "interactive" input source; if so, and
 * if we're using stdio for input, then we want to use getc()
 * instead of fread(), to make sure we stop fetching input after
 * each newline.
 */
int yy_is_interactive;

/* Whether we're considered to be at the beginning of a line.
 * If so, '^' rules will be active on the next match, otherwise
 * not.
 */
int yy_at_bol;

int yy_bs_lineno; /**< The line count. */
int yy_bs_column; /**< The column count. */

/* Whether to try to fill the input buffer when we reach the
 * end of it.
 */
int yy_fill_buffer;

int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
/* When an EOF's been seen but there's still some text to process
 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
 * shouldn't try reading from the input source any more.  We might
 * still have a bunch of tokens to match, though, because of
 * possible backing-up.
 *
 * When we actually see the EOF, we change the status to "new"
 * (via yyrestart()), so that the user can continue scanning by
 * just pointing yyin at a new input file.
 */
#define YY_BUFFER_EOF_PENDING 2
};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ((yy_buffer_stack) \
                           ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                           : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *CEvaluationalloc(yy_size_t);
void *CEvaluationrealloc(void *, yy_size_t);
void CEvaluationfree(void *);

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
  {\
  if (! YY_CURRENT_BUFFER ){\
      yyensure_buffer_stack (); \
      YY_CURRENT_BUFFER_LVALUE =    \
                                    yy_create_buffer(yyin, YY_BUF_SIZE ); \
    } \
  YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
  }

#define yy_set_bol(at_bol) \
  {\
  if (! YY_CURRENT_BUFFER ){\
      yyensure_buffer_stack (); \
      YY_CURRENT_BUFFER_LVALUE =    \
                                    yy_create_buffer(yyin, YY_BUF_SIZE ); \
    } \
  YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
  }

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include "copasi/FlexLexer.h"

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
  (yytext_ptr) = yy_bp; \
  yyleng = (size_t) (yy_cp - yy_bp); \
  (yy_hold_char) = *yy_cp; \
  *yy_cp = '\0'; \
  (yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 80
#define YY_END_OF_BUFFER 81
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
flex_int32_t yy_verify;
flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_accept[387] =
{
0,
0,    0,    0,    0,    0,    0,    0,    0,   81,   79,
78,   78,    8,   79,   72,   75,   64,   74,   63,    1,
1,   79,   77,   77,   77,   77,   77,   77,   77,   77,
77,   77,   77,   77,   77,   77,   77,   79,   77,   77,
77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
77,   77,   73,   76,   79,   68,   79,   66,   70,   71,
67,   10,   79,   12,   79,   79,   79,   79,   79,   79,
79,   65,   79,   79,   79,   79,   79,   79,   79,   79,
79,   77,   77,   78,    0,   77,    0,    1,    1,    0,
0,    0,   19,    0,   62,   77,   77,   77,   77,   77,

77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
77,   77,   77,   77,   77,   77,    3,   77,   77,   77,
77,   77,   77,   77,    0,    0,   18,   77,   77,   77,
77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
77,   77,   77,   13,   15,    9,   14,   11,    0,   12,
10,   17,    0,    0,    0,    0,   77,   77,    1,    0,
1,   20,   61,   77,   77,   77,   77,   77,   77,   77,
77,   77,   77,   77,   77,   77,   77,   77,   60,   77,
77,   77,   77,    7,   77,    8,   77,   77,   77,   77,

77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
77,   77,   77,   77,   77,   77,   77,   16,   69,   49,
77,   77,   77,   77,   77,   77,   77,   25,   77,   29,
77,   28,   77,   77,   23,   77,   77,   77,   77,   77,
77,   21,   77,   57,   58,   77,   77,   27,   77,   24,
77,   77,   26,   77,    4,   77,   77,   77,   77,   77,
77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
37,   77,   77,   77,   77,   77,   36,   38,   51,   31,
35,   34,   77,   77,   77,    5,   77,   77,   77,   77,

77,   77,   33,   30,   48,   32,   77,   77,   77,   77,
77,   77,   77,   77,   77,   77,   77,   77,   77,   77,
77,   77,   77,   77,   59,   77,   77,   50,   54,   77,
22,   77,   77,   77,   77,   77,   77,   77,   77,   77,
77,   77,   77,   77,   77,   77,   41,   77,   40,   77,
39,   77,   77,   77,   77,   77,   77,   56,   77,   77,
77,   77,   77,   43,   47,   46,   45,   42,   44,   77,
77,    6,   55,   53,   77,   77,   77,   77,   77,   77,
52,   77,   77,   77,    2,    0
};

static yyconst flex_int32_t yy_ec[256] =
{
0,
1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    2,    4,    5,    1,    1,    6,    7,    1,    8,
9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
18,   18,   18,   18,   18,   18,   18,    1,    1,   19,
20,   21,    1,    1,   22,   23,   24,   25,   26,   27,
28,   29,   30,   31,   31,   32,   33,   34,   35,   36,
37,   38,   39,   40,   41,   31,   31,   42,   43,   31,
44,   45,   46,   47,   31,    1,   48,   49,   50,   51,

52,   53,   54,   55,   56,   31,   31,   57,   58,   59,
60,   61,   62,   63,   64,   65,   66,   31,   31,   67,
68,   31,   69,   70,   71,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1
};

static yyconst flex_int32_t yy_meta[72] =
{
0,
1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
1,    1,    1,    1,    1,    3,    3,    3,    1,    1,
1,    3,    3,    3,    3,    3,    3,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    1,    1,    1,    1,    3,    3,    3,
3,    3,    3,    2,    2,    2,    2,    2,    2,    2,
2,    2,    2,    2,    2,    2,    2,    2,    1,    1,
1
};

static yyconst flex_int16_t yy_base[392] =
{
0,
0,    0,    0,    0,   71,    0,  139,  140,  822,  823,
143,  145,  823,  144,  823,  823,  823,  823,  823,  140,
145,  134,  162,  813,  152,  156,  161,  172,  159,  182,
160,  188,  197,  176,  200,  205,  180,  130,  175,  169,
204,  164,  207,  209,  212,  185,  214,  215,  220,  226,
233,  227,  823,  823,  800,  823,  812,  823,  823,  823,
823,  798,  797,  796,  781,  777,  210,  218,  787,  774,
776,  823,  751,  747,  194,  195,  748,  755,  743,  745,
734,  244,  241,  251,  246,  795,  799,  251,  276,  293,
0,  227,  823,  798,  791,  791,  234,  277,  275,  287,

276,  289,  292,  297,  305,  279,  306,  299,  300,  790,
308,  312,  310,  314,  315,  316,  789,  317,  318,  319,
321,  328,  331,  333,  298,  793,  823,  337,  338,  342,
343,  347,  349,  350,  352,  353,  356,  359,  358,  361,
360,  357,  362,  363,  365,  367,  369,  370,  368,  371,
372,  373,  377,  823,  823,  823,  823,  823,  770,  823,
823,  823,  756,  742,  741,  728,  366,  374,  371,  390,
424,    0,  823,  782,  382,  404,  392,  427,  428,  430,
437,  438,  440,  439,  441,  443,  442,  445,  780,  446,
376,  780,  779,  778,  447,  777,  444,  450,  455,  448,

456,  449,  460,  457,  461,  463,  464,  462,  465,  478,
481,  482,  483,  484,  486,  485,  488,  491,  386,  490,
487,  489,  497,  492,  498,  502,  505,  823,  823,  775,
775,  493,  501,  494,  774,  773,  772,  770,  770,  768,
768,  766,  766,  495,  764,  500,  504,  509,  499,  496,
506,  763,  375,  762,  761,  507,  516,  760,  760,  758,
758,  757,  755,  755,  754,  533,  534,  548,  551,  552,
553,  554,  555,  556,  557,  558,  559,  561,  562,  563,
752,  571,  564,  565,  568,  569,  751,  750,  749,  748,
747,  746,  746,  566,  570,  745,  744,  743,  576,  742,

583,  578,  740,  739,  738,  737,  587,  572,  574,  577,
573,  575,  579,  582,  585,  589,  588,  593,  610,  613,
614,  620,  621,  622,  736,  625,  608,  735,  721,  627,
720,  720,  632,  636,  639,  644,  645,  646,  647,  649,
650,  652,  653,  654,  656,  718,  715,  713,  710,  709,
707,  707,  704,  702,  655,  657,  660,  698,  690,  685,
662,  663,  664,  683,  681,  680,  678,  677,  676,  666,
665,  676,  674,  387,  667,  668,  669,  378,  672,  673,
265,  674,  680,  670,  253,  823,  732,  735,  737,  740,
162
};

static yyconst flex_int16_t yy_def[392] =
{
0,
386,    1,    1,    1,  386,    5,    1,    1,  386,  386,
386,  386,  386,  387,  386,  386,  386,  386,  386,  386,
386,  388,  389,  389,  389,  389,  389,  389,  389,  389,
389,  389,  389,  389,  389,  389,  389,  390,  389,  389,
389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
389,  389,  386,  386,  386,  386,  386,  386,  386,  386,
386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
386,  389,  389,  386,  387,  386,  387,  386,  386,  386,
391,  388,  386,  388,  386,  389,  389,  389,  389,  389,

389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
389,  389,  389,  389,  390,  390,  386,  389,  389,  389,
389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
389,  389,  389,  386,  386,  386,  386,  386,  386,  386,
386,  386,  386,  386,  386,  386,  389,  389,  386,  386,
386,  391,  386,  389,  389,  389,  389,  389,  389,  389,
389,  389,  389,  389,  389,  389,  389,  389,  386,  389,
389,  389,  389,  389,  389,  389,  389,  389,  389,  389,

389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
389,  389,  389,  389,  389,  389,  389,  386,  386,  386,
389,  389,  389,  389,  389,  389,  389,  386,  389,  386,
389,  386,  389,  389,  386,  389,  389,  389,  389,  389,
389,  386,  389,  386,  386,  389,  389,  386,  389,  386,
389,  389,  386,  389,  389,  389,  389,  389,  389,  389,
389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
386,  389,  389,  389,  389,  389,  386,  386,  386,  386,
386,  386,  389,  389,  389,  389,  389,  389,  389,  389,

389,  389,  386,  386,  386,  386,  389,  389,  389,  389,
389,  389,  389,  389,  389,  389,  389,  389,  389,  389,
389,  389,  389,  389,  386,  389,  389,  386,  386,  389,
386,  389,  389,  389,  389,  389,  389,  389,  389,  389,
389,  389,  389,  389,  389,  389,  386,  389,  386,  389,
386,  389,  389,  389,  389,  389,  389,  386,  389,  389,
389,  389,  389,  386,  386,  386,  386,  386,  386,  389,
389,  389,  386,  386,  389,  389,  389,  389,  389,  389,
386,  389,  389,  389,  389,    0,  386,  386,  386,  386,
386
};

static yyconst flex_int16_t yy_nxt[895] =
{
0,
10,   11,   12,   13,   14,   10,   10,   15,   16,   10,
17,   18,   19,   10,   10,   20,   21,   21,   22,   10,
10,   23,   24,   25,   26,   27,   28,   29,   24,   30,
24,   31,   32,   33,   24,   34,   24,   24,   35,   36,
37,   24,   24,   38,   10,   10,   10,   39,   24,   40,
41,   42,   43,   44,   24,   45,   46,   47,   48,   24,
49,   24,   24,   50,   51,   52,   24,   24,   53,   10,
54,   10,   11,   12,   55,   10,   56,   57,   15,   16,
58,   59,   18,   60,   10,   61,   10,   10,   10,   62,
63,   64,   65,   10,   10,   10,   66,   10,   67,   10,

10,   10,   68,   10,   69,   70,   10,   10,   10,   10,
10,   10,   71,   10,   10,   10,   10,   72,   73,   10,
10,   10,   74,   10,   75,   10,   10,   76,   77,   78,
79,   10,   10,   10,   10,   10,   10,   80,   10,   53,
81,   54,   10,   10,   84,   84,   84,   84,   86,   10,
10,   10,   10,   88,   93,   89,   89,   89,   88,   95,
89,   89,   89,   95,  172,   90,   95,   95,   95,   95,
90,   95,   82,   82,  126,  127,   95,  102,   94,   95,
109,  105,   95,   95,   97,   98,  103,   95,   87,   95,
104,   90,   95,  107,  112,   95,   90,   83,   83,   99,

100,  101,  106,  108,   95,  117,   91,   95,  110,  113,
118,   95,   95,  124,   95,  111,   95,  114,  115,   95,
133,   95,   95,  128,  129,  119,  122,   95,  134,  120,
137,  116,  135,   95,   95,  158,  121,  130,  131,  132,
95,   95,  123,  156,  142,  158,  156,   93,   95,  160,
86,   95,   84,   84,  138,  136,  140,  161,  160,  161,
95,  143,  145,  139,  110,  115,  169,  169,  169,  144,
141,   94,  174,  173,  146,  117,   90,  148,  167,  147,
151,  149,   95,   95,   95,  153,   95,  150,  145,   88,
87,   89,   89,   89,   95,  152,   95,  178,  176,   95,

168,   90,   90,  170,   95,  170,   95,   95,  171,  171,
171,  175,   95,   95,  184,   95,  177,   95,  179,   95,
182,   95,   95,   95,   95,   95,   95,   90,   95,  185,
180,  181,  188,  187,  190,   95,  183,  186,   95,  191,
95,  198,  126,  127,   95,   95,  197,  193,  194,   95,
95,  192,  199,  195,   95,  196,   95,   95,  200,   95,
95,  201,  203,   95,   95,   95,   95,   95,   95,   95,
95,  202,   95,   95,   95,   95,   95,   95,   95,   95,
95,   95,   95,  252,   95,  381,  169,  169,  169,   95,
300,  205,  253,  252,  207,  173,   90,  204,  206,   95,

174,  211,  277,  195,  208,  171,  171,  171,  214,  212,
219,   95,  218,  209,  210,  215,  213,  216,  217,  222,
231,  193,   90,  194,  221,  235,  223,  232,  192,  220,
225,  196,  227,  224,   95,   95,  220,  238,  226,  171,
171,  171,  233,  234,  240,  242,  245,   95,   95,   95,
95,   95,   95,   95,   95,   95,   95,  258,  239,  237,
236,  244,  260,  263,   95,  241,  243,   95,   95,   95,
95,   95,  238,  246,  265,  251,  249,  250,  259,  256,
247,  248,  257,  261,  264,  240,  266,  262,  242,   95,
245,   95,   95,   95,   95,   95,  258,   95,   95,   95,

95,   95,   95,   95,  260,  263,   95,   95,   95,   95,
267,   95,   95,   95,   95,  286,   95,  298,  237,  239,
231,  235,  236,   95,  268,  269,  284,  282,  301,  270,
285,  283,  241,  294,  296,  243,  297,  293,  295,  299,
95,   95,  271,  259,  274,  275,  276,  278,  272,  273,
279,  261,  264,  265,  302,   95,  262,  280,   95,   95,
95,   95,   95,   95,   95,   95,   95,  307,   95,   95,
95,   95,   95,   95,  300,   95,   95,   95,   95,   95,
95,   95,   95,   95,   95,   95,   95,  321,  322,   95,
95,  326,   95,  308,   95,   95,   95,  309,  312,  310,

95,  323,  324,  311,  298,  330,  296,  327,  316,  319,
320,  313,  333,  314,  332,   95,  315,   95,  297,  293,
347,  349,  318,  337,  334,  317,  338,  351,   95,   95,
341,  339,   95,  340,   95,  335,  336,  356,  346,   95,
343,  348,  350,   95,  342,  332,   95,  344,  352,  353,
354,  347,  349,  351,   95,  345,   95,   95,  355,   95,
95,   95,   95,   95,   95,  359,  357,   95,  360,   95,
95,   95,   95,   95,   95,   95,   95,   95,  371,   95,
95,   95,  173,   95,  173,  173,  173,   95,  173,  173,
380,  173,  374,  346,  370,  377,  378,  373,  348,  350,

352,  353,  372,  354,  383,  385,  173,  362,  361,  369,
376,  368,  359,  360,  367,  173,  366,  363,  173,  382,
365,  385,  379,  173,  378,  364,  375,  358,  173,  173,
384,  372,   85,   85,   85,   92,   92,   92,   96,   96,
125,  125,  125,  173,  173,  173,  173,  173,  173,  331,
329,  328,   95,  325,  173,  173,  173,  173,  173,  173,
173,   95,  306,  173,  305,  304,  173,  303,  173,  173,
173,  173,  173,  292,  173,  291,  173,  290,  173,  289,
288,  287,  281,  173,   95,   95,  255,  254,  173,  230,
228,  229,  155,  228,  155,  386,   95,  189,   95,  173,

386,  386,   95,  162,  166,  162,  154,  165,  157,  164,
163,  162,  154,  157,  159,  158,  157,  156,  155,  154,
95,  386,    9,  386,  386,  386,  386,  386,  386,  386,
386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
386,  386,  386,  386
};

static yyconst flex_int16_t yy_chk[895] =
{
0,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
1,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
5,    5,    7,    8,   11,   11,   12,   12,   14,    7,
8,    7,    8,   20,   22,   20,   20,   20,   21,   25,
21,   21,   21,   26,  391,   20,   29,   31,   27,   23,
21,   42,    7,    8,   38,   38,   40,   25,   22,   28,
29,   26,   39,   34,   23,   23,   25,   37,   14,   30,
25,   20,   46,   28,   31,   32,   21,    7,    8,   23,

23,   23,   27,   28,   33,   34,   20,   35,   30,   32,
34,   41,   36,   37,   43,   30,   44,   32,   33,   45,
40,   47,   48,   39,   39,   35,   36,   49,   40,   35,
42,   33,   40,   50,   52,   67,   35,   39,   39,   39,
51,   97,   36,   68,   46,   75,   76,   92,   83,   67,
85,   82,   84,   84,   43,   41,   44,   68,   75,   76,
385,   47,   48,   43,   45,   82,   88,   88,   88,   47,
45,   92,   97,  381,   48,   49,   88,   50,   82,   49,
51,   50,   99,  101,   98,   52,  106,   50,   83,   89,
85,   89,   89,   89,  100,   51,  102,  101,   99,  103,

83,   89,   88,   90,  104,   90,  108,  109,   90,   90,
90,   98,  105,  107,  106,  111,  100,  113,  102,  112,
104,  114,  115,  116,  118,  119,  120,   89,  121,  107,
103,  103,  109,  108,  111,  122,  105,  107,  123,  112,
124,  119,  125,  125,  128,  129,  118,  114,  115,  130,
131,  113,  120,  116,  132,  116,  133,  134,  121,  135,
136,  122,  124,  137,  142,  139,  138,  141,  140,  143,
144,  123,  145,  167,  146,  149,  147,  148,  150,  151,
152,  168,  253,  191,  153,  378,  169,  169,  169,  175,
253,  130,  191,  219,  132,  374,  169,  129,  131,  177,

128,  135,  219,  167,  133,  170,  170,  170,  138,  136,
142,  176,  141,  134,  134,  138,  137,  139,  140,  148,
175,  144,  169,  145,  147,  177,  149,  176,  143,  146,
151,  146,  153,  150,  178,  179,  168,  180,  152,  171,
171,  171,  176,  176,  181,  182,  184,  183,  185,  187,
186,  197,  188,  190,  195,  200,  202,  198,  180,  179,
178,  183,  199,  201,  204,  181,  182,  203,  205,  208,
206,  207,  209,  184,  202,  190,  187,  188,  198,  195,
185,  186,  197,  199,  201,  210,  203,  200,  211,  212,
213,  214,  216,  215,  221,  217,  222,  220,  218,  224,

232,  234,  244,  250,  223,  225,  249,  246,  233,  226,
205,  247,  227,  251,  256,  234,  248,  250,  208,  209,
204,  206,  207,  257,  205,  205,  233,  232,  256,  212,
233,  232,  210,  246,  248,  211,  249,  244,  247,  251,
266,  267,  213,  222,  216,  217,  218,  220,  214,  215,
221,  223,  225,  226,  257,  268,  224,  227,  269,  270,
271,  272,  273,  274,  275,  276,  277,  266,  278,  279,
280,  283,  284,  294,  277,  285,  286,  295,  282,  308,
311,  309,  312,  299,  310,  302,  313,  283,  284,  314,
301,  294,  315,  267,  307,  317,  316,  267,  269,  268,

318,  285,  286,  268,  275,  299,  273,  295,  278,  282,
282,  271,  302,  272,  301,  327,  276,  319,  274,  270,
320,  321,  280,  309,  307,  279,  310,  322,  323,  324,
313,  311,  326,  312,  330,  308,  308,  327,  319,  333,
315,  320,  321,  334,  314,  316,  335,  317,  322,  323,
324,  336,  337,  338,  339,  318,  340,  341,  326,  342,
343,  344,  355,  345,  356,  333,  330,  357,  334,  361,
362,  363,  371,  370,  375,  376,  377,  384,  356,  379,
380,  382,  373,  372,  369,  368,  367,  383,  366,  365,
377,  364,  360,  335,  355,  370,  371,  359,  336,  337,

338,  339,  357,  340,  380,  383,  358,  342,  341,  354,
362,  353,  344,  345,  352,  351,  350,  343,  349,  379,
348,  384,  375,  347,  376,  346,  361,  332,  331,  329,
382,  363,  387,  387,  387,  388,  388,  388,  389,  389,
390,  390,  390,  328,  325,  306,  305,  304,  303,  300,
298,  297,  296,  293,  292,  291,  290,  289,  288,  287,
281,  265,  264,  263,  262,  261,  260,  259,  258,  255,
254,  252,  245,  243,  242,  241,  240,  239,  238,  237,
236,  235,  231,  230,  196,  194,  193,  192,  189,  174,
166,  165,  164,  163,  159,  126,  117,  110,   96,   95,

94,   87,   86,   81,   80,   79,   78,   77,   74,   73,
71,   70,   69,   66,   65,   64,   63,   62,   57,   55,
24,    9,  386,  386,  386,  386,  386,  386,  386,  386,
386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
386,  386,  386,  386,  386,  386,  386,  386,  386,  386,
386,  386,  386,  386
};

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "function/CEvaluationLexer.lpp"
/* scanner for kinetic functions */

#line 10 "function/CEvaluationLexer.lpp"
#include <vector>

#include "copasi.h"
#include "CEvaluationNode.h"
#include "CEvaluationLexer.h"
#include "CEvaluationParser_yacc.hpp"

#ifndef YYERRCODE
#define YYERRCODE 256
#endif

#define YY_USER_INIT \
  mpNode = NULL;\
  mPosition = 0;\
  mpNodeList = new std::vector< CEvaluationNode * >;

#define COMMON_ACTION \
  mPosition += yyleng;\
  mpNodeList->push_back(mpNode);

#line 765 "<stdout>"

#define INITIAL 0
#define sSIGNorVALUE 1
#define sOPERATOR 2
#define sVALUE 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy(char *, yyconst char *, int);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *);
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput(yytext, yyleng)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
  \
  if ((result = LexerInput((char *) buf, max_size )) < 0 ) \
  YY_FATAL_ERROR("input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError(msg)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
  YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
register yy_state_type yy_current_state;
register char * yy_cp, *yy_bp;
register int yy_act;

#line 36 "function/CEvaluationLexer.lpp"

#line 875 "<stdout>"

if (!(yy_init))
  {
    (yy_init) = 1;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if (!(yy_start))
      (yy_start) = 1; /* first start state */

    if (! yyin)
      yyin = & std::cin;

    if (! yyout)
      yyout = & std::cout;

    if (! YY_CURRENT_BUFFER)
      {
        yyensure_buffer_stack();
        YY_CURRENT_BUFFER_LVALUE =
        yy_create_buffer(yyin, YY_BUF_SIZE);
      }

    yy_load_buffer_state();
  }

while (1)      /* loops until end-of-file is reached */
  {
    yy_cp = (yy_c_buf_p);

    /* Support of yytext. */
    *yy_cp = (yy_hold_char);

    /* yy_bp points to the position in yy_ch_buf of the start of
     * the current run.
     */
    yy_bp = yy_cp;

    yy_current_state = (yy_start);
yy_match:

    do
      {
        register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];

        if (yy_accept[yy_current_state])
          {
            (yy_last_accepting_state) = yy_current_state;
            (yy_last_accepting_cpos) = yy_cp;
          }

        while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
          {
            yy_current_state = (int) yy_def[yy_current_state];

            if (yy_current_state >= 387)
              yy_c = yy_meta[(unsigned int) yy_c];
          }

        yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
        ++yy_cp;
      }
    while (yy_current_state != 386);

    yy_cp = (yy_last_accepting_cpos);
    yy_current_state = (yy_last_accepting_state);

yy_find_action:
    yy_act = yy_accept[yy_current_state];

    YY_DO_BEFORE_ACTION;

do_action:  /* This label is used only to access EOF actions. */

    switch (yy_act)
      {
          /* beginning of action switch */
        case 0: /* must back up */
          /* undo the effects of YY_DO_BEFORE_ACTION */
          *yy_cp = (yy_hold_char);
          yy_cp = (yy_last_accepting_cpos);
          yy_current_state = (yy_last_accepting_state);
          goto yy_find_action;

        case 1:
          YY_RULE_SETUP
#line 37 "function/CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeNumber(CEvaluationNode::S_DOUBLE,
                                             yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK

        case 2:
          YY_RULE_SETUP
#line 45 "function/CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNode::S_EXPONENTIALE,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK

        case 3:
          YY_RULE_SETUP
#line 53 "function/CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNode::S_PI,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK

        case 4:
          YY_RULE_SETUP
#line 61 "function/CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNode::S_TRUE,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_VALUE;

          YY_BREAK

        case 5:
          YY_RULE_SETUP
#line 69 "function/CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNode::S_FALSE,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_VALUE;

          YY_BREAK

        case 6:
          YY_RULE_SETUP
#line 77 "function/CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNode::S_INFINITY,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK

        case 7:
          YY_RULE_SETUP
#line 85 "function/CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNode::S_NAN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK

        case 8:
          YY_RULE_SETUP
#line 93 "function/CEvaluationLexer.lpp"

          BEGIN(sVALUE);
          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_NOT,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_NOT;

          YY_BREAK

        case 9:
          YY_RULE_SETUP
#line 101 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mpNode = new CEvaluationNodeLogical(CEvaluationNode::S_LE,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_LE;

          YY_BREAK

        case 10:
          YY_RULE_SETUP
#line 109 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mpNode = new CEvaluationNodeLogical(CEvaluationNode::S_LT,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_LT;

          YY_BREAK

        case 11:
          YY_RULE_SETUP
#line 117 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mpNode = new CEvaluationNodeLogical(CEvaluationNode::S_GE,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_GE;

          YY_BREAK

        case 12:
          YY_RULE_SETUP
#line 125 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mpNode = new CEvaluationNodeLogical(CEvaluationNode::S_GT,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_GT;

          YY_BREAK

        case 13:
          YY_RULE_SETUP
#line 133 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mpNode = new CEvaluationNodeLogical(CEvaluationNode::S_NE,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_NE;

          YY_BREAK

        case 14:
          YY_RULE_SETUP
#line 141 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mpNode = new CEvaluationNodeLogical(CEvaluationNode::S_EQ,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_EQ;

          YY_BREAK

        case 15:
          YY_RULE_SETUP
#line 149 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mpNode = new CEvaluationNodeLogical(CEvaluationNode::S_AND,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_AND;

          YY_BREAK

        case 16:
          YY_RULE_SETUP
#line 157 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mpNode = new CEvaluationNodeLogical(CEvaluationNode::S_XOR,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_XOR;

          YY_BREAK

        case 17:
          YY_RULE_SETUP
#line 165 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mpNode = new CEvaluationNodeLogical(CEvaluationNode::S_OR,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_OR;

          YY_BREAK

        case 18:
          /* rule 18 can match eol */
          YY_RULE_SETUP
#line 173 "function/CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeUnit(CEvaluationNode::S_DEFAULT,
                                           yytext);
          COMMON_ACTION;
          return TOKEN_UNIT;

          YY_BREAK

        case 19:
          /* rule 19 can match eol */
          YY_RULE_SETUP
#line 181 "function/CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeObject(CEvaluationNode::S_CN,
                                             yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK

        case 20:
          YY_RULE_SETUP
#line 189 "function/CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeObject(CEvaluationNode::S_POINTER,
                                             yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK

        case 21:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 197 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_LOG,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 22:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 204 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_LOG10,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 23:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 211 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_EXP,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 24:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 218 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_SIN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 25:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 225 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_COS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 26:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 232 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_TAN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 27:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 239 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_SEC,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 28:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 246 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_CSC,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 29:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 253 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_COT,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 30:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 260 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_SINH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 31:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 267 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_COSH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 32:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 274 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_TANH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 33:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 281 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_SECH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 34:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 288 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_CSCH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 35:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 295 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_COTH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 36:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 302 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_ARCSIN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 37:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 309 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_ARCCOS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 38:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 316 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_ARCTAN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 39:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 323 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_ARCSEC,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 40:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 330 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_ARCCSC,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 41:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 337 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_ARCCOT,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 42:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 344 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_ARCSINH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 43:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 351 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_ARCCOSH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 44:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 358 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_ARCTANH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 45:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 365 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_ARCSECH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 46:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 372 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_ARCCSCH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 47:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 379 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_ARCCOTH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 48:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 386 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_SQRT,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 49:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 393 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_ABS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 50:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 400 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_FLOOR,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 51:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 407 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_CEIL,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 52:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 414 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_FACTORIAL,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 53:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 421 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_RUNIFORM,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION_2;

          YY_BREAK

        case 54:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 428 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_RGAMMA,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION_2;

          YY_BREAK

        case 55:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 435 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_RPOISSON,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK

        case 56:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 442 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_RNORMAL,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION_2;

          YY_BREAK

        case 57:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 449 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_MAX,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION_2;

          YY_BREAK

        case 58:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 456 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_MIN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION_2;

          YY_BREAK

        case 59:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 463 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeDelay(CEvaluationNode::S_DELAY,
                                            yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION_2;

          YY_BREAK

        case 60:
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 470 "function/CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeChoice(CEvaluationNode::S_IF,
                                             yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_CHOICE;

          YY_BREAK

        case 61:
          /* rule 61 can match eol */
          *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
          (yy_c_buf_p) = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 477 "function/CEvaluationLexer.lpp"

          {
            std::string tmp(yytext);
            mpNode = new CEvaluationNodeCall(CEvaluationNode::S_EXPRESSION,
            tmp.substr(0, tmp.length() - 1));
          }
          COMMON_ACTION;
          return TOKEN_CALL;

          YY_BREAK

        case 62:
          /* rule 62 can match eol */
          YY_RULE_SETUP
#line 487 "function/CEvaluationLexer.lpp"

          {
            std::string tmp(yytext);
            mpNode = new CEvaluationNodeCall(CEvaluationNode::S_FUNCTION,
            tmp.substr(0, tmp.length() - 1));
          }
          COMMON_ACTION;
          return TOKEN_CALL;

          YY_BREAK

        case 63:
          YY_RULE_SETUP
#line 497 "function/CEvaluationLexer.lpp"

          BEGIN(sVALUE);
          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_MINUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_SIGN;

          YY_BREAK

        case 64:
          YY_RULE_SETUP
#line 505 "function/CEvaluationLexer.lpp"

          BEGIN(sVALUE);
          mpNode = new CEvaluationNodeFunction(CEvaluationNode::S_PLUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_SIGN;

          YY_BREAK

        case 65:
          YY_RULE_SETUP
#line 513 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mpNode = new CEvaluationNodeOperator(CEvaluationNode::S_POWER,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_POWER;

          YY_BREAK

        case 66:
          YY_RULE_SETUP
#line 521 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mpNode = new CEvaluationNodeOperator(CEvaluationNode::S_MULTIPLY,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_MULTIPLY;

          YY_BREAK

        case 67:
          YY_RULE_SETUP
#line 529 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mpNode = new CEvaluationNodeOperator(CEvaluationNode::S_DIVIDE,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_MULTIPLY;

          YY_BREAK

        case 68:
          YY_RULE_SETUP
#line 537 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mpNode = new CEvaluationNodeOperator(CEvaluationNode::S_MODULUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_MODULUS;

          YY_BREAK

        case 69:
          YY_RULE_SETUP
#line 545 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mpNode = new CEvaluationNodeOperator(CEvaluationNode::S_REMAINDER,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_REMAINDER;

          YY_BREAK

        case 70:
          YY_RULE_SETUP
#line 553 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mpNode = new CEvaluationNodeOperator(CEvaluationNode::S_PLUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_PLUS;

          YY_BREAK

        case 71:
          YY_RULE_SETUP
#line 561 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mpNode = new CEvaluationNodeOperator(CEvaluationNode::S_MINUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_PLUS;

          YY_BREAK

        case 72:
          YY_RULE_SETUP
#line 569 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mPosition += yyleng;
          // mpNode = new CEvaluationNodeStructure(CEvaluationNode::S_OPEN,
          //                                       yytext);
          // COMMON_ACTION;
          return TOKEN_STRUCTURE_OPEN;

          YY_BREAK

        case 73:
          YY_RULE_SETUP
#line 578 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mPosition += yyleng;
          // mpNode = new CEvaluationNodeStructure(CEvaluationNode::S_VECTOR_OPEN,
          //                                       yytext);
          // COMMON_ACTION;
          return TOKEN_STRUCTURE_VECTOR_OPEN;

          YY_BREAK

        case 74:
          YY_RULE_SETUP
#line 587 "function/CEvaluationLexer.lpp"

          BEGIN(sSIGNorVALUE);
          mPosition += yyleng;
          // mpNode = new CEvaluationNodeStructure(CEvaluationNode::S_COMMA,
          //                                       yytext);
          // COMMON_ACTION;
          return TOKEN_STRUCTURE_COMMA;

          YY_BREAK

        case 75:
          YY_RULE_SETUP
#line 596 "function/CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mPosition += yyleng;
          // mpNode = new CEvaluationNodeStructure(CEvaluationNode::S_CLOSE,
          //                                       yytext);
          // COMMON_ACTION;
          return TOKEN_STRUCTURE_CLOSE;

          YY_BREAK

        case 76:
          YY_RULE_SETUP
#line 605 "function/CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mPosition += yyleng;
          // mpNode = new CEvaluationNodeStructure(CEvaluationNode::S_VECTOR_CLOSE,
          //                                       yytext);
          // COMMON_ACTION;
          return TOKEN_STRUCTURE_VECTOR_CLOSE;

          YY_BREAK

        case 77:
          /* rule 77 can match eol */
          YY_RULE_SETUP
#line 614 "function/CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeVariable(CEvaluationNode::S_DEFAULT,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_VARIABLE;

          YY_BREAK

        case 78:
          /* rule 78 can match eol */
          YY_RULE_SETUP
#line 622 "function/CEvaluationLexer.lpp"

          mPosition += yyleng;
          // mpNode = new CEvaluationNodeWhiteSpace(CEvaluationNode::S_DEFAULT,
          //                                        yytext);
          // COMMON_ACTION;

          YY_BREAK

        case YY_STATE_EOF(INITIAL):
        case YY_STATE_EOF(sSIGNorVALUE):
        case YY_STATE_EOF(sOPERATOR):
        case YY_STATE_EOF(sVALUE):
#line 629 "function/CEvaluationLexer.lpp"
          return 0;
          YY_BREAK

        case 79:
          YY_RULE_SETUP
#line 631 "function/CEvaluationLexer.lpp"

          CCopasiMessage(CCopasiMessage::ERROR, MCFunction + 2, mPosition);
          return YYERRCODE;

          YY_BREAK

        case 80:
          YY_RULE_SETUP
#line 636 "function/CEvaluationLexer.lpp"
          ECHO;
          YY_BREAK
#line 1929 "<stdout>"

        case YY_END_OF_BUFFER:
        {
          /* Amount of text matched not including the EOB char. */
          int yy_amount_of_matched_text = (int)(yy_cp - (yytext_ptr)) - 1;

          /* Undo the effects of YY_DO_BEFORE_ACTION. */
          *yy_cp = (yy_hold_char);
          YY_RESTORE_YY_MORE_OFFSET

          if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW)
            {
              /* We're scanning a new file or input source.  It's
               * possible that this happened because the user
               * just pointed yyin at a new source and called
               * yylex().  If so, then we have to assure
               * consistency between YY_CURRENT_BUFFER and our
               * globals.  Here is the right place to do so, because
               * this is the first action (other than possibly a
               * back-up) that will match for the new input source.
               */
              (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
              YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
              YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
            }

          /* Note that here we test for yy_c_buf_p "<=" to the position
           * of the first EOB in the buffer, since yy_c_buf_p will
           * already have been incremented past the NUL character
           * (since all states make transitions on EOB to the
           * end-of-buffer state).  Contrast this with the test
           * in input().
           */
          if ((yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
            {
              /* This was really a NUL. */
              yy_state_type yy_next_state;

              (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

              yy_current_state = yy_get_previous_state();

              /* Okay, we're now positioned to make the NUL
               * transition.  We couldn't have
               * yy_get_previous_state() go ahead and do it
               * for us because it doesn't know how to deal
               * with the possibility of jamming (and we don't
               * want to build jamming into it because then it
               * will run more slowly).
               */

              yy_next_state = yy_try_NUL_trans(yy_current_state);

              yy_bp = (yytext_ptr) + YY_MORE_ADJ;

              if (yy_next_state)
                {
                  /* Consume the NUL. */
                  yy_cp = ++(yy_c_buf_p);
                  yy_current_state = yy_next_state;
                  goto yy_match;
                }

              else
                {
                  yy_cp = (yy_last_accepting_cpos);
                  yy_current_state = (yy_last_accepting_state);
                  goto yy_find_action;
                }
            }

          else switch (yy_get_next_buffer())
              {
                case EOB_ACT_END_OF_FILE:
                {
                  (yy_did_buffer_switch_on_eof) = 0;

                  if (yywrap())
                    {
                      /* Note: because we've taken care in
                       * yy_get_next_buffer() to have set up
                       * yytext, we can now set up
                       * yy_c_buf_p so that if some total
                       * hoser (like flex itself) wants to
                       * call the scanner after we return the
                       * YY_NULL, it'll still work - another
                       * YY_NULL will get returned.
                       */
                      (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                      yy_act = YY_STATE_EOF(YY_START);
                      goto do_action;
                    }

                  else
                    {
                      if (!(yy_did_buffer_switch_on_eof))
                        YY_NEW_FILE;
                    }

                  break;
                }

                case EOB_ACT_CONTINUE_SCAN:
                  (yy_c_buf_p) =
                    (yytext_ptr) + yy_amount_of_matched_text;

                  yy_current_state = yy_get_previous_state();

                  yy_cp = (yy_c_buf_p);
                  yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                  goto yy_match;

                case EOB_ACT_LAST_MATCH:
                  (yy_c_buf_p) =
                    &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                  yy_current_state = yy_get_previous_state();

                  yy_cp = (yy_c_buf_p);
                  yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                  goto yy_find_action;
              }

          break;
        }

        default:
          YY_FATAL_ERROR(
            "fatal flex scanner internal error--no action found");
      } /* end of action switch */
  } /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer(std::istream* arg_yyin, std::ostream* arg_yyout)
{
yyin = arg_yyin;
yyout = arg_yyout;
yy_c_buf_p = 0;
yy_init = 0;
yy_start = 0;
yy_flex_debug = 0;
yylineno = 1; // this will only get updated if %option yylineno

yy_did_buffer_switch_on_eof = 0;

yy_looking_for_trail_begin = 0;
yy_more_flag = 0;
yy_more_len = 0;
yy_more_offset = yy_prev_more_offset = 0;

yy_start_stack_ptr = yy_start_stack_depth = 0;
yy_start_stack = NULL;

yy_buffer_stack = 0;
yy_buffer_stack_top = 0;
yy_buffer_stack_max = 0;

yy_state_buf = 0;
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
delete [] yy_state_buf;
CEvaluationfree(yy_start_stack);
yy_delete_buffer(YY_CURRENT_BUFFER);
CEvaluationfree(yy_buffer_stack);
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams(std::istream* new_in, std::ostream* new_out)
{
if (new_in)
  {
    yy_delete_buffer(YY_CURRENT_BUFFER);
    yy_switch_to_buffer(yy_create_buffer(new_in, YY_BUF_SIZE));
  }

if (new_out)
  yyout = new_out;
}

#ifdef YY_INTERACTIVE
size_t yyFlexLexer::LexerInput(char* buf, size_t /* max_size */)
#else
size_t yyFlexLexer::LexerInput(char* buf, size_t max_size)
#endif
{
if (yyin->eof() || yyin->fail())
  return 0;

#ifdef YY_INTERACTIVE
yyin->get(buf[0]);

if (yyin->eof())
  return 0;

if (yyin->bad())
  return -1;

return 1;

#else
(void) yyin->read(buf, max_size);

if (yyin->bad())
  return -1;
else
  return yyin->gcount();

#endif
}

void yyFlexLexer::LexerOutput(const char* buf, size_t size)
{
(void) yyout->write(buf, size);
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *  EOB_ACT_LAST_MATCH -
 *  EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *  EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
register char *source = (yytext_ptr);
register int number_to_move, i;
int ret_val;

if ((yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1])
  YY_FATAL_ERROR(
    "fatal flex scanner internal error--end of buffer missed");

if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0)
  {
    /* Don't try to fill the buffer, so this is an EOF. */
    if ((yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1)
      {
        /* We matched a single character, the EOB, so
         * treat this as a final EOF.
         */
        return EOB_ACT_END_OF_FILE;
      }

    else
      {
        /* We matched some text prior to the EOB, first
         * process it.
         */
        return EOB_ACT_LAST_MATCH;
      }
  }

/* Try to read more data. */

/* First move last chars to start of buffer. */
number_to_move = (int)((yy_c_buf_p) - (yytext_ptr)) - 1;

for (i = 0; i < number_to_move; ++i)
  *(dest++) = *(source++);

if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
  /* don't do the read, it's not guaranteed to return an EOF,
   * just force an EOF
   */
  YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

else
  {
    int num_to_read =
      YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

    while (num_to_read <= 0)
      {
        /* Not enough room in the buffer - grow it. */

        /* just a shorter name for the current buffer */
        YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

        int yy_c_buf_p_offset =
          (int)((yy_c_buf_p) - b->yy_ch_buf);

        if (b->yy_is_our_buffer)
          {
            int new_size = b->yy_buf_size * 2;

            if (new_size <= 0)
              b->yy_buf_size += b->yy_buf_size / 8;
            else
              b->yy_buf_size *= 2;

            b->yy_ch_buf = (char *)
                           /* Include room in for 2 EOB chars. */
                           CEvaluationrealloc((void *) b->yy_ch_buf, b->yy_buf_size + 2);
          }
        else
          /* Can't grow it, we don't own it. */
          b->yy_ch_buf = 0;

        if (! b->yy_ch_buf)
          YY_FATAL_ERROR(
            "fatal error - scanner input buffer overflow");

        (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

        num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
                      number_to_move - 1;
      }

    if (num_to_read > YY_READ_BUF_SIZE)
      num_to_read = YY_READ_BUF_SIZE;

    /* Read in more data. */
    YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
             (yy_n_chars), (size_t) num_to_read);

    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
  }

if ((yy_n_chars) == 0)
  {
    if (number_to_move == YY_MORE_ADJ)
      {
        ret_val = EOB_ACT_END_OF_FILE;
        yyrestart(yyin);
      }

    else
      {
        ret_val = EOB_ACT_LAST_MATCH;
        YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
          YY_BUFFER_EOF_PENDING;
      }
  }

else
  ret_val = EOB_ACT_CONTINUE_SCAN;

if ((yy_size_t)((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size)
  {
    /* Extend the array by 50%, plus the number we really need. */
    yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
    YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) CEvaluationrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size);

    if (! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
      YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
  }

(yy_n_chars) += number_to_move;
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

(yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
{
register yy_state_type yy_current_state;
register char *yy_cp;

yy_current_state = (yy_start);

for (yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp)
  {
    register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);

    if (yy_accept[yy_current_state])
      {
        (yy_last_accepting_state) = yy_current_state;
        (yy_last_accepting_cpos) = yy_cp;
      }

    while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
      {
        yy_current_state = (int) yy_def[yy_current_state];

        if (yy_current_state >= 387)
          yy_c = yy_meta[(unsigned int) yy_c];
      }

    yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
  }

return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *  next_state = yy_try_NUL_trans(current_state );
 */
yy_state_type yyFlexLexer::yy_try_NUL_trans(yy_state_type yy_current_state)
{
register int yy_is_jam;
register char *yy_cp = (yy_c_buf_p);

register YY_CHAR yy_c = 1;

if (yy_accept[yy_current_state])
  {
    (yy_last_accepting_state) = yy_current_state;
    (yy_last_accepting_cpos) = yy_cp;
  }

while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
  {
    yy_current_state = (int) yy_def[yy_current_state];

    if (yy_current_state >= 387)
      yy_c = yy_meta[(unsigned int) yy_c];
  }

yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
yy_is_jam = (yy_current_state == 386);

return yy_is_jam ? 0 : yy_current_state;
}

void yyFlexLexer::yyunput(int c, register char* yy_bp)
{
register char *yy_cp;

yy_cp = (yy_c_buf_p);

/* undo effects of setting up yytext */
 *yy_cp = (yy_hold_char);

if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2)
  {
    /* need to shift things up to make room */
    /* +2 for EOB chars. */
    register int number_to_move = (yy_n_chars) + 2;
    register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
                            YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
    register char *source =
      &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

    while (source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
      *--dest = *--source;

    yy_cp += (int)(dest - source);
    yy_bp += (int)(dest - source);
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
      (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

    if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2)
      YY_FATAL_ERROR("flex scanner push-back overflow");
  }

 *--yy_cp = (char) c;

(yytext_ptr) = yy_bp;
(yy_hold_char) = *yy_cp;
(yy_c_buf_p) = yy_cp;
}

int yyFlexLexer::yyinput()
{
int c;

 *(yy_c_buf_p) = (yy_hold_char);

if (*(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR)
  {
    /* yy_c_buf_p now points to the character we want to return.
     * If this occurs *before* the EOB characters, then it's a
     * valid NUL; if not, then we've hit the end of the buffer.
     */
    if ((yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
      /* This was really a NUL. */
      *(yy_c_buf_p) = '\0';

    else
      {
        /* need more input */
        int offset = (yy_c_buf_p) - (yytext_ptr);
        ++(yy_c_buf_p);

        switch (yy_get_next_buffer())
          {
            case EOB_ACT_LAST_MATCH:
              /* This happens because yy_g_n_b()
               * sees that we've accumulated a
               * token and flags that we need to
               * try matching the token before
               * proceeding.  But for input(),
               * there's no matching to consider.
               * So convert the EOB_ACT_LAST_MATCH
               * to EOB_ACT_END_OF_FILE.
               */

              /* Reset buffer status. */
              yyrestart(yyin);

              /*FALLTHROUGH*/

            case EOB_ACT_END_OF_FILE:
            {
              if (yywrap())
                return EOF;

              if (!(yy_did_buffer_switch_on_eof))
                YY_NEW_FILE;

#ifdef __cplusplus
                return yyinput();
#else
                return input();
#endif
              }

              case EOB_ACT_CONTINUE_SCAN:
                (yy_c_buf_p) = (yytext_ptr) + offset;
                break;
            }
        }
    }

  c = *(unsigned char *)(yy_c_buf_p);   /* cast for 8-bit char's */
  *(yy_c_buf_p) = '\0'; /* preserve yytext */
  (yy_hold_char) = *++(yy_c_buf_p);

  return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart(std::istream* input_file)
{

  if (! YY_CURRENT_BUFFER)
    {
      yyensure_buffer_stack();
      YY_CURRENT_BUFFER_LVALUE =
        yy_create_buffer(yyin, YY_BUF_SIZE);
    }

  yy_init_buffer(YY_CURRENT_BUFFER, input_file);
  yy_load_buffer_state();
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yyFlexLexer::yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
{

  /* TODO. We should be able to replace this entire function body
   * with
   *    yypop_buffer_state();
   *    yypush_buffer_state(new_buffer);
     */
  yyensure_buffer_stack();

  if (YY_CURRENT_BUFFER == new_buffer)
    return;

  if (YY_CURRENT_BUFFER)
    {
      /* Flush out information for old buffer. */
      *(yy_c_buf_p) = (yy_hold_char);
      YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

  YY_CURRENT_BUFFER_LVALUE = new_buffer;
  yy_load_buffer_state();

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  (yy_did_buffer_switch_on_eof) = 1;
}

void yyFlexLexer::yy_load_buffer_state()
{
  (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
  (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
  yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
  (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yyFlexLexer::yy_create_buffer(std::istream* file, int size)
{
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE) CEvaluationalloc(sizeof(struct yy_buffer_state));

  if (! b)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *) CEvaluationalloc(b->yy_buf_size + 2);

  if (! b->yy_ch_buf)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  yy_init_buffer(b, file);

  return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yyFlexLexer::yy_delete_buffer(YY_BUFFER_STATE b)
{

  if (! b)
    return;

  if (b == YY_CURRENT_BUFFER)   /* Not sure if we should pop here. */
    YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

  if (b->yy_is_our_buffer)
    CEvaluationfree((void *) b->yy_ch_buf);

  CEvaluationfree((void *) b);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
void yyFlexLexer::yy_init_buffer(YY_BUFFER_STATE b, std::istream* file)

{
  int oerrno = errno;

  yy_flush_buffer(b);

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

  /* If b is the current buffer, then yy_init_buffer was _probably_
   * called from yyrestart() or through yy_get_next_buffer.
   * In that case, we don't want to reset the lineno or column.
   */
  if (b != YY_CURRENT_BUFFER)
    {
      b->yy_bs_lineno = 1;
      b->yy_bs_column = 0;
    }

  b->yy_is_interactive = 0;
  errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yyFlexLexer::yy_flush_buffer(YY_BUFFER_STATE b)
{
  if (! b)
    return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == YY_CURRENT_BUFFER)
    yy_load_buffer_state();
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yyFlexLexer::yypush_buffer_state(YY_BUFFER_STATE new_buffer)
{
  if (new_buffer == NULL)
    return;

  yyensure_buffer_stack();

  /* This block is copied from yy_switch_to_buffer. */
  if (YY_CURRENT_BUFFER)
    {
      /* Flush out information for old buffer. */
      *(yy_c_buf_p) = (yy_hold_char);
      YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

  /* Only push if top exists. Otherwise, replace top. */
  if (YY_CURRENT_BUFFER)
    (yy_buffer_stack_top)++;

  YY_CURRENT_BUFFER_LVALUE = new_buffer;

  /* copied from yy_switch_to_buffer. */
  yy_load_buffer_state();
  (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yyFlexLexer::yypop_buffer_state(void)
{
  if (!YY_CURRENT_BUFFER)
    return;

  yy_delete_buffer(YY_CURRENT_BUFFER);
  YY_CURRENT_BUFFER_LVALUE = NULL;

  if ((yy_buffer_stack_top) > 0)
    --(yy_buffer_stack_top);

  if (YY_CURRENT_BUFFER)
    {
      yy_load_buffer_state();
      (yy_did_buffer_switch_on_eof) = 1;
    }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
  int num_to_alloc;

  if (!(yy_buffer_stack))
    {

      /* First allocation is just for 2 elements, since we don't know if this
       * scanner will even need a stack. We use 2 instead of 1 to avoid an
       * immediate realloc on the next call.
           */
      num_to_alloc = 1;
      (yy_buffer_stack) = (struct yy_buffer_state**)CEvaluationalloc
                          (num_to_alloc * sizeof(struct yy_buffer_state*)
                          );

      if (!(yy_buffer_stack))
        YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

      memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

      (yy_buffer_stack_max) = num_to_alloc;
      (yy_buffer_stack_top) = 0;
      return;
    }

  if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1)
    {

      /* Increase the buffer to prepare for a possible push. */
      int grow_size = 8 /* arbitrary grow size */;

      num_to_alloc = (yy_buffer_stack_max) + grow_size;
      (yy_buffer_stack) = (struct yy_buffer_state**)CEvaluationrealloc
                          ((yy_buffer_stack),
                           num_to_alloc * sizeof(struct yy_buffer_state*)
                          );

      if (!(yy_buffer_stack))
        YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

      /* zero only the new slots.*/
      memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
      (yy_buffer_stack_max) = num_to_alloc;
    }
}

void yyFlexLexer::yy_push_state(int new_state)
{
  if ((yy_start_stack_ptr) >= (yy_start_stack_depth))
    {
      yy_size_t new_size;

      (yy_start_stack_depth) += YY_START_STACK_INCR;
      new_size = (yy_start_stack_depth) * sizeof(int);

      if (!(yy_start_stack))
        (yy_start_stack) = (int *) CEvaluationalloc(new_size);

      else
        (yy_start_stack) = (int *) CEvaluationrealloc((void *)(yy_start_stack), new_size);

      if (!(yy_start_stack))
        YY_FATAL_ERROR("out of memory expanding start-condition stack");
    }

  (yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

  BEGIN(new_state);
}

void yyFlexLexer::yy_pop_state()
{
  if (--(yy_start_stack_ptr) < 0)
    YY_FATAL_ERROR("start-condition stack underflow");

  BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

int yyFlexLexer::yy_top_state()
{
  return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError(yyconst char msg[])
{
  std::cerr << msg << std::endl;
  exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
  do \
    {\
      /* Undo effects of setting up yytext. */ \
      int yyless_macro_arg = (n); \
      YY_LESS_LINENO(yyless_macro_arg);\
      yytext[yyleng] = (yy_hold_char); \
      (yy_c_buf_p) = yytext + yyless_macro_arg; \
      (yy_hold_char) = *(yy_c_buf_p); \
      *(yy_c_buf_p) = '\0'; \
      yyleng = yyless_macro_arg; \
    } \
  while (0)

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char* s1, yyconst char * s2, int n)
{
  register int i;

  for (i = 0; i < n; ++i)
    s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char * s)
{
  register int n;

  for (n = 0; s[n]; ++n)
    ;

  return n;
}
#endif

void *CEvaluationalloc(yy_size_t  size)
{
  return (void *) malloc(size);
}

void *CEvaluationrealloc(void * ptr, yy_size_t  size)
{
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return (void *) realloc((char *) ptr, size);
}

void CEvaluationfree(void * ptr)
{
  free((char *) ptr);    /* see CEvaluationrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 636 "function/CEvaluationLexer.lpp"
