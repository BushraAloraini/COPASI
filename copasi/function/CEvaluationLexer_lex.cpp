/* Begin CVS Header
   $Source: /Volumes/Home/Users/shoops/cvs/copasi_dev/copasi/function/CEvaluationLexer_lex.cpp,v $
   $Revision: 1.14 $
   $Name:  $
   $Author: shoops $ 
   $Date: 2005/08/10 13:57:46 $
   End CVS Header */

#define yyFlexLexer CEvaluationFlexLexer

#line 4 "CEvaluationLexer_lex.cpp" 
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /Volumes/Home/Users/shoops/cvs/copasi_dev/copasi/function/CEvaluationLexer_lex.cpp,v 1.14 2005/08/10 13:57:46 shoops Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif

#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>
using namespace std;
#ifndef _WIN32
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif /* __STDC__ */
#endif /* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *  if (condition_holds)
 *  yyless(5);
 * else
 *  do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
 do \
  {\
  /* Undo effects of setting up yytext. */ \
  *yy_cp = yy_hold_char; \
  YY_RESTORE_YY_MORE_OFFSET \
  yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
  YY_DO_BEFORE_ACTION; /* set up yytext again */ \
  } \
 while (0)

#define unput(c) yyunput(c, yytext_ptr)

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;

struct yy_buffer_state
  {
    istream* yy_input_file;

    char *yy_ch_buf;  /* input buffer */
    char *yy_buf_pos;  /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2
  };

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer

static void *yy_flex_alloc YY_PROTO((yy_size_t));
static void *yy_flex_realloc YY_PROTO((void *, yy_size_t));
static void yy_flex_free YY_PROTO((void *));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
 {\
 if (! yy_current_buffer) \
  yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE); \
 yy_current_buffer->yy_is_interactive = is_interactive; \
 }

#define yy_set_bol(at_bol) \
 {\
 if (! yy_current_buffer) \
  yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE); \
 yy_current_buffer->yy_at_bol = at_bol; \
 }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "FlexLexer.h"

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
 yytext_ptr = yy_bp; \
 yyleng = (int) (yy_cp - yy_bp); \
 yy_hold_char = *yy_cp; \
 *yy_cp = '\0'; \
 yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 69
#define YY_END_OF_BUFFER 70
static yyconst short int yy_accept[482] =
  {0,
    0, 0, 0, 0, 0, 0, 0, 0, 70, 68,
    67, 67, 68, 58, 61, 64, 56, 54, 63, 53,
    57, 1, 68, 66, 66, 66, 66, 66, 66, 66,
    66, 66, 66, 66, 55, 66, 66, 66, 66, 66,
    66, 66, 66, 66, 66, 62, 65, 59, 60, 68,
    68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
    68, 68, 68, 68, 68, 68, 68, 68, 68, 68,
    68, 68, 68, 68, 68, 68, 67, 0, 0, 0,
    1, 1, 0, 0, 17, 0, 52, 66, 66, 66,
    66, 66, 66, 66, 66, 66, 66, 66, 66, 66,

    66, 66, 66, 3, 66, 66, 66, 66, 66, 66,
    66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
    66, 66, 66, 66, 66, 66, 66, 66, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 13, 0,
    0, 0, 10, 11, 0, 0, 8, 0, 9, 12,
    16, 3, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
    1, 51, 66, 66, 66, 66, 66, 66, 66, 66,
    66, 66, 66, 66, 66, 50, 66, 66, 7, 66,

    66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
    66, 66, 66, 66, 66, 66, 66, 66, 66, 66,
    66, 66, 66, 0, 0, 14, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 15, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 46, 66, 66, 66, 66, 66,
    66, 66, 22, 66, 26, 66, 25, 66, 20, 66,
    66, 66, 66, 66, 18, 66, 24, 66, 21, 66,
    66, 23, 66, 4, 66, 66, 66, 66, 66, 66,

    66, 66, 66, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 4, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 34, 66, 66, 66, 66, 66, 33,
    35, 48, 28, 32, 31, 66, 66, 5, 66, 66,
    66, 30, 27, 45, 29, 66, 66, 66, 66, 66,
    66, 66, 66, 0, 0, 0, 0, 0, 0, 0,
    5, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 66, 66, 66, 66, 66, 66, 66, 66,
    47, 66, 19, 66, 66, 66, 66, 66, 66, 66,

    66, 66, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    66, 38, 66, 37, 66, 36, 66, 66, 66, 66,
    66, 66, 66, 66, 66, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 40, 44, 43,
    42, 39, 41, 66, 66, 6, 66, 66, 0, 0,
    6, 0, 0, 66, 66, 66, 0, 0, 0, 66,
    49, 66, 0, 0, 66, 66, 0, 0, 2, 2,
    0
  };

static yyconst int yy_ec[256] =
  {0,
    1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
    1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 2, 1, 4, 1, 1, 5, 1, 1, 6,
    7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
    16, 16, 16, 16, 16, 16, 16, 1, 1, 17,
    1, 18, 1, 1, 19, 20, 21, 22, 23, 24,
    25, 26, 27, 28, 28, 29, 28, 30, 31, 32,
    33, 34, 35, 36, 37, 28, 28, 38, 39, 28,
    1, 40, 1, 41, 28, 1, 42, 43, 44, 45,

    46, 47, 48, 49, 50, 28, 28, 51, 28, 52,
    53, 54, 55, 56, 57, 58, 59, 28, 28, 60,
    61, 28, 62, 1, 63, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,

    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1
  };

static yyconst int yy_meta[64] =
  {0,
    1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
    1, 1, 1, 2, 2, 2, 1, 1, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
    1, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 1, 1
  };

static yyconst short int yy_base[486] =
  {0,
    0, 0, 0, 0, 63, 0, 118, 119, 1047, 1048,
    129, 131, 132, 1048, 1048, 1048, 1048, 1048, 1048, 1048,
    1048, 123, 122, 139, 1040, 145, 141, 135, 137, 146,
    147, 136, 159, 175, 1048, 144, 138, 150, 177, 151,
    152, 160, 149, 179, 184, 1048, 1048, 1048, 1048, 187,
    1039, 183, 198, 214, 209, 218, 221, 224, 205, 210,
    232, 235, 229, 206, 240, 245, 247, 250, 255, 260,
    264, 261, 262, 265, 267, 266, 194, 274, 1038, 1040,
    276, 312, 265, 264, 1048, 1039, 1034, 1034, 281, 315,
    282, 323, 319, 324, 325, 326, 269, 327, 328, 1033,

    271, 330, 331, 1032, 333, 334, 335, 336, 337, 288,
    338, 343, 346, 347, 351, 356, 359, 357, 364, 365,
    362, 369, 366, 372, 367, 370, 371, 373, 1031, 375,
    374, 376, 378, 377, 387, 380, 386, 379, 1030, 388,
    406, 419, 1029, 1028, 1027, 422, 1026, 423, 1025, 1024,
    1023, 1022, 424, 425, 427, 428, 430, 431, 382, 389,
    396, 432, 434, 437, 438, 441, 443, 446, 445, 448,
    447, 454, 451, 453, 450, 456, 457, 458, 457, 269,
    454, 1048, 1021, 469, 476, 460, 477, 480, 487, 504,
    509, 486, 485, 512, 513, 1019, 514, 516, 1019, 517,

    519, 518, 520, 526, 471, 521, 523, 528, 530, 527,
    533, 534, 531, 532, 536, 542, 544, 545, 547, 549,
    546, 550, 551, 1018, 552, 1017, 553, 555, 556, 562,
    566, 594, 595, 571, 567, 599, 600, 601, 602, 603,
    604, 605, 606, 610, 1016, 557, 607, 563, 616, 612,
    613, 617, 618, 619, 620, 629, 621, 630, 631, 632,
    633, 634, 636, 637, 1014, 1014, 638, 648, 639, 1013,
    1012, 1011, 1009, 1009, 1007, 1007, 1005, 1005, 1003, 646,
    653, 647, 643, 649, 1002, 642, 1001, 1001, 999, 999,
    998, 996, 996, 995, 641, 651, 654, 655, 681, 644,

    682, 683, 685, 994, 687, 689, 694, 993, 992, 991,
    990, 989, 988, 696, 697, 698, 699, 700, 703, 987,
    986, 985, 984, 983, 702, 704, 705, 708, 709, 717,
    713, 714, 718, 981, 721, 719, 723, 731, 735, 980,
    979, 978, 977, 976, 975, 725, 730, 975, 974, 740,
    973, 971, 970, 969, 968, 733, 736, 737, 743, 745,
    739, 746, 762, 747, 752, 765, 764, 766, 769, 770,
    968, 967, 771, 960, 768, 772, 773, 778, 781, 782,
    783, 787, 793, 794, 795, 797, 801, 803, 802, 804,
    958, 799, 956, 800, 805, 807, 808, 809, 812, 816,

    828, 818, 834, 836, 837, 838, 839, 840, 841, 832,
    844, 830, 835, 842, 845, 846, 847, 849, 861, 863,
    956, 953, 953, 951, 951, 949, 949, 948, 947, 864,
    866, 867, 868, 871, 869, 946, 945, 943, 941, 934,
    933, 876, 880, 875, 877, 881, 882, 930, 929, 924,
    917, 564, 563, 883, 886, 561, 884, 887, 891, 896,
    560, 892, 897, 898, 558, 899, 901, 479, 902, 903,
    474, 910, 916, 913, 923, 921, 927, 922, 472, 468,
    1048, 968, 970, 395, 388
  };

static yyconst short int yy_def[486] =
  {0,
    481, 1, 1, 1, 481, 5, 1, 1, 481, 481,
    481, 481, 482, 481, 481, 481, 481, 481, 481, 481,
    481, 481, 483, 484, 484, 484, 484, 484, 484, 484,
    484, 484, 484, 484, 481, 484, 484, 484, 484, 484,
    484, 484, 484, 484, 484, 481, 481, 481, 481, 485,
    485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
    485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
    485, 485, 485, 485, 485, 485, 481, 482, 481, 482,
    481, 481, 481, 483, 481, 483, 481, 484, 484, 484,
    484, 484, 484, 484, 484, 484, 484, 484, 484, 484,

    484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
    484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
    484, 484, 484, 484, 484, 484, 484, 484, 485, 485,
    485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
    485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
    485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
    485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
    485, 485, 485, 485, 485, 485, 485, 485, 481, 481,
    481, 481, 484, 484, 484, 484, 484, 484, 484, 484,
    484, 484, 484, 484, 484, 481, 484, 484, 484, 484,

    484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
    484, 484, 484, 484, 484, 484, 484, 484, 484, 484,
    484, 484, 484, 485, 485, 485, 485, 485, 485, 485,
    485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
    485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
    485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
    485, 485, 485, 485, 481, 484, 484, 484, 484, 484,
    484, 484, 481, 484, 481, 484, 481, 484, 481, 484,
    484, 484, 484, 484, 481, 484, 481, 484, 481, 484,
    484, 481, 484, 484, 484, 484, 484, 484, 484, 484,

    484, 484, 484, 485, 485, 485, 485, 485, 485, 485,
    485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
    485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
    485, 485, 485, 481, 484, 484, 484, 484, 484, 481,
    481, 481, 481, 481, 481, 484, 484, 484, 484, 484,
    484, 481, 481, 481, 481, 484, 484, 484, 484, 484,
    484, 484, 484, 485, 485, 485, 485, 485, 485, 485,
    485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
    485, 485, 484, 484, 484, 484, 484, 484, 484, 484,
    481, 484, 481, 484, 484, 484, 484, 484, 484, 484,

    484, 484, 485, 485, 485, 485, 485, 485, 485, 485,
    485, 485, 485, 485, 485, 485, 485, 485, 485, 485,
    484, 481, 484, 481, 484, 481, 484, 484, 484, 484,
    484, 484, 484, 484, 484, 485, 485, 485, 485, 485,
    485, 485, 485, 485, 485, 485, 485, 481, 481, 481,
    481, 481, 481, 484, 484, 484, 484, 484, 485, 485,
    485, 485, 485, 484, 484, 484, 485, 485, 485, 484,
    481, 484, 485, 485, 484, 484, 485, 485, 484, 485,
    0, 481, 481, 481, 481
  };

static yyconst short int yy_nxt[1112] =
  {0,
    10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
    20, 10, 21, 22, 22, 22, 23, 10, 24, 25,
    26, 25, 27, 28, 25, 25, 29, 25, 30, 31,
    25, 32, 25, 25, 33, 34, 25, 25, 25, 10,
    35, 36, 25, 37, 25, 38, 39, 25, 25, 40,
    41, 42, 25, 43, 25, 25, 44, 45, 25, 25,
    25, 46, 47, 10, 11, 12, 13, 14, 15, 16,
    17, 48, 19, 49, 10, 21, 22, 22, 22, 23,
    10, 50, 51, 52, 51, 53, 54, 55, 51, 56,
    51, 57, 58, 59, 60, 51, 51, 61, 62, 51,

    63, 51, 10, 35, 64, 51, 65, 51, 66, 67,
    68, 51, 69, 70, 71, 72, 73, 51, 51, 74,
    75, 51, 76, 51, 46, 47, 10, 10, 10, 10,
    77, 77, 77, 77, 81, 79, 82, 82, 82, 85,
    87, 87, 87, 87, 87, 83, 87, 25, 25, 87,
    87, 87, 87, 98, 87, 87, 87, 87, 89, 90,
    100, 86, 104, 99, 87, 87, 101, 94, 83, 25,
    25, 80, 91, 92, 93, 95, 102, 103, 97, 96,
    87, 105, 87, 115, 87, 106, 110, 111, 87, 87,
    116, 107, 87, 108, 117, 77, 77, 100, 104, 112,

    113, 114, 121, 87, 122, 136, 130, 131, 109, 118,
    87, 87, 123, 137, 87, 87, 132, 138, 119, 87,
    133, 134, 135, 87, 124, 127, 87, 120, 125, 87,
    139, 143, 141, 126, 87, 140, 152, 87, 151, 128,
    87, 145, 142, 147, 144, 87, 150, 146, 159, 160,
    87, 148, 87, 156, 153, 87, 149, 161, 154, 158,
    87, 162, 163, 164, 155, 87, 87, 87, 157, 87,
    87, 87, 87, 180, 87, 180, 87, 79, 181, 181,
    181, 85, 181, 181, 181, 165, 87, 87, 169, 179,
    179, 179, 166, 87, 197, 143, 167, 170, 83, 139,

    192, 145, 185, 86, 168, 147, 171, 144, 176, 150,
    173, 152, 172, 80, 174, 183, 151, 149, 178, 175,
    87, 83, 177, 81, 87, 82, 82, 82, 87, 87,
    87, 87, 87, 87, 83, 87, 87, 187, 87, 87,
    87, 87, 87, 87, 183, 184, 191, 193, 87, 186,
    188, 87, 87, 200, 198, 194, 87, 83, 195, 189,
    190, 87, 87, 201, 87, 203, 199, 87, 202, 87,
    87, 87, 87, 204, 87, 87, 87, 87, 87, 87,
    87, 87, 87, 87, 87, 87, 206, 87, 208, 129,
    205, 87, 87, 87, 87, 207, 88, 226, 227, 233,

    209, 87, 212, 228, 225, 229, 230, 214, 217, 224,
    213, 87, 210, 211, 215, 219, 218, 216, 220, 234,
    231, 232, 222, 199, 87, 221, 235, 87, 87, 87,
    87, 223, 87, 87, 236, 87, 87, 87, 224, 87,
    226, 246, 87, 87, 240, 238, 87, 239, 87, 237,
    87, 87, 87, 87, 241, 87, 87, 243, 87, 87,
    242, 87, 87, 87, 245, 87, 244, 181, 181, 181,
    179, 179, 179, 87, 87, 247, 87, 87, 249, 83,
    182, 87, 87, 248, 471, 87, 253, 250, 255, 270,
    87, 279, 273, 258, 260, 256, 267, 251, 252, 254,

    257, 259, 83, 266, 261, 262, 271, 263, 272, 275,
    268, 269, 274, 245, 277, 264, 280, 87, 87, 87,
    281, 285, 287, 87, 289, 292, 87, 266, 87, 276,
    286, 87, 273, 87, 278, 87, 279, 87, 275, 277,
    284, 87, 288, 283, 290, 293, 282, 87, 294, 87,
    285, 87, 287, 291, 289, 292, 87, 87, 87, 303,
    87, 87, 87, 471, 295, 87, 87, 87, 87, 182,
    182, 273, 87, 305, 270, 274, 279, 296, 297, 271,
    272, 276, 278, 298, 308, 309, 304, 306, 307, 299,
    310, 311, 300, 302, 301, 288, 294, 290, 293, 275,

    277, 314, 315, 291, 87, 87, 87, 285, 287, 289,
    87, 292, 87, 304, 308, 87, 319, 87, 273, 312,
    313, 87, 275, 277, 279, 87, 87, 318, 320, 321,
    317, 323, 324, 316, 87, 87, 285, 287, 289, 87,
    322, 292, 87, 87, 87, 333, 87, 87, 87, 87,
    325, 87, 87, 87, 87, 351, 87, 339, 87, 87,
    87, 311, 310, 326, 327, 312, 313, 309, 335, 348,
    337, 328, 336, 331, 338, 346, 349, 329, 350, 332,
    320, 321, 324, 347, 323, 330, 87, 87, 87, 348,
    87, 322, 87, 356, 87, 360, 358, 357, 351, 87,

    359, 87, 87, 87, 87, 87, 361, 87, 87, 87,
    87, 366, 368, 87, 87, 367, 374, 364, 87, 87,
    371, 365, 87, 87, 87, 369, 87, 370, 87, 373,
    87, 374, 372, 362, 363, 87, 87, 349, 87, 385,
    87, 87, 87, 386, 87, 87, 379, 389, 87, 377,
    87, 87, 87, 378, 375, 383, 384, 87, 376, 380,
    387, 381, 371, 390, 388, 382, 392, 87, 372, 87,
    87, 87, 405, 87, 87, 87, 87, 87, 87, 396,
    397, 403, 404, 87, 400, 406, 87, 87, 87, 394,
    395, 409, 87, 407, 398, 408, 399, 411, 87, 422,

    424, 401, 426, 410, 87, 87, 87, 87, 87, 87,
    422, 402, 424, 426, 87, 414, 415, 87, 421, 423,
    425, 87, 427, 87, 412, 413, 428, 418, 429, 416,
    431, 430, 417, 87, 432, 87, 420, 87, 419, 87,
    422, 422, 424, 426, 87, 87, 87, 424, 421, 87,
    426, 87, 87, 423, 87, 425, 427, 428, 443, 436,
    429, 437, 438, 439, 440, 441, 87, 433, 87, 87,
    442, 87, 87, 87, 87, 435, 87, 434, 436, 444,
    87, 87, 87, 437, 455, 87, 87, 87, 87, 87,
    438, 87, 87, 439, 440, 441, 87, 87, 460, 454,

    445, 87, 87, 87, 87, 456, 87, 87, 87, 464,
    446, 459, 458, 461, 465, 87, 470, 467, 87, 473,
    447, 87, 463, 182, 468, 457, 87, 87, 87, 456,
    182, 475, 87, 466, 462, 182, 182, 465, 453, 452,
    472, 469, 461, 474, 477, 479, 451, 468, 450, 480,
    449, 448, 453, 452, 451, 182, 450, 182, 449, 182,
    476, 448, 182, 478, 182, 393, 479, 480, 78, 78,
    84, 84, 391, 87, 182, 182, 182, 182, 393, 391,
    87, 182, 182, 182, 182, 182, 182, 182, 87, 355,
    354, 353, 352, 345, 344, 343, 342, 341, 340, 334,

    87, 355, 182, 354, 353, 182, 352, 182, 182, 182,
    345, 182, 344, 182, 343, 182, 342, 341, 340, 334,
    182, 87, 87, 265, 87, 182, 265, 87, 87, 87,
    87, 87, 196, 87, 87, 87, 87, 87, 196, 87,
    182, 481, 481, 87, 87, 87, 481, 9, 481, 481,
    481, 481, 481, 481, 481, 481, 481, 481, 481, 481,
    481, 481, 481, 481, 481, 481, 481, 481, 481, 481,
    481, 481, 481, 481, 481, 481, 481, 481, 481, 481,
    481, 481, 481, 481, 481, 481, 481, 481, 481, 481,
    481, 481, 481, 481, 481, 481, 481, 481, 481, 481,

    481, 481, 481, 481, 481, 481, 481, 481, 481, 481,
    481
  };

static yyconst short int yy_chk[1112] =
  {0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5,

    5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 7, 8, 7, 8,
    11, 11, 12, 12, 22, 13, 22, 22, 22, 23,
    28, 32, 29, 37, 24, 22, 27, 7, 8, 36,
    26, 30, 31, 28, 43, 38, 40, 41, 24, 24,
    29, 23, 32, 28, 33, 42, 29, 26, 22, 7,
    8, 13, 24, 24, 24, 26, 30, 31, 27, 26,
    34, 33, 39, 37, 44, 33, 36, 36, 52, 45,
    37, 33, 50, 34, 37, 77, 77, 40, 43, 36,

    36, 36, 40, 53, 41, 52, 50, 50, 34, 38,
    59, 64, 42, 52, 55, 60, 50, 52, 39, 54,
    50, 50, 50, 56, 44, 45, 57, 39, 44, 58,
    53, 55, 54, 44, 63, 53, 60, 61, 59, 45,
    62, 56, 54, 57, 55, 65, 58, 56, 64, 64,
    66, 57, 67, 62, 61, 68, 57, 64, 61, 63,
    69, 64, 64, 64, 61, 70, 72, 73, 62, 71,
    74, 76, 75, 83, 97, 83, 101, 78, 83, 83,
    83, 84, 180, 180, 180, 65, 89, 91, 67, 81,
    81, 81, 65, 110, 101, 68, 65, 67, 81, 66,

    97, 69, 91, 84, 66, 70, 69, 68, 75, 71,
    74, 73, 70, 78, 74, 89, 72, 70, 76, 74,
    90, 81, 75, 82, 93, 82, 82, 82, 92, 94,
    95, 96, 98, 99, 82, 102, 103, 93, 105, 106,
    107, 108, 109, 111, 110, 90, 96, 98, 112, 92,
    94, 113, 114, 105, 102, 98, 115, 82, 99, 95,
    95, 116, 118, 106, 117, 108, 103, 121, 107, 119,
    120, 123, 125, 109, 122, 126, 127, 124, 128, 131,
    130, 132, 134, 133, 138, 136, 112, 159, 114, 485,
    111, 137, 135, 140, 160, 113, 484, 132, 133, 138,

    115, 161, 117, 134, 131, 135, 136, 119, 121, 130,
    118, 141, 116, 116, 119, 124, 122, 120, 125, 140,
    137, 137, 127, 123, 142, 126, 141, 146, 148, 153,
    154, 128, 155, 156, 141, 157, 158, 162, 159, 163,
    161, 160, 164, 165, 153, 146, 166, 148, 167, 142,
    169, 168, 171, 170, 154, 175, 173, 156, 174, 172,
    155, 176, 177, 178, 158, 186, 157, 181, 181, 181,
    179, 179, 179, 480, 184, 162, 205, 479, 164, 179,
    471, 185, 187, 163, 468, 188, 167, 165, 169, 186,
    193, 192, 189, 171, 173, 169, 185, 166, 166, 168,

    170, 172, 179, 184, 174, 175, 187, 176, 188, 190,
    185, 185, 189, 178, 191, 177, 192, 194, 195, 197,
    193, 198, 200, 202, 201, 203, 206, 205, 207, 190,
    198, 204, 210, 208, 191, 209, 213, 214, 211, 212,
    197, 215, 200, 195, 201, 203, 194, 216, 204, 217,
    218, 221, 219, 202, 220, 222, 223, 225, 227, 218,
    228, 229, 246, 465, 206, 461, 456, 230, 248, 453,
    452, 231, 235, 227, 207, 210, 234, 206, 206, 208,
    209, 211, 212, 213, 228, 229, 225, 227, 227, 214,
    230, 231, 215, 217, 216, 219, 223, 220, 222, 232,

    233, 234, 235, 221, 236, 237, 238, 239, 240, 241,
    242, 243, 247, 246, 248, 244, 239, 250, 251, 232,
    233, 249, 252, 253, 254, 255, 257, 238, 240, 241,
    237, 243, 244, 236, 256, 258, 259, 260, 261, 262,
    242, 263, 264, 267, 269, 259, 295, 286, 283, 300,
    247, 280, 282, 268, 284, 286, 296, 269, 281, 297,
    298, 251, 250, 247, 247, 252, 253, 249, 267, 282,
    268, 254, 267, 257, 268, 280, 283, 255, 284, 258,
    260, 261, 264, 281, 263, 256, 299, 301, 302, 300,
    303, 262, 305, 295, 306, 297, 296, 295, 303, 307,

    296, 314, 315, 316, 317, 318, 298, 325, 319, 326,
    327, 306, 307, 328, 329, 306, 319, 305, 331, 332,
    316, 305, 330, 333, 336, 314, 335, 315, 337, 318,
    346, 333, 317, 299, 302, 347, 338, 301, 356, 336,
    339, 357, 358, 337, 361, 350, 327, 346, 359, 326,
    360, 362, 364, 326, 325, 335, 335, 365, 325, 328,
    338, 329, 330, 347, 339, 332, 350, 363, 331, 367,
    366, 368, 365, 375, 369, 370, 373, 376, 377, 357,
    358, 364, 364, 378, 361, 366, 379, 380, 381, 356,
    356, 369, 382, 367, 359, 368, 360, 373, 383, 384,

    385, 362, 386, 370, 392, 394, 387, 389, 388, 390,
    395, 363, 396, 397, 398, 376, 377, 399, 383, 384,
    385, 400, 386, 402, 375, 375, 387, 380, 388, 378,
    390, 389, 379, 401, 392, 412, 382, 410, 381, 403,
    413, 404, 405, 406, 407, 408, 409, 414, 394, 411,
    415, 416, 417, 395, 418, 396, 397, 398, 410, 403,
    399, 404, 405, 406, 407, 408, 419, 400, 420, 430,
    409, 431, 432, 433, 435, 402, 434, 401, 412, 411,
    444, 442, 445, 413, 431, 443, 446, 447, 454, 457,
    414, 455, 458, 415, 416, 417, 459, 462, 443, 430,

    418, 460, 463, 464, 466, 432, 467, 469, 470, 454,
    419, 442, 434, 444, 455, 472, 464, 459, 474, 467,
    420, 473, 446, 451, 460, 433, 476, 478, 475, 435,
    450, 470, 477, 457, 445, 449, 448, 458, 441, 440,
    466, 462, 447, 469, 473, 475, 439, 463, 438, 477,
    437, 436, 429, 428, 427, 426, 425, 424, 423, 422,
    472, 421, 393, 474, 391, 374, 476, 478, 482, 482,
    483, 483, 372, 371, 355, 354, 353, 352, 351, 349,
    348, 345, 344, 343, 342, 341, 340, 334, 324, 323,
    322, 321, 320, 313, 312, 311, 310, 309, 308, 304,

    294, 293, 292, 291, 290, 289, 288, 287, 285, 279,
    278, 277, 276, 275, 274, 273, 272, 271, 270, 266,
    265, 245, 226, 224, 199, 196, 183, 152, 151, 150,
    149, 147, 145, 144, 143, 139, 129, 104, 100, 88,
    87, 86, 80, 79, 51, 25, 9, 481, 481, 481,
    481, 481, 481, 481, 481, 481, 481, 481, 481, 481,
    481, 481, 481, 481, 481, 481, 481, 481, 481, 481,
    481, 481, 481, 481, 481, 481, 481, 481, 481, 481,
    481, 481, 481, 481, 481, 481, 481, 481, 481, 481,
    481, 481, 481, 481, 481, 481, 481, 481, 481, 481,

    481, 481, 481, 481, 481, 481, 481, 481, 481, 481,
    481
  };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "CEvaluationLexer.lpp"
#define INITIAL 0 
/* scanner for kinetic functions */
#define YY_NEVER_INTERACTIVE 1
#define sSIGN 1
#define sOPERATOR 2
#define sID 3

#line 12 "CEvaluationLexer.lpp"
#include <vector>

#include "copasi.h"
#include "CEvaluationNode.h"
#include "CEvaluationLexer.h"
#include "CEvaluationParser_yacc.h"

#ifndef YYERRCODE
#define YYERRCODE 256
#endif

#define YY_USER_INIT \
    mpNode = NULL;\
    mPosition = 0;\
    mpNodeList = new std::vector< CEvaluationNode * >;

#define COMMON_ACTION \
    mPosition += yyleng;\
    mpNodeList->push_back(mpNode);

#line 765 "CEvaluationLexer_lex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO((void));
#else
extern int yywrap YY_PROTO((void));
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO((char *, yyconst char *, int));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO((yyconst char *));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO((int new_state));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO((void));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO((void));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else 
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput(yytext, yyleng)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
 if ((result = LexerInput((char *) buf, max_size)) < 0) \
  YY_FATAL_ERROR("input in flex scanner failed");
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError(msg)
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
 YY_USER_ACTION

YY_DECL
{
  register yy_state_type yy_current_state;
  register char *yy_cp, *yy_bp;
  register int yy_act;

#line 37 "CEvaluationLexer.lpp"

#line 894 "CEvaluationLexer_lex.cpp"

  if (yy_init)
  {
    yy_init = 0;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if (! yy_start)
        yy_start = 1; /* first start state */

      if (! yyin)
        yyin = &cin;

      if (! yyout)
        yyout = &cout;

      if (! yy_current_buffer)
        yy_current_buffer =
          yy_create_buffer(yyin, YY_BUF_SIZE);

      yy_load_buffer_state();
    }

  while (1)  /* loops until end-of-file is reached */
  {
    yy_cp = yy_c_buf_p;

    /* Support of yytext. */
    *yy_cp = yy_hold_char;

    /* yy_bp points to the position in yy_ch_buf of the start of
     * the current run.
     */
    yy_bp = yy_cp;

    yy_current_state = yy_start;
  yy_match:
    do
      {
        register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
          if (yy_accept[yy_current_state])
            {
              yy_last_accepting_state = yy_current_state;
              yy_last_accepting_cpos = yy_cp;
            }
          while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
            {
              yy_current_state = (int) yy_def[yy_current_state];
              if (yy_current_state >= 482)
                yy_c = yy_meta[(unsigned int) yy_c];
            }
          yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
          ++yy_cp;
        }
      while (yy_base[yy_current_state] != 1048);

  yy_find_action:
      yy_act = yy_accept[yy_current_state];
      if (yy_act == 0)
        {/* have to back up */
          yy_cp = yy_last_accepting_cpos;
          yy_current_state = yy_last_accepting_state;
          yy_act = yy_accept[yy_current_state];
        }

      YY_DO_BEFORE_ACTION;

  do_action:  /* This label is used only to access EOF actions. */

      switch (yy_act)
        {/* beginning of action switch */
        case 0:  /* must back up */
          /* undo the effects of YY_DO_BEFORE_ACTION */
          *yy_cp = yy_hold_char;
          yy_cp = yy_last_accepting_cpos;
          yy_current_state = yy_last_accepting_state;
          goto yy_find_action;

        case 1:
          YY_RULE_SETUP
#line 38 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeNumber(CEvaluationNodeNumber::DOUBLE,
                                             yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 2:
          YY_RULE_SETUP
#line 46 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::EXPONENTIALE,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 3:
          YY_RULE_SETUP
#line 54 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::PI,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 4:
          YY_RULE_SETUP
#line 62 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::TRUE,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 5:
          YY_RULE_SETUP
#line 70 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::FALSE,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 6:
          YY_RULE_SETUP
#line 78 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::_INFINITY,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 7:
          YY_RULE_SETUP
#line 86 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::NOT,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_NOT;

          YY_BREAK
        case 8:
          YY_RULE_SETUP
#line 94 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::LE,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_LE;

          YY_BREAK
        case 9:
          YY_RULE_SETUP
#line 102 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::LT,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_LT;

          YY_BREAK
        case 10:
          YY_RULE_SETUP
#line 110 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::GE,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_GE;

          YY_BREAK
        case 11:
          YY_RULE_SETUP
#line 118 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::GT,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_GT;

          YY_BREAK
        case 12:
          YY_RULE_SETUP
#line 126 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::NE,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_NE;

          YY_BREAK
        case 13:
          YY_RULE_SETUP
#line 134 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::EQ,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_EQ;

          YY_BREAK
        case 14:
          YY_RULE_SETUP
#line 142 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::AND,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_AND;

          YY_BREAK
        case 15:
          YY_RULE_SETUP
#line 150 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::XOR,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_XOR;

          YY_BREAK
        case 16:
          YY_RULE_SETUP
#line 158 "CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::OR,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_OR;

          YY_BREAK
        case 17:
          YY_RULE_SETUP
#line 165 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeObject(CEvaluationNodeObject::ANY,
                                             yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 18:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 173 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::LOG,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 19:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 181 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::LOG10,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 20:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 189 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::EXP,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 21:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 197 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SIN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 22:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 205 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 23:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 213 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::TAN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 24:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 221 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SEC,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 25:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 229 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CSC,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 26:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 237 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COT,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 27:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 245 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SINH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 28:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 253 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COSH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 29:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 261 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::TANH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 30:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 269 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SECH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 31:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 277 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CSCH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 32:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 285 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COTH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 33:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 293 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSIN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 34:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 301 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 35:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 309 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCTAN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 36:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 317 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSEC,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 37:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 325 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCSC,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 38:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 333 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOT,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 39:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 341 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSINH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 40:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 349 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOSH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 41:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 357 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCTANH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 42:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 365 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSECH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 43:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 373 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCSCH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 44:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 381 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOTH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 45:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 389 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SQRT,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 46:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 397 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ABS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 47:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 405 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::FLOOR,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 48:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 413 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CEIL,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 49:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 421 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::FACTORIAL,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 50:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 429 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeChoice(CEvaluationNodeChoice::IF,
                                             yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_CHOICE;

          YY_BREAK
        case 51:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 437 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          {
            std::string tmp(yytext);
            mpNode = new CEvaluationNodeCall(CEvaluationNodeCall::EXPRESSION,
                                             tmp.substr(0, tmp.length() - 1));
          }
          COMMON_ACTION;
          return TOKEN_CALL;

          YY_BREAK
        case 52:
          YY_RULE_SETUP
#line 448 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          {
            std::string tmp(yytext);
            mpNode = new CEvaluationNodeCall(CEvaluationNodeCall::FUNCTION,
                                             tmp.substr(0, tmp.length() - 1));
          }
          COMMON_ACTION;
          return TOKEN_CALL;

          YY_BREAK
        case 53:
          YY_RULE_SETUP
#line 459 "CEvaluationLexer.lpp"

          BEGIN(sID);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::MINUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_SIGN;

          YY_BREAK
        case 54:
          YY_RULE_SETUP
#line 467 "CEvaluationLexer.lpp"

          BEGIN(sID);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::PLUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_SIGN;

          YY_BREAK
        case 55:
          YY_RULE_SETUP
#line 475 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::POWER,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_POWER;

          YY_BREAK
        case 56:
          YY_RULE_SETUP
#line 483 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MULTIPLY,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_MULTIPLY;

          YY_BREAK
        case 57:
          YY_RULE_SETUP
#line 491 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::DIVIDE,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_MULTIPLY;

          YY_BREAK
        case 58:
          YY_RULE_SETUP
#line 499 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MODULUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_MODULUS;

          YY_BREAK
        case 59:
          YY_RULE_SETUP
#line 507 "CEvaluationLexer.lpp"

          BEGIN(sID);
          mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::PLUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_PLUS;

          YY_BREAK
        case 60:
          YY_RULE_SETUP
#line 515 "CEvaluationLexer.lpp"

          BEGIN(sID);
          mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MINUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_PLUS;

          YY_BREAK
        case 61:
          YY_RULE_SETUP
#line 523 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::OPEN,
                                                yytext);
          COMMON_ACTION;
          return TOKEN_STRUCTURE_OPEN;

          YY_BREAK
        case 62:
          YY_RULE_SETUP
#line 531 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::VECTOR_OPEN,
                                                yytext);
          COMMON_ACTION;
          return TOKEN_STRUCTURE_VECTOR_OPEN;

          YY_BREAK
        case 63:
          YY_RULE_SETUP
#line 539 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::COMMA,
                                                yytext);
          COMMON_ACTION;
          return TOKEN_STRUCTURE_COMMA;

          YY_BREAK
        case 64:
          YY_RULE_SETUP
#line 547 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::CLOSE,
                                                yytext);
          COMMON_ACTION;
          return TOKEN_STRUCTURE_CLOSE;

          YY_BREAK
        case 65:
          YY_RULE_SETUP
#line 555 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::VECTOR_CLOSE,
                                                yytext);
          COMMON_ACTION;
          return TOKEN_STRUCTURE_VECTOR_CLOSE;

          YY_BREAK
        case 66:
          YY_RULE_SETUP
#line 563 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeVariable(CEvaluationNodeVariable::ANY,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_VARIABLE;

          YY_BREAK
        case 67:
          YY_RULE_SETUP
#line 571 "CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeWhiteSpace(CEvaluationNodeWhiteSpace::ANY,
                                                 yytext);
          COMMON_ACTION;

          YY_BREAK
        case YY_STATE_EOF(INITIAL):
              case YY_STATE_EOF(sSIGN):
                case YY_STATE_EOF(sOPERATOR):
                  case YY_STATE_EOF(sID):
#line 577 "CEvaluationLexer.lpp"
                      return 0;
          YY_BREAK
        case 68:
          YY_RULE_SETUP
#line 579 "CEvaluationLexer.lpp"

          CCopasiMessage(CCopasiMessage::ERROR, MCFunction + 2, mPosition);
          return YYERRCODE;

          YY_BREAK
        case 69:
          YY_RULE_SETUP
#line 584 "CEvaluationLexer.lpp"
          ECHO;
          YY_BREAK
#line 1839 "CEvaluationLexer_lex.cpp"

        case YY_END_OF_BUFFER:
      {
            /* Amount of text matched not including the EOB char. */
            int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

            /* Undo the effects of YY_DO_BEFORE_ACTION. */
            *yy_cp = yy_hold_char;
            YY_RESTORE_YY_MORE_OFFSET

            if (yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW)
              {
                /* We're scanning a new file or input source.  It's
                 * possible that this happened because the user
                 * just pointed yyin at a new source and called
                 * yylex().  If so, then we have to assure
                 * consistency between yy_current_buffer and our
                 * globals.  Here is the right place to do so, because
                 * this is the first action (other than possibly a
                 * back-up) that will match for the new input source.
                 */
                yy_n_chars = yy_current_buffer->yy_n_chars;
                yy_current_buffer->yy_input_file = yyin;
                yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
              }

            /* Note that here we test for yy_c_buf_p "<=" to the position
             * of the first EOB in the buffer, since yy_c_buf_p will
             * already have been incremented past the NUL character
             * (since all states make transitions on EOB to the
             * end-of-buffer state).  Contrast this with the test
             * in input().
             */
            if (yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars])
              {/* This was really a NUL. */
                yy_state_type yy_next_state;

                yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                /* Okay, we're now positioned to make the NUL
                 * transition.  We couldn't have
                 * yy_get_previous_state() go ahead and do it
                 * for us because it doesn't know how to deal
                 * with the possibility of jamming (and we don't
                 * want to build jamming into it because then it
                 * will run more slowly).
                 */

                yy_next_state = yy_try_NUL_trans(yy_current_state);

                yy_bp = yytext_ptr + YY_MORE_ADJ;

                if (yy_next_state)
                  {
                    /* Consume the NUL. */
                    yy_cp = ++yy_c_buf_p;
                    yy_current_state = yy_next_state;
                    goto yy_match;
                  }

                else
                  {
                    yy_cp = yy_c_buf_p;
                    goto yy_find_action;
                  }
              }

            else switch (yy_get_next_buffer())
                {
                case EOB_ACT_END_OF_FILE:
                  {
                    yy_did_buffer_switch_on_eof = 0;

                    if (yywrap())
                      {
                        /* Note: because we've taken care in
                         * yy_get_next_buffer() to have set up
                         * yytext, we can now set up
                         * yy_c_buf_p so that if some total
                         * hoser (like flex itself) wants to
                         * call the scanner after we return the
                         * YY_NULL, it'll still work - another
                         * YY_NULL will get returned.
                         */
                        yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                        yy_act = YY_STATE_EOF(YY_START);
                        goto do_action;
                      }

                    else
                      {
                        if (! yy_did_buffer_switch_on_eof)
                          YY_NEW_FILE;
                      }
                    break;
                  }

                case EOB_ACT_CONTINUE_SCAN:
                  yy_c_buf_p =
                    yytext_ptr + yy_amount_of_matched_text;

                  yy_current_state = yy_get_previous_state();

                  yy_cp = yy_c_buf_p;
                  yy_bp = yytext_ptr + YY_MORE_ADJ;
                  goto yy_match;

                case EOB_ACT_LAST_MATCH:
                  yy_c_buf_p =
                    &yy_current_buffer->yy_ch_buf[yy_n_chars];

                  yy_current_state = yy_get_previous_state();

                  yy_cp = yy_c_buf_p;
                  yy_bp = yytext_ptr + YY_MORE_ADJ;
                  goto yy_find_action;
                }
            break;
          }

        default:
          YY_FATAL_ERROR(
            "fatal flex scanner internal error--no action found");
        } /* end of action switch */
    } /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer(istream* arg_yyin, ostream* arg_yyout)
{
  yyin = arg_yyin;
  yyout = arg_yyout;
  yy_c_buf_p = 0;
  yy_init = 1;
  yy_start = 0;
  yy_flex_debug = 0;
  yylineno = 1; // this will only get updated if %option yylineno

  yy_did_buffer_switch_on_eof = 0;

  yy_looking_for_trail_begin = 0;
  yy_more_flag = 0;
  yy_more_len = 0;
  yy_more_offset = yy_prev_more_offset = 0;

  yy_start_stack_ptr = yy_start_stack_depth = 0;
  yy_start_stack = 0;

  yy_current_buffer = 0;

#ifdef YY_USES_REJECT
  yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
  yy_state_buf = 0;
#endif
}

yyFlexLexer::~yyFlexLexer()
{
  delete yy_state_buf;
  yy_delete_buffer(yy_current_buffer);
}

void yyFlexLexer::switch_streams(istream* new_in, ostream* new_out)
{
  if (new_in)
    {
      yy_delete_buffer(yy_current_buffer);
      yy_switch_to_buffer(yy_create_buffer(new_in, YY_BUF_SIZE));
    }

  if (new_out)
    yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput(char* buf, int /* max_size */)
#else
int yyFlexLexer::LexerInput(char* buf, int max_size)
#endif
{
  if (yyin->eof() || yyin->fail())
    return 0;

#ifdef YY_INTERACTIVE
  yyin->get(buf[0]);

  if (yyin->eof())
    return 0;

  if (yyin->bad())
    return - 1;

  return 1;

#else
  (void) yyin->read(buf, max_size);

  if (yyin->bad())
    return - 1;
  else
    return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput(const char* buf, int size)
{
  (void) yyout->write(buf, size);
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 * EOB_ACT_LAST_MATCH -
 * EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 * EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
{
  register char *dest = yy_current_buffer->yy_ch_buf;
  register char *source = yytext_ptr;
  register int number_to_move, i;
  int ret_val;

  if (yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1])
    YY_FATAL_ERROR(
      "fatal flex scanner internal error--end of buffer missed");

  if (yy_current_buffer->yy_fill_buffer == 0)
    {/* Don't try to fill the buffer, so this is an EOF. */
      if (yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1)
        {
          /* We matched a single character, the EOB, so
           * treat this as a final EOF.
           */
          return EOB_ACT_END_OF_FILE;
        }

      else
        {
          /* We matched some text prior to the EOB, first
           * process it.
           */
          return EOB_ACT_LAST_MATCH;
        }
    }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

  for (i = 0; i < number_to_move; ++i)
    *(dest++) = *(source++);

  if (yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING)
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    yy_current_buffer->yy_n_chars = yy_n_chars = 0;

  else
    {
      int num_to_read =
        yy_current_buffer->yy_buf_size - number_to_move - 1;

      while (num_to_read <= 0)
        {/* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
          YY_FATAL_ERROR(
            "input buffer overflow, can't enlarge buffer because scanner uses REJECT");
#else

          /* just a shorter name for the current buffer */
          YY_BUFFER_STATE b = yy_current_buffer;

          int yy_c_buf_p_offset =
            (int) (yy_c_buf_p - b->yy_ch_buf);

          if (b->yy_is_our_buffer)
            {
              int new_size = b->yy_buf_size * 2;

              if (new_size <= 0)
                b->yy_buf_size += b->yy_buf_size / 8;
              else
                b->yy_buf_size *= 2;

              b->yy_ch_buf = (char *)
                             /* Include room in for 2 EOB chars. */
                             yy_flex_realloc((void *) b->yy_ch_buf,
                                              b->yy_buf_size + 2);
            }
          else
            /* Can't grow it, we don't own it. */
            b->yy_ch_buf = 0;

          if (! b->yy_ch_buf)
            YY_FATAL_ERROR(
              "fatal error - scanner input buffer overflow");

          yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

          num_to_read = yy_current_buffer->yy_buf_size -
                        number_to_move - 1;
#endif
        }

      if (num_to_read > YY_READ_BUF_SIZE)
        num_to_read = YY_READ_BUF_SIZE;

      /* Read in more data. */
      YY_INPUT((&yy_current_buffer->yy_ch_buf[number_to_move]),
                yy_n_chars, num_to_read);

      yy_current_buffer->yy_n_chars = yy_n_chars;
    }

  if (yy_n_chars == 0)
    {
      if (number_to_move == YY_MORE_ADJ)
        {
          ret_val = EOB_ACT_END_OF_FILE;
          yyrestart(yyin);
        }

      else
        {
          ret_val = EOB_ACT_LAST_MATCH;
          yy_current_buffer->yy_buffer_status =
            YY_BUFFER_EOF_PENDING;
        }
    }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  yy_n_chars += number_to_move;
  yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
  yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

  yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
{
  register yy_state_type yy_current_state;
  register char *yy_cp;

  yy_current_state = yy_start;

  for (yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp)
    {
      register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
      if (yy_accept[yy_current_state])
        {
          yy_last_accepting_state = yy_current_state;
          yy_last_accepting_cpos = yy_cp;
        }
      while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
        {
          yy_current_state = (int) yy_def[yy_current_state];
          if (yy_current_state >= 482)
            yy_c = yy_meta[(unsigned int) yy_c];
        }
      yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 * next_state = yy_try_NUL_trans(current_state);
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans(yy_state_type yy_current_state)
{
  register int yy_is_jam;
  register char *yy_cp = yy_c_buf_p;

  register YY_CHAR yy_c = 1;
  if (yy_accept[yy_current_state])
    {
      yy_last_accepting_state = yy_current_state;
      yy_last_accepting_cpos = yy_cp;
    }
  while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
    {
      yy_current_state = (int) yy_def[yy_current_state];
      if (yy_current_state >= 482)
        yy_c = yy_meta[(unsigned int) yy_c];
    }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
  yy_is_jam = (yy_current_state == 481);

  return yy_is_jam ? 0 : yy_current_state;
}

void yyFlexLexer::yyunput(int c, register char* yy_bp)
{
  register char *yy_cp = yy_c_buf_p;

  /* undo effects of setting up yytext */
  *yy_cp = yy_hold_char;

  if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
    {/* need to shift things up to make room */
      /* +2 for EOB chars. */
      register int number_to_move = yy_n_chars + 2;
      register char *dest = &yy_current_buffer->yy_ch_buf[
                              yy_current_buffer->yy_buf_size + 2];
      register char *source =
        &yy_current_buffer->yy_ch_buf[number_to_move];

      while (source > yy_current_buffer->yy_ch_buf)
        *--dest = *--source;

      yy_cp += (int) (dest - source);
      yy_bp += (int) (dest - source);
      yy_current_buffer->yy_n_chars =
        yy_n_chars = yy_current_buffer->yy_buf_size;

      if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
        YY_FATAL_ERROR("flex scanner push-back overflow");
    }

  *--yy_cp = (char) c;

  yytext_ptr = yy_bp;
  yy_hold_char = *yy_cp;
  yy_c_buf_p = yy_cp;
}

int yyFlexLexer::yyinput()
{
  int c;

  *yy_c_buf_p = yy_hold_char;

  if (*yy_c_buf_p == YY_END_OF_BUFFER_CHAR)
    {
      /* yy_c_buf_p now points to the character we want to return.
       * If this occurs *before* the EOB characters, then it's a
       * valid NUL; if not, then we've hit the end of the buffer.
       */
      if (yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars])
        /* This was really a NUL. */
        *yy_c_buf_p = '\0';

      else
        {/* need more input */
          int offset = yy_c_buf_p - yytext_ptr;
          ++yy_c_buf_p;

          switch (yy_get_next_buffer())
            {
            case EOB_ACT_LAST_MATCH:
              /* This happens because yy_g_n_b()
               * sees that we've accumulated a
               * token and flags that we need to
               * try matching the token before
               * proceeding.  But for input(),
               * there's no matching to consider.
               * So convert the EOB_ACT_LAST_MATCH
               * to EOB_ACT_END_OF_FILE.
               */

              /* Reset buffer status. */
              yyrestart(yyin);

              /* fall through */

            case EOB_ACT_END_OF_FILE:
              {
                if (yywrap())
                  return EOF;

                if (! yy_did_buffer_switch_on_eof)
                  YY_NEW_FILE;
#ifdef __cplusplus
                return yyinput();
#else
                return input();
#endif
              }

            case EOB_ACT_CONTINUE_SCAN:
              yy_c_buf_p = yytext_ptr + offset;
              break;
            }
        }
    }

  c = *(unsigned char *) yy_c_buf_p; /* cast for 8-bit char's */
  *yy_c_buf_p = '\0'; /* preserve yytext */
  yy_hold_char = *++yy_c_buf_p;

  return c;
}

void yyFlexLexer::yyrestart(istream* input_file)
{
  if (! yy_current_buffer)
    yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE);

  yy_init_buffer(yy_current_buffer, input_file);
  yy_load_buffer_state();
}

void yyFlexLexer::yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
{
  if (yy_current_buffer == new_buffer)
    return;

  if (yy_current_buffer)
    {
      /* Flush out information for old buffer. */
      *yy_c_buf_p = yy_hold_char;
      yy_current_buffer->yy_buf_pos = yy_c_buf_p;
      yy_current_buffer->yy_n_chars = yy_n_chars;
    }

  yy_current_buffer = new_buffer;
  yy_load_buffer_state();

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  yy_did_buffer_switch_on_eof = 1;
}

void yyFlexLexer::yy_load_buffer_state()
{
  yy_n_chars = yy_current_buffer->yy_n_chars;
  yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
  yyin = yy_current_buffer->yy_input_file;
  yy_hold_char = *yy_c_buf_p;
}

YY_BUFFER_STATE yyFlexLexer::yy_create_buffer(istream* file, int size)
{
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE) yy_flex_alloc(sizeof(struct yy_buffer_state));
  if (! b)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *) yy_flex_alloc(b->yy_buf_size + 2);
  if (! b->yy_ch_buf)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  yy_init_buffer(b, file);

  return b;
}

void yyFlexLexer::yy_delete_buffer(YY_BUFFER_STATE b)
{
  if (! b)
    return;

  if (b == yy_current_buffer)
    yy_current_buffer = (YY_BUFFER_STATE) 0;

  if (b->yy_is_our_buffer)
    yy_flex_free((void *) b->yy_ch_buf);

  yy_flex_free((void *) b);
}

void yyFlexLexer::yy_init_buffer(YY_BUFFER_STATE b, istream* file)

{
  yy_flush_buffer(b);

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

  b->yy_is_interactive = 0;
}

void yyFlexLexer::yy_flush_buffer(YY_BUFFER_STATE b)
{
  if (! b)
    return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == yy_current_buffer)
    yy_load_buffer_state();
}

#ifndef YY_NO_SCAN_BUFFER
#endif

#ifndef YY_NO_SCAN_STRING
#endif

#ifndef YY_NO_SCAN_BYTES
#endif

#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state(int new_state)
{
  if (yy_start_stack_ptr >= yy_start_stack_depth)
    {
      yy_size_t new_size;

      yy_start_stack_depth += YY_START_STACK_INCR;
      new_size = yy_start_stack_depth * sizeof(int);

      if (! yy_start_stack)
        yy_start_stack = (int *) yy_flex_alloc(new_size);

      else
        yy_start_stack = (int *) yy_flex_realloc(
                           (void *) yy_start_stack, new_size);

      if (! yy_start_stack)
        YY_FATAL_ERROR(
          "out of memory expanding start-condition stack");
    }

  yy_start_stack[yy_start_stack_ptr++] = YY_START;

  BEGIN(new_state);
}
#endif

#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
{
  if (--yy_start_stack_ptr < 0)
    YY_FATAL_ERROR("start-condition stack underflow");

  BEGIN(yy_start_stack[yy_start_stack_ptr]);
}
#endif

#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
{
  return yy_start_stack[yy_start_stack_ptr - 1];
}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError(yyconst char msg[])
{
  cerr << msg << '\n';
  exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
 do \
  {\
  /* Undo effects of setting up yytext. */ \
  yytext[yyleng] = yy_hold_char; \
  yy_c_buf_p = yytext + n; \
  yy_hold_char = *yy_c_buf_p; \
  *yy_c_buf_p = '\0'; \
  yyleng = n; \
  } \
 while (0)

/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy(char *s1, yyconst char *s2, int n)
#else
static void yy_flex_strncpy(s1, s2, n)
char *s1;
yyconst char *s2;
int n;
#endif
{
  register int i;
  for (i = 0; i < n; ++i)
    s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen(yyconst char *s)
#else
static int yy_flex_strlen(s)
yyconst char *s;
#endif
{
  register int n;
  for (n = 0; s[n]; ++n)
;

  return n;
}
#endif

#ifdef YY_USE_PROTOS
static void *yy_flex_alloc(yy_size_t size)
#else
static void *yy_flex_alloc(size)
yy_size_t size;
#endif
{
  return (void *) malloc(size);
}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc(void *ptr, yy_size_t size)
#else
static void *yy_flex_realloc(ptr, size)
void *ptr;
yy_size_t size;
#endif
{
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return (void *) realloc((char *) ptr, size);
}

#ifdef YY_USE_PROTOS
static void yy_flex_free(void *ptr)
#else
static void yy_flex_free(ptr)
void *ptr;
#endif
{
  free(ptr);
}

#if YY_MAIN
int main()
{
  yylex();
  return 0;
}
#endif
#line 584 "CEvaluationLexer.lpp"
