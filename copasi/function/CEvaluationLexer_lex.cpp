/* Begin CVS Header
   $Source: /Volumes/Home/Users/shoops/cvs/copasi_dev/copasi/function/CEvaluationLexer_lex.cpp,v $
   $Revision: 1.16.2.1 $
   $Name:  $
   $Author: shoops $
   $Date: 2006/05/23 15:58:18 $
   End CVS Header */

// Copyright © 2005 by Pedro Mendes, Virginia Tech Intellectual
// Properties, Inc. and EML Research, gGmbH.
// All rights reserved.

#define yyFlexLexer CEvaluationFlexLexer

#line 4 "CEvaluationLexer_lex.cpp"
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /Volumes/Home/Users/shoops/cvs/copasi_dev/copasi/function/CEvaluationLexer_lex.cpp,v 1.16.2.1 2006/05/23 15:58:18 shoops Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif

#ifdef __cplusplus

#include <stdlib.h>
#include <iostream>
using namespace std;
#ifndef _WIN32
#endif

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif /* __STDC__ */
#endif /* ! __cplusplus */

#ifdef __TURBOC__
#pragma warn -rch
#pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *  if (condition_holds)
 *  yyless(5);
 * else
 *  do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
 do \
  {\
  /* Undo effects of setting up yytext. */ \
  *yy_cp = yy_hold_char; \
  YY_RESTORE_YY_MORE_OFFSET \
  yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
  YY_DO_BEFORE_ACTION; /* set up yytext again */ \
  } \
 while (0)

#define unput(c) yyunput(c, yytext_ptr)

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;

struct yy_buffer_state
  {
    istream* yy_input_file;

    char *yy_ch_buf;  /* input buffer */
    char *yy_buf_pos;  /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2
  };

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer

static void *yy_flex_alloc YY_PROTO((yy_size_t));
static void *yy_flex_realloc YY_PROTO((void *, yy_size_t));
static void yy_flex_free YY_PROTO((void *));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
 {\
 if (! yy_current_buffer) \
  yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE); \
 yy_current_buffer->yy_is_interactive = is_interactive; \
 }

#define yy_set_bol(at_bol) \
 {\
 if (! yy_current_buffer) \
  yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE); \
 yy_current_buffer->yy_at_bol = at_bol; \
 }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "FlexLexer.h"

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
 yytext_ptr = yy_bp; \
 yyleng = (int) (yy_cp - yy_bp); \
 yy_hold_char = *yy_cp; \
 *yy_cp = '\0'; \
 yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 70
#define YY_END_OF_BUFFER 71
static yyconst short int yy_accept[490] =
  {0,
    0, 0, 0, 0, 0, 0, 0, 0, 71, 69,
    68, 68, 69, 59, 62, 65, 57, 55, 64, 54,
    58, 1, 69, 67, 67, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 56, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 63, 66, 60, 61, 69,
    69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
    69, 69, 69, 69, 69, 69, 69, 69, 69, 69,
    69, 69, 69, 69, 69, 69, 67, 67, 68, 0,
    0, 0, 1, 1, 0, 0, 18, 0, 53, 67,
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67,

    67, 67, 67, 67, 67, 67, 3, 67, 67, 67,
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    67, 67, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 14, 0, 0, 0, 11, 12, 0, 0,
    9, 0, 10, 0, 13, 17, 3, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 1, 0, 1, 52, 67, 67,
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67,

    67, 51, 67, 67, 7, 8, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    67, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    0, 0, 15, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 7, 0, 0, 0,
    0, 0, 16, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 47, 67, 67, 67, 67, 67, 67, 67,
    23, 67, 27, 67, 26, 67, 21, 67, 67, 67,
    67, 67, 19, 67, 25, 67, 22, 67, 67, 24,

    67, 4, 67, 67, 67, 67, 67, 67, 67, 67,
    67, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 4, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 35, 67, 67, 67, 67, 67, 34, 36, 49,
    29, 33, 32, 67, 67, 5, 67, 67, 67, 31,
    28, 46, 30, 67, 67, 67, 67, 67, 67, 67,
    67, 0, 0, 0, 0, 0, 0, 0, 5, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    67, 67, 67, 67, 67, 67, 67, 67, 48, 67,

    20, 67, 67, 67, 67, 67, 67, 67, 67, 67,
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 0, 0, 0, 67, 39,
    67, 38, 67, 37, 67, 67, 67, 67, 67, 67,
    67, 67, 67, 0, 0, 0, 0, 0, 0, 0,
    0, 0, 0, 0, 0, 41, 45, 44, 43, 40,
    42, 67, 67, 6, 67, 67, 0, 0, 6, 0,
    0, 67, 67, 67, 0, 0, 0, 67, 50, 67,
    0, 0, 67, 67, 0, 0, 2, 2, 0
  };

static yyconst int yy_ec[256] =
  {0,
    1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
    1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 2, 1, 4, 1, 1, 5, 1, 1, 6,
    7, 8, 9, 10, 11, 12, 13, 14, 15, 16,
    16, 16, 16, 16, 16, 16, 16, 1, 1, 17,
    1, 18, 1, 1, 19, 20, 21, 22, 23, 24,
    25, 26, 27, 28, 28, 29, 28, 30, 31, 32,
    33, 34, 35, 36, 37, 28, 28, 38, 39, 28,
    1, 40, 1, 41, 28, 1, 42, 43, 44, 45,

    46, 47, 48, 49, 50, 28, 28, 51, 28, 52,
    53, 54, 55, 56, 57, 58, 59, 28, 28, 60,
    61, 28, 62, 1, 63, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,

    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1
  };

static yyconst int yy_meta[64] =
  {0,
    1, 1, 1, 1, 1, 2, 1, 1, 1, 1,
    1, 1, 1, 2, 2, 2, 1, 1, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 1,
    1, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 1, 1
  };

static yyconst short int yy_base[494] =
  {0,
    0, 0, 0, 0, 63, 0, 118, 119, 1065, 1066,
    129, 131, 132, 1066, 1066, 1066, 1066, 1066, 1066, 1066,
    1066, 123, 122, 139, 1058, 145, 141, 135, 137, 146,
    147, 136, 159, 175, 1066, 144, 138, 150, 177, 151,
    152, 179, 149, 183, 184, 1066, 1066, 1066, 1066, 214,
    1057, 208, 209, 187, 201, 206, 235, 240, 191, 190,
    245, 246, 239, 217, 247, 202, 248, 221, 249, 270,
    271, 250, 258, 275, 276, 278, 279, 277, 284, 284,
    1056, 1058, 319, 324, 296, 274, 1066, 1057, 1052, 1052,
    285, 291, 288, 321, 283, 323, 309, 320, 331, 337,

    340, 1051, 198, 343, 345, 346, 1050, 348, 347, 349,
    350, 351, 353, 354, 355, 356, 358, 361, 366, 368,
    367, 375, 372, 370, 379, 378, 373, 384, 380, 381,
    383, 385, 1049, 387, 389, 386, 388, 391, 395, 407,
    410, 427, 1048, 397, 430, 409, 1047, 1046, 1045, 432,
    1044, 433, 1043, 435, 1042, 1041, 1040, 436, 437, 441,
    443, 444, 446, 396, 448, 449, 454, 455, 457, 456,
    458, 460, 463, 468, 465, 462, 466, 470, 464, 471,
    472, 473, 476, 477, 474, 470, 477, 1066, 1039, 489,
    505, 497, 501, 481, 523, 524, 526, 490, 507, 528,

    530, 1037, 531, 390, 1037, 1036, 533, 536, 532, 538,
    542, 494, 539, 540, 541, 547, 550, 551, 554, 548,
    549, 560, 561, 563, 564, 566, 567, 565, 569, 574,
    1035, 570, 1034, 589, 572, 576, 575, 568, 582, 583,
    580, 585, 584, 581, 616, 620, 1033, 621, 622, 623,
    624, 626, 1032, 579, 625, 627, 628, 633, 632, 636,
    638, 635, 631, 634, 639, 640, 645, 646, 647, 648,
    649, 651, 1030, 1030, 668, 650, 652, 1029, 1028, 1027,
    1025, 1025, 1023, 1023, 1021, 1021, 1019, 656, 662, 655,
    660, 670, 1018, 289, 1017, 1017, 1015, 1015, 1014, 1012,

    1012, 1011, 657, 658, 659, 661, 664, 666, 669, 696,
    701, 1010, 699, 705, 703, 1009, 1008, 1007, 1006, 1005,
    1004, 710, 712, 713, 715, 714, 717, 1003, 1002, 1001,
    1000, 999, 718, 720, 721, 727, 723, 731, 729, 732,
    733, 997, 745, 735, 736, 739, 744, 996, 995, 994,
    993, 992, 991, 749, 748, 991, 990, 740, 989, 987,
    986, 985, 984, 746, 747, 752, 753, 754, 755, 756,
    758, 759, 762, 767, 772, 780, 784, 781, 984, 983,
    786, 982, 783, 787, 791, 792, 793, 803, 794, 805,
    808, 810, 811, 812, 813, 816, 817, 819, 980, 815,

    979, 814, 818, 820, 821, 822, 823, 824, 827, 826,
    842, 847, 848, 852, 853, 854, 851, 837, 846, 850,
    855, 856, 859, 860, 869, 877, 880, 879, 979, 972,
    971, 968, 968, 966, 966, 965, 964, 881, 882, 883,
    884, 885, 886, 963, 962, 961, 960, 959, 958, 887,
    888, 889, 890, 891, 892, 956, 955, 953, 942, 939,
    938, 894, 896, 935, 900, 904, 897, 905, 578, 906,
    907, 913, 571, 909, 920, 496, 910, 914, 397, 908,
    925, 929, 934, 930, 938, 932, 392, 212, 1066, 980,
    982, 211, 209
  };

static yyconst short int yy_def[494] =
  {0,
    489, 1, 1, 1, 489, 5, 1, 1, 489, 489,
    489, 489, 490, 489, 489, 489, 489, 489, 489, 489,
    489, 489, 491, 492, 492, 492, 492, 492, 492, 492,
    492, 492, 492, 492, 489, 492, 492, 492, 492, 492,
    492, 492, 492, 492, 492, 489, 489, 489, 489, 493,
    493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
    493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
    493, 493, 493, 493, 493, 493, 492, 492, 489, 490,
    489, 490, 489, 489, 489, 491, 489, 491, 489, 492,
    492, 492, 492, 492, 492, 492, 492, 492, 492, 492,

    492, 492, 492, 492, 492, 492, 492, 492, 492, 492,
    492, 492, 492, 492, 492, 492, 492, 492, 492, 492,
    492, 492, 492, 492, 492, 492, 492, 492, 492, 492,
    492, 492, 493, 493, 493, 493, 493, 493, 493, 493,
    493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
    493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
    493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
    493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
    493, 493, 493, 493, 489, 489, 489, 489, 492, 492,
    492, 492, 492, 492, 492, 492, 492, 492, 492, 492,

    492, 489, 492, 492, 492, 492, 492, 492, 492, 492,
    492, 492, 492, 492, 492, 492, 492, 492, 492, 492,
    492, 492, 492, 492, 492, 492, 492, 492, 492, 492,
    493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
    493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
    493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
    493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
    493, 493, 489, 492, 492, 492, 492, 492, 492, 492,
    489, 492, 489, 492, 489, 492, 489, 492, 492, 492,
    492, 492, 489, 492, 489, 492, 489, 492, 492, 489,

    492, 492, 492, 492, 492, 492, 492, 492, 492, 492,
    492, 493, 493, 493, 493, 493, 493, 493, 493, 493,
    493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
    493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
    493, 489, 492, 492, 492, 492, 492, 489, 489, 489,
    489, 489, 489, 492, 492, 492, 492, 492, 492, 489,
    489, 489, 489, 492, 492, 492, 492, 492, 492, 492,
    492, 493, 493, 493, 493, 493, 493, 493, 493, 493,
    493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
    492, 492, 492, 492, 492, 492, 492, 492, 489, 492,

    489, 492, 492, 492, 492, 492, 492, 492, 492, 492,
    493, 493, 493, 493, 493, 493, 493, 493, 493, 493,
    493, 493, 493, 493, 493, 493, 493, 493, 492, 489,
    492, 489, 492, 489, 492, 492, 492, 492, 492, 492,
    492, 492, 492, 493, 493, 493, 493, 493, 493, 493,
    493, 493, 493, 493, 493, 489, 489, 489, 489, 489,
    489, 492, 492, 492, 492, 492, 493, 493, 493, 493,
    493, 492, 492, 492, 493, 493, 493, 492, 489, 492,
    493, 493, 492, 492, 493, 493, 492, 493, 0, 489,
    489, 489, 489
  };

static yyconst short int yy_nxt[1130] =
  {0,
    10, 11, 12, 13, 14, 15, 16, 17, 18, 19,
    20, 10, 21, 22, 22, 22, 23, 10, 24, 25,
    26, 25, 27, 28, 25, 25, 29, 25, 30, 31,
    25, 32, 25, 25, 33, 34, 25, 25, 25, 10,
    35, 36, 25, 37, 25, 38, 39, 25, 25, 40,
    41, 42, 25, 43, 25, 25, 44, 45, 25, 25,
    25, 46, 47, 10, 11, 12, 13, 14, 15, 16,
    17, 48, 19, 49, 10, 21, 22, 22, 22, 23,
    10, 50, 51, 52, 51, 53, 54, 55, 51, 56,
    51, 57, 58, 59, 60, 51, 51, 61, 62, 51,

    63, 51, 10, 35, 64, 51, 65, 51, 66, 67,
    68, 51, 69, 70, 71, 72, 73, 51, 51, 74,
    75, 51, 76, 51, 46, 47, 10, 10, 10, 10,
    79, 79, 79, 79, 83, 81, 84, 84, 84, 87,
    89, 89, 89, 89, 89, 85, 89, 77, 77, 89,
    89, 89, 89, 100, 89, 89, 89, 89, 91, 92,
    102, 88, 107, 101, 89, 105, 103, 96, 85, 78,
    78, 82, 93, 94, 95, 97, 104, 106, 99, 98,
    89, 108, 89, 118, 89, 109, 113, 114, 89, 89,
    119, 110, 89, 111, 120, 89, 89, 102, 107, 115,

    116, 117, 124, 89, 125, 145, 89, 89, 112, 121,
    133, 89, 90, 89, 89, 146, 157, 89, 122, 89,
    126, 203, 89, 147, 156, 131, 89, 123, 128, 149,
    140, 127, 129, 134, 135, 150, 148, 130, 141, 132,
    89, 143, 142, 136, 89, 89, 144, 137, 138, 139,
    89, 89, 89, 89, 89, 89, 143, 151, 154, 164,
    165, 173, 155, 89, 161, 152, 147, 158, 166, 163,
    153, 159, 167, 168, 169, 89, 89, 160, 148, 162,
    89, 89, 89, 89, 89, 79, 79, 81, 89, 174,
    89, 87, 170, 89, 89, 149, 89, 105, 175, 171,

    176, 193, 359, 172, 186, 156, 186, 157, 191, 187,
    187, 187, 178, 88, 89, 151, 155, 182, 126, 189,
    179, 190, 177, 82, 180, 89, 89, 153, 89, 181,
    184, 183, 185, 185, 185, 83, 89, 84, 84, 84,
    197, 85, 89, 195, 196, 89, 85, 192, 89, 194,
    89, 89, 89, 89, 89, 89, 89, 199, 89, 89,
    89, 89, 198, 89, 85, 200, 89, 204, 207, 85,
    201, 89, 89, 89, 205, 89, 208, 89, 89, 210,
    89, 206, 209, 89, 89, 89, 89, 211, 89, 89,
    89, 89, 89, 89, 89, 293, 89, 89, 213, 215,

    89, 89, 89, 188, 294, 214, 212, 233, 234, 189,
    216, 219, 89, 236, 89, 89, 224, 235, 221, 232,
    220, 231, 217, 218, 223, 222, 225, 226, 241, 205,
    206, 227, 89, 237, 229, 89, 228, 89, 89, 244,
    89, 89, 89, 230, 238, 239, 89, 240, 89, 89,
    242, 89, 231, 89, 89, 245, 248, 246, 243, 89,
    89, 89, 89, 89, 247, 89, 249, 89, 89, 89,
    89, 89, 251, 89, 250, 89, 89, 89, 89, 253,
    252, 89, 89, 187, 187, 187, 89, 185, 185, 185,
    187, 187, 187, 233, 89, 287, 85, 255, 257, 89,

    254, 479, 89, 261, 256, 258, 89, 268, 266, 280,
    89, 263, 89, 267, 259, 260, 262, 265, 264, 85,
    288, 247, 269, 274, 271, 275, 278, 270, 281, 283,
    279, 285, 253, 89, 272, 89, 89, 89, 295, 276,
    277, 297, 289, 300, 89, 89, 89, 89, 282, 284,
    274, 286, 89, 287, 89, 281, 283, 292, 296, 285,
    291, 298, 290, 301, 302, 89, 89, 299, 89, 293,
    89, 295, 297, 281, 300, 89, 479, 89, 311, 89,
    89, 89, 303, 89, 89, 287, 89, 283, 285, 89,
    89, 278, 279, 319, 89, 304, 305, 280, 282, 284,

    306, 316, 286, 318, 312, 317, 307, 320, 321, 313,
    322, 325, 310, 309, 296, 298, 308, 301, 324, 302,
    323, 89, 299, 314, 315, 293, 295, 297, 89, 300,
    89, 89, 89, 89, 327, 312, 89, 281, 89, 89,
    287, 283, 326, 285, 89, 89, 328, 329, 332, 331,
    293, 295, 297, 89, 300, 89, 89, 89, 330, 341,
    89, 89, 89, 89, 89, 89, 89, 89, 333, 89,
    347, 89, 345, 89, 89, 89, 346, 356, 316, 317,
    319, 334, 335, 318, 320, 354, 321, 336, 337, 340,
    338, 339, 355, 357, 328, 329, 332, 331, 343, 358,

    368, 89, 344, 366, 89, 330, 89, 367, 89, 364,
    89, 356, 369, 365, 359, 89, 370, 89, 89, 89,
    89, 376, 89, 89, 357, 89, 89, 374, 89, 372,
    382, 375, 89, 373, 89, 379, 89, 89, 89, 377,
    89, 89, 378, 381, 89, 89, 382, 371, 380, 89,
    89, 89, 89, 89, 89, 393, 394, 89, 89, 89,
    89, 89, 387, 89, 89, 385, 400, 89, 395, 386,
    383, 397, 89, 396, 384, 389, 379, 89, 388, 391,
    392, 398, 413, 390, 380, 89, 89, 414, 89, 89,
    404, 89, 89, 411, 412, 405, 89, 89, 89, 89,

    408, 415, 402, 403, 406, 407, 417, 410, 89, 416,
    89, 409, 419, 89, 418, 430, 432, 434, 89, 89,
    89, 89, 89, 430, 89, 432, 434, 89, 89, 89,
    422, 89, 89, 429, 423, 431, 433, 435, 436, 420,
    421, 437, 89, 424, 425, 439, 438, 89, 426, 427,
    440, 89, 430, 432, 428, 89, 89, 434, 89, 89,
    430, 432, 429, 451, 434, 89, 431, 444, 433, 435,
    436, 437, 445, 446, 89, 441, 442, 447, 448, 449,
    450, 452, 89, 443, 89, 89, 89, 89, 89, 89,
    89, 89, 89, 89, 89, 89, 89, 89, 444, 89,

    463, 89, 89, 445, 446, 89, 468, 447, 448, 89,
    89, 89, 89, 89, 89, 89, 462, 449, 89, 89,
    472, 464, 467, 475, 473, 89, 466, 469, 453, 454,
    89, 478, 471, 476, 89, 89, 455, 89, 481, 89,
    89, 465, 483, 89, 188, 188, 464, 470, 188, 474,
    480, 482, 469, 485, 473, 477, 487, 476, 484, 188,
    488, 188, 188, 461, 460, 459, 458, 457, 456, 461,
    460, 459, 188, 458, 188, 487, 457, 488, 188, 486,
    80, 80, 86, 86, 456, 188, 188, 401, 399, 89,
    188, 188, 188, 188, 401, 399, 89, 188, 188, 188,

    188, 188, 188, 188, 89, 363, 362, 361, 360, 353,
    352, 351, 350, 349, 348, 342, 89, 363, 188, 362,
    361, 188, 360, 188, 188, 188, 353, 188, 352, 188,
    351, 188, 350, 349, 348, 342, 188, 89, 89, 89,
    273, 89, 89, 188, 273, 89, 89, 89, 89, 89,
    202, 89, 89, 89, 89, 89, 202, 89, 188, 489,
    489, 89, 89, 89, 489, 9, 489, 489, 489, 489,
    489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
    489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
    489, 489, 489, 489, 489, 489, 489, 489, 489, 489,

    489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
    489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
    489, 489, 489, 489, 489, 489, 489, 489, 489
  };

static yyconst short int yy_chk[1130] =
  {0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5,

    5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 5, 5, 5, 5,
    5, 5, 5, 5, 5, 5, 7, 8, 7, 8,
    11, 11, 12, 12, 22, 13, 22, 22, 22, 23,
    28, 32, 29, 37, 24, 22, 27, 7, 8, 36,
    26, 30, 31, 28, 43, 38, 40, 41, 24, 24,
    29, 23, 32, 28, 33, 31, 29, 26, 22, 7,
    8, 13, 24, 24, 24, 26, 30, 31, 27, 26,
    34, 33, 39, 37, 42, 33, 36, 36, 44, 45,
    37, 33, 54, 34, 37, 60, 59, 40, 43, 36,

    36, 36, 40, 103, 41, 54, 55, 66, 34, 38,
    493, 56, 492, 52, 53, 54, 60, 488, 39, 50,
    42, 103, 64, 55, 59, 45, 68, 39, 44, 56,
    52, 42, 44, 50, 50, 56, 55, 44, 52, 45,
    57, 53, 52, 50, 63, 58, 53, 50, 50, 50,
    61, 62, 65, 67, 69, 72, 66, 57, 58, 64,
    64, 66, 58, 73, 62, 57, 68, 61, 64, 63,
    57, 61, 64, 64, 64, 70, 71, 61, 68, 62,
    74, 75, 78, 76, 77, 79, 79, 80, 95, 67,
    91, 86, 65, 93, 294, 69, 92, 77, 67, 65,

    69, 95, 294, 65, 85, 72, 85, 73, 93, 85,
    85, 85, 71, 86, 97, 70, 71, 75, 78, 91,
    74, 92, 70, 80, 74, 98, 94, 70, 96, 74,
    76, 75, 83, 83, 83, 84, 99, 84, 84, 84,
    98, 83, 100, 97, 97, 101, 84, 94, 104, 96,
    105, 106, 109, 108, 110, 111, 112, 100, 113, 114,
    115, 116, 99, 117, 83, 100, 118, 104, 108, 84,
    101, 119, 121, 120, 105, 124, 109, 123, 127, 111,
    122, 106, 110, 126, 125, 129, 130, 112, 131, 128,
    132, 136, 134, 137, 135, 204, 138, 487, 115, 117,

    139, 164, 144, 479, 204, 116, 114, 136, 137, 113,
    118, 120, 140, 139, 146, 141, 124, 138, 122, 135,
    121, 134, 119, 119, 123, 122, 125, 128, 144, 126,
    127, 129, 142, 140, 131, 145, 130, 150, 152, 146,
    154, 158, 159, 132, 141, 141, 160, 142, 161, 162,
    145, 163, 164, 165, 166, 150, 158, 152, 145, 167,
    168, 170, 169, 171, 154, 172, 159, 176, 173, 179,
    175, 177, 161, 174, 160, 178, 180, 181, 182, 163,
    162, 183, 184, 186, 186, 186, 194, 185, 185, 185,
    187, 187, 187, 166, 190, 198, 185, 167, 169, 212,

    165, 476, 192, 172, 168, 170, 193, 179, 176, 194,
    191, 174, 199, 177, 171, 171, 173, 175, 174, 185,
    198, 178, 180, 190, 182, 191, 192, 181, 195, 196,
    193, 197, 184, 200, 183, 201, 203, 209, 207, 191,
    191, 208, 199, 210, 213, 214, 215, 211, 195, 196,
    212, 197, 216, 220, 221, 217, 218, 203, 207, 219,
    201, 208, 200, 210, 211, 222, 223, 209, 224, 225,
    228, 226, 227, 238, 229, 232, 473, 235, 225, 230,
    237, 236, 213, 469, 254, 241, 244, 239, 240, 243,
    242, 214, 215, 238, 234, 213, 213, 216, 217, 218,

    220, 235, 219, 237, 232, 236, 221, 239, 240, 234,
    241, 244, 224, 223, 226, 227, 222, 229, 243, 230,
    242, 245, 228, 234, 234, 246, 248, 249, 250, 251,
    255, 252, 256, 257, 246, 254, 263, 259, 258, 264,
    262, 260, 245, 261, 265, 266, 248, 249, 252, 251,
    267, 268, 269, 270, 271, 276, 272, 277, 250, 267,
    290, 288, 303, 304, 305, 291, 306, 289, 255, 307,
    277, 308, 276, 275, 309, 292, 276, 290, 256, 257,
    259, 255, 255, 258, 260, 288, 261, 262, 263, 266,
    264, 265, 289, 291, 268, 269, 272, 271, 275, 292,

    305, 310, 275, 304, 313, 270, 311, 304, 315, 303,
    314, 308, 306, 303, 311, 322, 307, 323, 324, 326,
    325, 315, 327, 333, 309, 334, 335, 314, 337, 313,
    327, 314, 336, 313, 339, 324, 338, 340, 341, 322,
    344, 345, 323, 326, 346, 358, 341, 310, 325, 347,
    343, 364, 365, 355, 354, 344, 345, 366, 367, 368,
    369, 370, 335, 371, 372, 334, 358, 373, 346, 334,
    333, 354, 374, 347, 333, 337, 338, 375, 336, 343,
    343, 355, 373, 340, 339, 376, 378, 374, 383, 377,
    365, 381, 384, 372, 372, 366, 385, 386, 387, 389,

    369, 375, 364, 364, 367, 368, 377, 371, 388, 376,
    390, 370, 381, 391, 378, 392, 393, 394, 395, 402,
    400, 396, 397, 403, 398, 404, 405, 406, 407, 408,
    384, 410, 409, 391, 385, 392, 393, 394, 395, 383,
    383, 396, 418, 386, 387, 398, 397, 411, 388, 389,
    400, 419, 412, 413, 390, 420, 417, 414, 415, 416,
    421, 422, 402, 418, 423, 424, 403, 411, 404, 405,
    406, 407, 412, 413, 425, 408, 409, 414, 415, 416,
    417, 419, 426, 410, 428, 427, 438, 439, 440, 441,
    442, 443, 450, 451, 452, 453, 454, 455, 420, 462,

    439, 463, 467, 421, 422, 465, 451, 423, 424, 466,
    468, 470, 471, 480, 474, 477, 438, 425, 472, 478,
    462, 440, 450, 467, 463, 475, 442, 452, 426, 427,
    481, 472, 454, 468, 482, 484, 428, 486, 475, 483,
    464, 441, 478, 485, 461, 460, 443, 453, 459, 465,
    474, 477, 455, 481, 466, 470, 483, 471, 480, 458,
    485, 457, 456, 449, 448, 447, 446, 445, 444, 437,
    436, 435, 434, 433, 432, 484, 431, 486, 430, 482,
    490, 490, 491, 491, 429, 401, 399, 382, 380, 379,
    363, 362, 361, 360, 359, 357, 356, 353, 352, 351,

    350, 349, 348, 342, 332, 331, 330, 329, 328, 321,
    320, 319, 318, 317, 316, 312, 302, 301, 300, 299,
    298, 297, 296, 295, 293, 287, 286, 285, 284, 283,
    282, 281, 280, 279, 278, 274, 273, 253, 247, 233,
    231, 206, 205, 202, 189, 157, 156, 155, 153, 151,
    149, 148, 147, 143, 133, 107, 102, 90, 89, 88,
    82, 81, 51, 25, 9, 489, 489, 489, 489, 489,
    489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
    489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
    489, 489, 489, 489, 489, 489, 489, 489, 489, 489,

    489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
    489, 489, 489, 489, 489, 489, 489, 489, 489, 489,
    489, 489, 489, 489, 489, 489, 489, 489, 489
  };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "CEvaluationLexer.lpp"
#define INITIAL 0
/* scanner for kinetic functions */
#define YY_NEVER_INTERACTIVE 1
#define sSIGN 1
#define sOPERATOR 2
#define sID 3

#line 12 "CEvaluationLexer.lpp"
#include <vector>

#include "copasi.h"
#include "CEvaluationNode.h"
#include "CEvaluationLexer.h"
#include "CEvaluationParser_yacc.h"

#ifndef YYERRCODE
#define YYERRCODE 256
#endif

#define YY_USER_INIT \
    mpNode = NULL;\
    mPosition = 0;\
    mpNodeList = new std::vector< CEvaluationNode * >;

#define COMMON_ACTION \
    mPosition += yyleng;\
    mpNodeList->push_back(mpNode);

#line 771 "CEvaluationLexer_lex.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO((void));
#else
extern int yywrap YY_PROTO((void));
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO((char *, yyconst char *, int));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO((yyconst char *));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO((int new_state));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO((void));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO((void));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput(yytext, yyleng)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
 if ((result = LexerInput((char *) buf, max_size)) < 0) \
  YY_FATAL_ERROR("input in flex scanner failed");
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError(msg)
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
 YY_USER_ACTION

YY_DECL
{
  register yy_state_type yy_current_state;
  register char *yy_cp, *yy_bp;
  register int yy_act;

#line 37 "CEvaluationLexer.lpp"

#line 900 "CEvaluationLexer_lex.cpp"

  if (yy_init)
  {
    yy_init = 0;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if (! yy_start)
        yy_start = 1; /* first start state */

      if (! yyin)
        yyin = &cin;

      if (! yyout)
        yyout = &cout;

      if (! yy_current_buffer)
        yy_current_buffer =
          yy_create_buffer(yyin, YY_BUF_SIZE);

      yy_load_buffer_state();
    }

  while (1)  /* loops until end-of-file is reached */
  {
    yy_cp = yy_c_buf_p;

    /* Support of yytext. */
    *yy_cp = yy_hold_char;

    /* yy_bp points to the position in yy_ch_buf of the start of
     * the current run.
     */
    yy_bp = yy_cp;

    yy_current_state = yy_start;
  yy_match:
    do
      {
        register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
          if (yy_accept[yy_current_state])
            {
              yy_last_accepting_state = yy_current_state;
              yy_last_accepting_cpos = yy_cp;
            }
          while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
            {
              yy_current_state = (int) yy_def[yy_current_state];
              if (yy_current_state >= 490)
                yy_c = yy_meta[(unsigned int) yy_c];
            }
          yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
          ++yy_cp;
        }
      while (yy_base[yy_current_state] != 1066);

  yy_find_action:
      yy_act = yy_accept[yy_current_state];
      if (yy_act == 0)
        {/* have to back up */
          yy_cp = yy_last_accepting_cpos;
          yy_current_state = yy_last_accepting_state;
          yy_act = yy_accept[yy_current_state];
        }

      YY_DO_BEFORE_ACTION;

  do_action: /* This label is used only to access EOF actions. */

      switch (yy_act)
        {/* beginning of action switch */
        case 0: /* must back up */
          /* undo the effects of YY_DO_BEFORE_ACTION */
          *yy_cp = yy_hold_char;
          yy_cp = yy_last_accepting_cpos;
          yy_current_state = yy_last_accepting_state;
          goto yy_find_action;

        case 1:
          YY_RULE_SETUP
#line 38 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeNumber(CEvaluationNodeNumber::DOUBLE,
                                             yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 2:
          YY_RULE_SETUP
#line 46 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::EXPONENTIALE,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 3:
          YY_RULE_SETUP
#line 54 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::PI,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 4:
          YY_RULE_SETUP
#line 62 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::TRUE,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 5:
          YY_RULE_SETUP
#line 70 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::FALSE,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 6:
          YY_RULE_SETUP
#line 78 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::_INFINITY,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 7:
          YY_RULE_SETUP
#line 86 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::_NaN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 8:
          YY_RULE_SETUP
#line 94 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::NOT,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_NOT;

          YY_BREAK
        case 9:
          YY_RULE_SETUP
#line 102 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::LE,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_LE;

          YY_BREAK
        case 10:
          YY_RULE_SETUP
#line 110 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::LT,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_LT;

          YY_BREAK
        case 11:
          YY_RULE_SETUP
#line 118 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::GE,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_GE;

          YY_BREAK
        case 12:
          YY_RULE_SETUP
#line 126 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::GT,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_GT;

          YY_BREAK
        case 13:
          YY_RULE_SETUP
#line 134 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::NE,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_NE;

          YY_BREAK
        case 14:
          YY_RULE_SETUP
#line 142 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::EQ,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_EQ;

          YY_BREAK
        case 15:
          YY_RULE_SETUP
#line 150 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::AND,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_AND;

          YY_BREAK
        case 16:
          YY_RULE_SETUP
#line 158 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::XOR,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_XOR;

          YY_BREAK
        case 17:
          YY_RULE_SETUP
#line 166 "CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::OR,
                                              yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_OR;

          YY_BREAK
        case 18:
          YY_RULE_SETUP
#line 173 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeObject(CEvaluationNodeObject::ANY,
                                             yytext);
          COMMON_ACTION;
          return TOKEN_NUMBER;

          YY_BREAK
        case 19:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 181 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::LOG,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 20:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 189 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::LOG10,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 21:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 197 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::EXP,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 22:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 205 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SIN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 23:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 213 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 24:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 221 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::TAN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 25:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 229 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SEC,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 26:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 237 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CSC,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 27:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 245 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COT,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 28:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 253 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SINH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 29:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 261 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COSH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 30:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 269 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::TANH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 31:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 277 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SECH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 32:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 285 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CSCH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 33:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 293 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COTH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 34:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 301 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSIN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 35:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 309 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 36:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 317 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCTAN,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 37:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 325 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSEC,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 38:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 333 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCSC,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 39:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 341 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOT,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 40:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 349 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSINH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 41:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 357 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOSH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 42:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 365 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCTANH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 43:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 373 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSECH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 44:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 381 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCSCH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 45:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 389 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOTH,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 46:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 397 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SQRT,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 47:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 405 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ABS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 48:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 413 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::FLOOR,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 49:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 421 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CEIL,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 50:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 429 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::FACTORIAL,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_FUNCTION;

          YY_BREAK
        case 51:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 437 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeChoice(CEvaluationNodeChoice::IF,
                                             yytext);
          COMMON_ACTION;
          return TOKEN_LOGICAL_CHOICE;

          YY_BREAK
        case 52:
          *yy_cp = yy_hold_char; /* undo effects of setting up yytext */
          yy_c_buf_p = yy_cp -= 1;
          YY_DO_BEFORE_ACTION; /* set up yytext again */
          YY_RULE_SETUP
#line 445 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          {
            std::string tmp(yytext);
            mpNode = new CEvaluationNodeCall(CEvaluationNodeCall::EXPRESSION,
                                             tmp.substr(0, tmp.length() - 1));
          }
          COMMON_ACTION;
          return TOKEN_CALL;

          YY_BREAK
        case 53:
          YY_RULE_SETUP
#line 456 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          {
            std::string tmp(yytext);
            mpNode = new CEvaluationNodeCall(CEvaluationNodeCall::FUNCTION,
                                             tmp.substr(0, tmp.length() - 1));
          }
          COMMON_ACTION;
          return TOKEN_CALL;

          YY_BREAK
        case 54:
          YY_RULE_SETUP
#line 467 "CEvaluationLexer.lpp"

          BEGIN(sID);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::MINUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_SIGN;

          YY_BREAK
        case 55:
          YY_RULE_SETUP
#line 475 "CEvaluationLexer.lpp"

          BEGIN(sID);
          mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::PLUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_SIGN;

          YY_BREAK
        case 56:
          YY_RULE_SETUP
#line 483 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::POWER,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_POWER;

          YY_BREAK
        case 57:
          YY_RULE_SETUP
#line 491 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MULTIPLY,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_MULTIPLY;

          YY_BREAK
        case 58:
          YY_RULE_SETUP
#line 499 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::DIVIDE,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_MULTIPLY;

          YY_BREAK
        case 59:
          YY_RULE_SETUP
#line 507 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MODULUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_MODULUS;

          YY_BREAK
        case 60:
          YY_RULE_SETUP
#line 515 "CEvaluationLexer.lpp"

          BEGIN(sID);
          mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::PLUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_PLUS;

          YY_BREAK
        case 61:
          YY_RULE_SETUP
#line 523 "CEvaluationLexer.lpp"

          BEGIN(sID);
          mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MINUS,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_OPERATOR_PLUS;

          YY_BREAK
        case 62:
          YY_RULE_SETUP
#line 531 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::OPEN,
                                                yytext);
          COMMON_ACTION;
          return TOKEN_STRUCTURE_OPEN;

          YY_BREAK
        case 63:
          YY_RULE_SETUP
#line 539 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::VECTOR_OPEN,
                                                yytext);
          COMMON_ACTION;
          return TOKEN_STRUCTURE_VECTOR_OPEN;

          YY_BREAK
        case 64:
          YY_RULE_SETUP
#line 547 "CEvaluationLexer.lpp"

          BEGIN(sSIGN);
          mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::COMMA,
                                                yytext);
          COMMON_ACTION;
          return TOKEN_STRUCTURE_COMMA;

          YY_BREAK
        case 65:
          YY_RULE_SETUP
#line 555 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::CLOSE,
                                                yytext);
          COMMON_ACTION;
          return TOKEN_STRUCTURE_CLOSE;

          YY_BREAK
        case 66:
          YY_RULE_SETUP
#line 563 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::VECTOR_CLOSE,
                                                yytext);
          COMMON_ACTION;
          return TOKEN_STRUCTURE_VECTOR_CLOSE;

          YY_BREAK
        case 67:
          YY_RULE_SETUP
#line 571 "CEvaluationLexer.lpp"

          BEGIN(sOPERATOR);
          mpNode = new CEvaluationNodeVariable(CEvaluationNodeVariable::ANY,
                                               yytext);
          COMMON_ACTION;
          return TOKEN_VARIABLE;

          YY_BREAK
        case 68:
          YY_RULE_SETUP
#line 579 "CEvaluationLexer.lpp"

          mpNode = new CEvaluationNodeWhiteSpace(CEvaluationNodeWhiteSpace::ANY,
                                                 yytext);
          COMMON_ACTION;

          YY_BREAK
        case YY_STATE_EOF(INITIAL):
              case YY_STATE_EOF(sSIGN):
                case YY_STATE_EOF(sOPERATOR):
                  case YY_STATE_EOF(sID):
#line 585 "CEvaluationLexer.lpp"
                      return 0;
          YY_BREAK
        case 69:
          YY_RULE_SETUP
#line 587 "CEvaluationLexer.lpp"

          CCopasiMessage(CCopasiMessage::ERROR, MCFunction + 2, mPosition);
          return YYERRCODE;

          YY_BREAK
        case 70:
          YY_RULE_SETUP
#line 592 "CEvaluationLexer.lpp"
          ECHO;
          YY_BREAK
#line 1856 "CEvaluationLexer_lex.cpp"

        case YY_END_OF_BUFFER:
      {
            /* Amount of text matched not including the EOB char. */
            int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

            /* Undo the effects of YY_DO_BEFORE_ACTION. */
            *yy_cp = yy_hold_char;
            YY_RESTORE_YY_MORE_OFFSET

            if (yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW)
              {
                /* We're scanning a new file or input source.  It's
                 * possible that this happened because the user
                 * just pointed yyin at a new source and called
                 * yylex().  If so, then we have to assure
                 * consistency between yy_current_buffer and our
                 * globals.  Here is the right place to do so, because
                 * this is the first action (other than possibly a
                 * back-up) that will match for the new input source.
                 */
                yy_n_chars = yy_current_buffer->yy_n_chars;
                yy_current_buffer->yy_input_file = yyin;
                yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
              }

            /* Note that here we test for yy_c_buf_p "<=" to the position
             * of the first EOB in the buffer, since yy_c_buf_p will
             * already have been incremented past the NUL character
             * (since all states make transitions on EOB to the
             * end-of-buffer state).  Contrast this with the test
             * in input().
             */
            if (yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars])
              {/* This was really a NUL. */
                yy_state_type yy_next_state;

                yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                /* Okay, we're now positioned to make the NUL
                 * transition.  We couldn't have
                 * yy_get_previous_state() go ahead and do it
                 * for us because it doesn't know how to deal
                 * with the possibility of jamming (and we don't
                 * want to build jamming into it because then it
                 * will run more slowly).
                 */

                yy_next_state = yy_try_NUL_trans(yy_current_state);

                yy_bp = yytext_ptr + YY_MORE_ADJ;

                if (yy_next_state)
                  {
                    /* Consume the NUL. */
                    yy_cp = ++yy_c_buf_p;
                    yy_current_state = yy_next_state;
                    goto yy_match;
                  }

                else
                  {
                    yy_cp = yy_c_buf_p;
                    goto yy_find_action;
                  }
              }

            else switch (yy_get_next_buffer())
                {
                case EOB_ACT_END_OF_FILE:
                  {
                    yy_did_buffer_switch_on_eof = 0;

                    if (yywrap())
                      {
                        /* Note: because we've taken care in
                         * yy_get_next_buffer() to have set up
                         * yytext, we can now set up
                         * yy_c_buf_p so that if some total
                         * hoser (like flex itself) wants to
                         * call the scanner after we return the
                         * YY_NULL, it'll still work - another
                         * YY_NULL will get returned.
                         */
                        yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                        yy_act = YY_STATE_EOF(YY_START);
                        goto do_action;
                      }

                    else
                      {
                        if (! yy_did_buffer_switch_on_eof)
                          YY_NEW_FILE;
                      }
                    break;
                  }

                case EOB_ACT_CONTINUE_SCAN:
                  yy_c_buf_p =
                    yytext_ptr + yy_amount_of_matched_text;

                  yy_current_state = yy_get_previous_state();

                  yy_cp = yy_c_buf_p;
                  yy_bp = yytext_ptr + YY_MORE_ADJ;
                  goto yy_match;

                case EOB_ACT_LAST_MATCH:
                  yy_c_buf_p =
                    &yy_current_buffer->yy_ch_buf[yy_n_chars];

                  yy_current_state = yy_get_previous_state();

                  yy_cp = yy_c_buf_p;
                  yy_bp = yytext_ptr + YY_MORE_ADJ;
                  goto yy_find_action;
                }
            break;
          }

        default:
          YY_FATAL_ERROR(
            "fatal flex scanner internal error--no action found");
        } /* end of action switch */
    } /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer(istream* arg_yyin, ostream* arg_yyout)
{
  yyin = arg_yyin;
  yyout = arg_yyout;
  yy_c_buf_p = 0;
  yy_init = 1;
  yy_start = 0;
  yy_flex_debug = 0;
  yylineno = 1; // this will only get updated if %option yylineno

  yy_did_buffer_switch_on_eof = 0;

  yy_looking_for_trail_begin = 0;
  yy_more_flag = 0;
  yy_more_len = 0;
  yy_more_offset = yy_prev_more_offset = 0;

  yy_start_stack_ptr = yy_start_stack_depth = 0;
  yy_start_stack = 0;

  yy_current_buffer = 0;

#ifdef YY_USES_REJECT
  yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
  yy_state_buf = 0;
#endif
}

yyFlexLexer::~yyFlexLexer()
{
  delete yy_state_buf;
  yy_delete_buffer(yy_current_buffer);
}

void yyFlexLexer::switch_streams(istream* new_in, ostream* new_out)
{
  if (new_in)
    {
      yy_delete_buffer(yy_current_buffer);
      yy_switch_to_buffer(yy_create_buffer(new_in, YY_BUF_SIZE));
    }

  if (new_out)
    yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput(char* buf, int /* max_size */)
#else
int yyFlexLexer::LexerInput(char* buf, int max_size)
#endif
{
  if (yyin->eof() || yyin->fail())
    return 0;

#ifdef YY_INTERACTIVE
  yyin->get(buf[0]);

  if (yyin->eof())
    return 0;

  if (yyin->bad())
    return - 1;

  return 1;

#else
  (void) yyin->read(buf, max_size);

  if (yyin->bad())
    return - 1;
  else
    return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput(const char* buf, int size)
{
  (void) yyout->write(buf, size);
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 * EOB_ACT_LAST_MATCH -
 * EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 * EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
{
  register char *dest = yy_current_buffer->yy_ch_buf;
  register char *source = yytext_ptr;
  register int number_to_move, i;
  int ret_val;

  if (yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1])
    YY_FATAL_ERROR(
      "fatal flex scanner internal error--end of buffer missed");

  if (yy_current_buffer->yy_fill_buffer == 0)
    {/* Don't try to fill the buffer, so this is an EOF. */
      if (yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1)
        {
          /* We matched a single character, the EOB, so
           * treat this as a final EOF.
           */
          return EOB_ACT_END_OF_FILE;
        }

      else
        {
          /* We matched some text prior to the EOB, first
           * process it.
           */
          return EOB_ACT_LAST_MATCH;
        }
    }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

  for (i = 0; i < number_to_move; ++i)
    *(dest++) = *(source++);

  if (yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING)
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    yy_current_buffer->yy_n_chars = yy_n_chars = 0;

  else
    {
      int num_to_read =
        yy_current_buffer->yy_buf_size - number_to_move - 1;

      while (num_to_read <= 0)
        {/* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
          YY_FATAL_ERROR(
            "input buffer overflow, can't enlarge buffer because scanner uses REJECT");
#else

          /* just a shorter name for the current buffer */
          YY_BUFFER_STATE b = yy_current_buffer;

          int yy_c_buf_p_offset =
            (int) (yy_c_buf_p - b->yy_ch_buf);

          if (b->yy_is_our_buffer)
            {
              int new_size = b->yy_buf_size * 2;

              if (new_size <= 0)
                b->yy_buf_size += b->yy_buf_size / 8;
              else
                b->yy_buf_size *= 2;

              b->yy_ch_buf = (char *)
                             /* Include room in for 2 EOB chars. */
                             yy_flex_realloc((void *) b->yy_ch_buf,
                                              b->yy_buf_size + 2);
            }
          else
            /* Can't grow it, we don't own it. */
            b->yy_ch_buf = 0;

          if (! b->yy_ch_buf)
            YY_FATAL_ERROR(
              "fatal error - scanner input buffer overflow");

          yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

          num_to_read = yy_current_buffer->yy_buf_size -
                        number_to_move - 1;
#endif
        }

      if (num_to_read > YY_READ_BUF_SIZE)
        num_to_read = YY_READ_BUF_SIZE;

      /* Read in more data. */
      YY_INPUT((&yy_current_buffer->yy_ch_buf[number_to_move]),
                yy_n_chars, num_to_read);

      yy_current_buffer->yy_n_chars = yy_n_chars;
    }

  if (yy_n_chars == 0)
    {
      if (number_to_move == YY_MORE_ADJ)
        {
          ret_val = EOB_ACT_END_OF_FILE;
          yyrestart(yyin);
        }

      else
        {
          ret_val = EOB_ACT_LAST_MATCH;
          yy_current_buffer->yy_buffer_status =
            YY_BUFFER_EOF_PENDING;
        }
    }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  yy_n_chars += number_to_move;
  yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
  yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

  yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
{
  register yy_state_type yy_current_state;
  register char *yy_cp;

  yy_current_state = yy_start;

  for (yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp)
    {
      register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
      if (yy_accept[yy_current_state])
        {
          yy_last_accepting_state = yy_current_state;
          yy_last_accepting_cpos = yy_cp;
        }
      while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
        {
          yy_current_state = (int) yy_def[yy_current_state];
          if (yy_current_state >= 490)
            yy_c = yy_meta[(unsigned int) yy_c];
        }
      yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 * next_state = yy_try_NUL_trans(current_state);
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans(yy_state_type yy_current_state)
{
  register int yy_is_jam;
  register char *yy_cp = yy_c_buf_p;

  register YY_CHAR yy_c = 1;
  if (yy_accept[yy_current_state])
    {
      yy_last_accepting_state = yy_current_state;
      yy_last_accepting_cpos = yy_cp;
    }
  while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
    {
      yy_current_state = (int) yy_def[yy_current_state];
      if (yy_current_state >= 490)
        yy_c = yy_meta[(unsigned int) yy_c];
    }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
  yy_is_jam = (yy_current_state == 489);

  return yy_is_jam ? 0 : yy_current_state;
}

void yyFlexLexer::yyunput(int c, register char* yy_bp)
{
  register char *yy_cp = yy_c_buf_p;

  /* undo effects of setting up yytext */
  *yy_cp = yy_hold_char;

  if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
    {/* need to shift things up to make room */
      /* +2 for EOB chars. */
      register int number_to_move = yy_n_chars + 2;
      register char *dest = &yy_current_buffer->yy_ch_buf[
                              yy_current_buffer->yy_buf_size + 2];
      register char *source =
        &yy_current_buffer->yy_ch_buf[number_to_move];

      while (source > yy_current_buffer->yy_ch_buf)
        *--dest = *--source;

      yy_cp += (int) (dest - source);
      yy_bp += (int) (dest - source);
      yy_current_buffer->yy_n_chars =
        yy_n_chars = yy_current_buffer->yy_buf_size;

      if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
        YY_FATAL_ERROR("flex scanner push-back overflow");
    }

  *--yy_cp = (char) c;

  yytext_ptr = yy_bp;
  yy_hold_char = *yy_cp;
  yy_c_buf_p = yy_cp;
}

int yyFlexLexer::yyinput()
{
  int c;

  *yy_c_buf_p = yy_hold_char;

  if (*yy_c_buf_p == YY_END_OF_BUFFER_CHAR)
    {
      /* yy_c_buf_p now points to the character we want to return.
       * If this occurs *before* the EOB characters, then it's a
       * valid NUL; if not, then we've hit the end of the buffer.
       */
      if (yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars])
        /* This was really a NUL. */
        *yy_c_buf_p = '\0';

      else
        {/* need more input */
          int offset = yy_c_buf_p - yytext_ptr;
          ++yy_c_buf_p;

          switch (yy_get_next_buffer())
            {
            case EOB_ACT_LAST_MATCH:
              /* This happens because yy_g_n_b()
               * sees that we've accumulated a
               * token and flags that we need to
               * try matching the token before
               * proceeding.  But for input(),
               * there's no matching to consider.
               * So convert the EOB_ACT_LAST_MATCH
               * to EOB_ACT_END_OF_FILE.
               */

              /* Reset buffer status. */
              yyrestart(yyin);

              /* fall through */

            case EOB_ACT_END_OF_FILE:
              {
                if (yywrap())
                  return EOF;

                if (! yy_did_buffer_switch_on_eof)
                  YY_NEW_FILE;
#ifdef __cplusplus
                return yyinput();
#else
                return input();
#endif
              }

            case EOB_ACT_CONTINUE_SCAN:
              yy_c_buf_p = yytext_ptr + offset;
              break;
            }
        }
    }

  c = *(unsigned char *) yy_c_buf_p; /* cast for 8-bit char's */
  *yy_c_buf_p = '\0'; /* preserve yytext */
  yy_hold_char = *++yy_c_buf_p;

  return c;
}

void yyFlexLexer::yyrestart(istream* input_file)
{
  if (! yy_current_buffer)
    yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE);

  yy_init_buffer(yy_current_buffer, input_file);
  yy_load_buffer_state();
}

void yyFlexLexer::yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
{
  if (yy_current_buffer == new_buffer)
    return;

  if (yy_current_buffer)
    {
      /* Flush out information for old buffer. */
      *yy_c_buf_p = yy_hold_char;
      yy_current_buffer->yy_buf_pos = yy_c_buf_p;
      yy_current_buffer->yy_n_chars = yy_n_chars;
    }

  yy_current_buffer = new_buffer;
  yy_load_buffer_state();

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  yy_did_buffer_switch_on_eof = 1;
}

void yyFlexLexer::yy_load_buffer_state()
{
  yy_n_chars = yy_current_buffer->yy_n_chars;
  yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
  yyin = yy_current_buffer->yy_input_file;
  yy_hold_char = *yy_c_buf_p;
}

YY_BUFFER_STATE yyFlexLexer::yy_create_buffer(istream* file, int size)
{
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE) yy_flex_alloc(sizeof(struct yy_buffer_state));
  if (! b)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *) yy_flex_alloc(b->yy_buf_size + 2);
  if (! b->yy_ch_buf)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  yy_init_buffer(b, file);

  return b;
}

void yyFlexLexer::yy_delete_buffer(YY_BUFFER_STATE b)
{
  if (! b)
    return;

  if (b == yy_current_buffer)
    yy_current_buffer = (YY_BUFFER_STATE) 0;

  if (b->yy_is_our_buffer)
    yy_flex_free((void *) b->yy_ch_buf);

  yy_flex_free((void *) b);
}

void yyFlexLexer::yy_init_buffer(YY_BUFFER_STATE b, istream* file)

{
  yy_flush_buffer(b);

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

  b->yy_is_interactive = 0;
}

void yyFlexLexer::yy_flush_buffer(YY_BUFFER_STATE b)
{
  if (! b)
    return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == yy_current_buffer)
    yy_load_buffer_state();
}

#ifndef YY_NO_SCAN_BUFFER
#endif

#ifndef YY_NO_SCAN_STRING
#endif

#ifndef YY_NO_SCAN_BYTES
#endif

#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state(int new_state)
{
  if (yy_start_stack_ptr >= yy_start_stack_depth)
    {
      yy_size_t new_size;

      yy_start_stack_depth += YY_START_STACK_INCR;
      new_size = yy_start_stack_depth * sizeof(int);

      if (! yy_start_stack)
        yy_start_stack = (int *) yy_flex_alloc(new_size);

      else
        yy_start_stack = (int *) yy_flex_realloc(
                           (void *) yy_start_stack, new_size);

      if (! yy_start_stack)
        YY_FATAL_ERROR(
          "out of memory expanding start-condition stack");
    }

  yy_start_stack[yy_start_stack_ptr++] = YY_START;

  BEGIN(new_state);
}
#endif

#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
{
  if (--yy_start_stack_ptr < 0)
    YY_FATAL_ERROR("start-condition stack underflow");

  BEGIN(yy_start_stack[yy_start_stack_ptr]);
}
#endif

#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
{
  return yy_start_stack[yy_start_stack_ptr - 1];
}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError(yyconst char msg[])
{
  cerr << msg << '\n';
  exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
 do \
  {\
  /* Undo effects of setting up yytext. */ \
  yytext[yyleng] = yy_hold_char; \
  yy_c_buf_p = yytext + n; \
  yy_hold_char = *yy_c_buf_p; \
  *yy_c_buf_p = '\0'; \
  yyleng = n; \
  } \
 while (0)

/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy(char *s1, yyconst char *s2, int n)
#else
static void yy_flex_strncpy(s1, s2, n)
char *s1;
yyconst char *s2;
int n;
#endif
{
  register int i;
  for (i = 0; i < n; ++i)
    s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen(yyconst char *s)
#else
static int yy_flex_strlen(s)
yyconst char *s;
#endif
{
  register int n;
  for (n = 0; s[n]; ++n)
;

  return n;
}
#endif

#ifdef YY_USE_PROTOS
static void *yy_flex_alloc(yy_size_t size)
#else
static void *yy_flex_alloc(size)
yy_size_t size;
#endif
{
  return (void *) malloc(size);
}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc(void *ptr, yy_size_t size)
#else
static void *yy_flex_realloc(ptr, size)
void *ptr;
yy_size_t size;
#endif
{
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return (void *) realloc((char *) ptr, size);
}

#ifdef YY_USE_PROTOS
static void yy_flex_free(void *ptr)
#else
static void yy_flex_free(ptr)
void *ptr;
#endif
{
  free(ptr);
}

#if YY_MAIN
int main()
{
  yylex();
  return 0;
}
#endif
#line 592 "CEvaluationLexer.lpp"
