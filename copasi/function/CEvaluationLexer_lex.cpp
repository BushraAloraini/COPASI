// Begin CVS Header
//   $Source: /Volumes/Home/Users/shoops/cvs/copasi_dev/copasi/function/CEvaluationLexer_lex.cpp,v $
//   $Revision: 1.30 $
//   $Name:  $
//   $Author: shoops $
//   $Date: 2011/06/02 16:44:21 $
// End CVS Header

// Copyright (C) 2011 by Pedro Mendes, Virginia Tech Intellectual
// Properties, Inc., University of Heidelberg, and The University
// of Manchester.
// All rights reserved.

#line 2 "CEvaluationLexer_lex.cpp"

#line 4 "CEvaluationLexer_lex.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 35
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* The c++ scanner is a mess. The FlexLexer.h header file relies on the
 * following macro. This is required in order to pass the c++-multiple-scanners
 * test in the regression suite. We get reports that it breaks inheritance.
 * We will address this in a future release of flex, or omit the C++ scanner
 * altogether.
 */
#define yyFlexLexer CEvaluationFlexLexer

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types.
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t;
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;
#endif /* ! C99 */

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! FLEXINT_H */

/* begin standard C++ headers. */
#include <iostream>
#include <errno.h>
#include <cstdlib>
#include <cstring>
/* end standard C++ headers. */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif  /* defined (__STDC__) */
#endif  /* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN (yy_start) = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START (((yy_start) - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart( yyin  )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#define YY_BUF_SIZE 16384
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

extern yy_size_t yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

#define YY_LESS_LINENO(n)

/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
  do \
    { \
      /* Undo effects of setting up yytext. */ \
      int yyless_macro_arg = (n); \
      YY_LESS_LINENO(yyless_macro_arg);\
      *yy_cp = (yy_hold_char); \
      YY_RESTORE_YY_MORE_OFFSET \
      (yy_c_buf_p) = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
      YY_DO_BEFORE_ACTION; /* set up yytext again */ \
    } \
  while ( 0 )

#define unput(c) yyunput( c, (yytext_ptr)  )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
{

  std::istream* yy_input_file;

  char *yy_ch_buf;    /* input buffer */
  char *yy_buf_pos;   /* current position in input buffer */

  /* Size of input buffer in bytes, not including room for EOB
   * characters.
   */
  yy_size_t yy_buf_size;

  /* Number of characters read into yy_ch_buf, not including EOB
   * characters.
   */
  yy_size_t yy_n_chars;

  /* Whether we "own" the buffer - i.e., we know we created it,
   * and can realloc() it to grow it, and should free() it to
   * delete it.
   */
  int yy_is_our_buffer;

  /* Whether this is an "interactive" input source; if so, and
   * if we're using stdio for input, then we want to use getc()
   * instead of fread(), to make sure we stop fetching input after
   * each newline.
   */
  int yy_is_interactive;

  /* Whether we're considered to be at the beginning of a line.
   * If so, '^' rules will be active on the next match, otherwise
   * not.
   */
  int yy_at_bol;

  int yy_bs_lineno; /**< The line count. */
  int yy_bs_column; /**< The column count. */

  /* Whether to try to fill the input buffer when we reach the
   * end of it.
   */
  int yy_fill_buffer;

  int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
  /* When an EOF's been seen but there's still some text to process
   * then we mark the buffer as YY_EOF_PENDING, to indicate that we
   * shouldn't try reading from the input source any more.  We might
   * still have a bunch of tokens to match, though, because of
   * possible backing-up.
   *
   * When we actually see the EOF, we change the status to "new"
   * (via yyrestart()), so that the user can continue scanning by
   * just pointing yyin at a new input file.
   */
#define YY_BUFFER_EOF_PENDING 2

};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( (yy_buffer_stack) \
                            ? (yy_buffer_stack)[(yy_buffer_stack_top)] \
                            : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE (yy_buffer_stack)[(yy_buffer_stack_top)]

void *CEvaluationalloc(yy_size_t);
void *CEvaluationrealloc(void *, yy_size_t);
void CEvaluationfree(void *);

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
  { \
    if ( ! YY_CURRENT_BUFFER ){ \
        yyensure_buffer_stack (); \
        YY_CURRENT_BUFFER_LVALUE =    \
                                      yy_create_buffer( yyin, YY_BUF_SIZE ); \
      } \
    YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
  }

#define yy_set_bol(at_bol) \
  { \
    if ( ! YY_CURRENT_BUFFER ){\
        yyensure_buffer_stack (); \
        YY_CURRENT_BUFFER_LVALUE =    \
                                      yy_create_buffer( yyin, YY_BUF_SIZE ); \
      } \
    YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
  }

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

typedef unsigned char YY_CHAR;

#define yytext_ptr yytext

#include "copasi/FlexLexer.h"

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
  (yytext_ptr) = yy_bp; \
  yyleng = (size_t) (yy_cp - yy_bp); \
  (yy_hold_char) = *yy_cp; \
  *yy_cp = '\0'; \
  (yy_c_buf_p) = yy_cp;

#define YY_NUM_RULES 74
#define YY_END_OF_BUFFER 75
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
{
  flex_int32_t yy_verify;
  flex_int32_t yy_nxt;
};
static yyconst flex_int16_t yy_accept[348] =
  {   0,
      0,    0,    0,    0,    0,    0,    0,    0,   75,   73,
      72,   72,    8,   73,   66,   69,   59,   68,   58,    1,
      1,   73,   71,   71,   71,   71,   71,   71,   71,   71,
      71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
      71,   71,   71,   71,   71,   71,   71,   67,   70,   73,
      63,   73,   61,   64,   65,   62,   10,   73,   12,   73,
      73,   73,   73,   73,   73,   73,   60,   73,   73,   73,
      73,   73,   73,   73,   73,   71,   71,   72,    0,   71,
      0,    1,    1,    0,    0,    0,   18,    0,   57,   71,
      71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

      71,   71,   71,   71,   71,   71,   71,    3,   71,   71,
      71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
      71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
      71,   71,   71,   71,   71,   71,   13,   15,    9,   14,
      11,    0,   12,   10,   17,    0,    0,    0,   71,   71,
      1,    0,    1,   19,   56,   71,   71,   71,   71,   71,
      71,   71,   71,   71,   71,   71,   71,   71,   71,   55,
      71,   71,    7,   71,    8,   71,   71,   71,   71,   71,
      71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
      71,   71,   71,   71,   71,   71,   71,   71,   71,   71,

      71,   71,   71,   16,   48,   71,   71,   71,   71,   71,
      71,   71,   24,   71,   28,   71,   27,   71,   71,   22,
      71,   71,   71,   71,   71,   20,   71,   71,   26,   71,
      23,   71,   71,   25,   71,    4,   71,   71,   71,   71,
      71,   71,   71,   71,   71,   71,   71,   71,   71,   36,
      71,   71,   71,   71,   71,   35,   37,   50,   30,   34,
      33,   71,   71,   71,    5,   71,   71,   71,   71,   32,
      29,   47,   31,   71,   71,   71,   71,   71,   71,   71,
      71,   71,   71,   71,   71,   71,   71,   71,   71,   71,
      54,   71,   71,   49,   71,   21,   71,   71,   71,   71,

      71,   71,   71,   71,   71,   71,   71,   71,   71,   40,
      71,   39,   71,   38,   71,   71,   71,   71,   71,   71,
      53,   71,   71,   71,   71,   42,   46,   45,   44,   41,
      43,   71,   71,    6,   52,   71,   71,   71,   71,   71,
      71,   51,   71,   71,   71,    2,    0
  } ;

static yyconst flex_int32_t yy_ec[256] =
  {   0,
      1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
      1,    1,    2,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    2,    4,    5,    1,    1,    6,    7,    1,    8,
      9,   10,   11,   12,   13,   14,   15,   16,   17,   18,
      18,   18,   18,   18,   18,   18,   18,    1,    1,   19,
      20,   21,    1,    1,   22,   23,   24,   25,   26,   27,
      28,   29,   30,   31,   31,   32,   33,   34,   35,   36,
      37,   38,   39,   40,   41,   31,   31,   42,   43,   31,
      1,   44,    1,   45,   31,    1,   46,   47,   48,   49,

      50,   51,   52,   53,   54,   31,   31,   55,   56,   57,
      58,   59,   60,   61,   62,   63,   64,   31,   31,   65,
      66,   31,   67,   68,   69,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1
  } ;

static yyconst flex_int32_t yy_meta[70] =
  {   0,
      1,    1,    1,    1,    1,    1,    1,    2,    1,    1,
      1,    1,    1,    1,    1,    3,    3,    3,    1,    1,
      1,    3,    3,    3,    3,    3,    3,    2,    2,    2,
      2,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      2,    2,    2,    1,    1,    3,    3,    3,    3,    3,
      3,    2,    2,    2,    2,    2,    2,    2,    2,    2,
      2,    2,    2,    2,    2,    2,    1,    1,    1
  } ;

static yyconst flex_int16_t yy_base[352] =
  {   0,
      0,    0,    0,    0,   69,    0,  135,  136,  748,  749,
      139,  141,  749,  140,  749,  749,  749,  749,  749,  136,
      141,  130,  156,  739,  163,  152,  148,  153,  173,  164,
      175,  157,  195,  196,  174,  165,  180,  155,  158,  160,
      201,  203,  208,  168,  209,  211,  216,  749,  749,  726,
      749,  738,  749,  749,  749,  749,  724,  723,  722,  707,
      703,  203,  205,  713,  700,  702,  749,  679,  675,  170,
      185,  684,  672,  674,  663,  229,  228,  237,  209,  722,
      726,  259,  264,  276,    0,  223,  749,  725,  718,  718,
      252,  233,  238,  241,  248,  271,  257,  275,  276,  280,

      287,  290,  717,  294,  292,  295,  296,  716,  298,  297,
      299,  304,  302,  305,  307,  309,  310,  316,  315,  318,
      319,  320,  322,  324,  325,  331,  333,  334,  336,  337,
      339,  338,  340,  342,  332,  343,  749,  749,  749,  749,
      749,  698,  749,  749,  749,  684,  672,  659,  341,  344,
      338,  358,  374,    0,  749,  711,  355,  394,  351,  370,
      395,  399,  400,  401,  349,  402,  398,  403,  404,  709,
      405,  345,  709,  407,  708,  412,  414,  406,  415,  423,
      409,  357,  408,  416,  417,  413,  424,  437,  439,  418,
      440,  442,  444,  443,  445,  446,  447,  449,  451,  450,

      454,  458,  459,  749,  706,  706,  452,  453,  464,  705,
      704,  703,  701,  701,  699,  699,  697,  697,  457,  695,
      461,  474,  467,  473,  480,  694,  239,  472,  693,  693,
      691,  691,  690,  688,  688,  687,  477,  468,  470,  476,
      481,  488,  507,  489,  508,  509,  511,  510,  513,  685,
      515,  517,  520,  523,  524,  684,  683,  682,  681,  680,
      679,  679,  525,  521,  678,  677,  530,  676,  529,  674,
      673,  672,  671,  526,  527,  528,  532,  534,  535,  538,
      540,  541,  542,  544,  545,  554,  555,  564,  565,  567,
      670,  569,  570,  660,  559,  657,  655,  571,  560,  562,

      573,  574,  577,  578,  579,  590,  594,  598,  654,  652,
      651,  647,  647,  644,  644,  643,  642,  599,  600,  602,
      639,  638,  601,  603,  604,  634,  631,  628,  626,  625,
      623,  608,  609,  621,  619,  606,  610,  611,  358,  612,
      615,  351,  613,  616,  617,  242,  749,  670,  673,  675,
      174
  } ;

static yyconst flex_int16_t yy_def[352] =
  {   0,
      347,    1,    1,    1,  347,    5,    1,    1,  347,  347,
      347,  347,  347,  348,  347,  347,  347,  347,  347,  347,
      347,  349,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  350,  350,  347,  348,  347,
      348,  347,  347,  347,  351,  349,  347,  349,  347,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,

      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  350,  350,
      347,  347,  347,  351,  347,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  347,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,

      350,  350,  350,  347,  347,  350,  350,  350,  350,  350,
      350,  350,  347,  350,  347,  350,  347,  350,  350,  347,
      350,  350,  350,  350,  350,  347,  350,  350,  347,  350,
      347,  350,  350,  347,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  347,
      350,  350,  350,  350,  350,  347,  347,  347,  347,  347,
      347,  350,  350,  350,  350,  350,  350,  350,  350,  347,
      347,  347,  347,  350,  350,  350,  350,  350,  350,  350,
      350,  350,  350,  350,  350,  350,  350,  350,  350,  350,
      347,  350,  350,  347,  350,  347,  350,  350,  350,  350,

      350,  350,  350,  350,  350,  350,  350,  350,  350,  347,
      350,  347,  350,  347,  350,  350,  350,  350,  350,  350,
      347,  350,  350,  350,  350,  347,  347,  347,  347,  347,
      347,  350,  350,  350,  347,  350,  350,  350,  350,  350,
      350,  347,  350,  350,  350,  350,    0,  347,  347,  347,
      347
  } ;

static yyconst flex_int16_t yy_nxt[819] =
  {   0,
      10,   11,   12,   13,   14,   10,   10,   15,   16,   10,
      17,   18,   19,   10,   10,   20,   21,   21,   22,   10,
      10,   23,   24,   25,   26,   27,   28,   24,   24,   29,
      24,   30,   24,   31,   24,   32,   24,   24,   33,   34,
      35,   24,   24,   10,   10,   36,   24,   37,   38,   39,
      40,   24,   24,   41,   42,   24,   43,   24,   44,   24,
      24,   45,   46,   47,   24,   24,   48,   10,   49,   10,
      11,   12,   50,   10,   51,   52,   15,   16,   53,   54,
      18,   55,   10,   56,   10,   10,   10,   57,   58,   59,
      60,   10,   10,   10,   61,   10,   62,   10,   10,   10,

      63,   10,   64,   65,   10,   10,   10,   10,   10,   10,
      66,   10,   10,   67,   68,   10,   10,   10,   69,   10,
      70,   10,   10,   71,   10,   72,   73,   10,   10,   10,
      10,   10,   10,   74,   10,   48,   75,   49,   10,   10,
      78,   78,   78,   78,   80,   10,   10,   10,   10,   82,
      87,   83,   83,   83,   82,   89,   83,   83,   83,   89,
      89,   84,   89,   89,   89,   89,   84,   89,   76,   76,
      89,   89,   89,   88,  101,   89,  154,   99,   91,   92,
      89,   89,   89,   81,  102,   84,  108,   89,   96,  100,
      84,   77,   77,   93,   94,   95,  106,   97,  105,  103,

      85,   98,   89,   89,  123,  125,  104,  114,   89,  107,
      89,  115,  116,   80,  126,   89,   89,  112,   89,  141,
      109,  108,  124,   89,  110,  117,  118,  119,  141,  120,
      139,  111,  143,  113,  139,   89,   89,  121,   78,   78,
      89,  122,  143,   87,  144,   89,   89,  144,   89,   89,
      106,  103,   81,  129,  268,   89,  134,  127,  131,   89,
      128,  158,  132,  149,   89,  130,   88,  157,  133,  160,
      159,  135,  136,  129,  151,  151,  151,   82,   89,   83,
      83,   83,   89,   89,   84,  150,  152,   89,  152,   84,
      156,  153,  153,  153,   89,  162,  163,   89,  164,   89,

      161,   89,   89,   89,   89,   89,   89,  165,   84,   89,
      167,   89,   89,   84,   89,  166,   89,   89,  168,  172,
      171,  176,   89,   89,  169,   89,   89,   89,  173,   89,
      177,   89,   89,  174,  181,  175,  178,  179,   89,   89,
      89,   89,  180,   89,   89,   89,   89,   89,   89,   89,
      89,   89,  226,  151,  151,  151,   89,  183,   89,  155,
      185,  227,   89,   84,   89,  342,  182,  189,  156,  184,
      219,  186,  192,  153,  153,  153,  190,   89,  174,  193,
      187,  188,  191,  195,  210,  196,  198,   84,  194,  153,
      153,  153,  173,  206,  199,  202,  203,  197,  201,  175,

      200,   89,   89,  211,  197,   89,  213,  215,  217,  220,
      89,   89,   89,   89,   89,   89,   89,  207,  206,  229,
      89,  231,  234,   89,   89,   89,  212,  214,  216,  218,
      89,  213,  208,  209,  225,  237,  221,  222,  224,  228,
      230,  223,  232,  235,  215,  233,  217,  220,  236,   89,
      89,   89,   89,  226,   89,  238,  229,   89,  231,   89,
      89,  234,  247,  241,   89,   89,   89,  212,   89,  239,
      240,   89,  210,  211,   89,   89,  214,   89,  253,   89,
      89,   89,  254,   89,   89,  255,  251,   89,   89,  216,
      252,  218,  265,  269,  263,   89,   89,  242,  246,  262,

      245,  230,  248,  232,  243,  244,  235,  236,  264,  249,
      266,  274,  233,  267,   89,   89,   89,   89,   89,  277,
      89,  279,   89,  278,   89,  275,  268,   89,   89,  276,
      89,   89,   89,   89,   89,   89,   89,   89,  265,   89,
      287,   89,   89,  288,  280,   89,  262,   89,   89,   89,
      292,   89,   89,  285,  286,  283,  289,  290,  293,  295,
      297,  310,  312,  298,  281,  282,   89,   89,  266,  310,
      284,  314,   89,  309,   89,  301,   89,   89,   89,  302,
      312,  314,  311,  313,   89,   89,   89,  305,  299,  300,
      303,  304,  315,  316,  307,  317,  297,   89,  320,  319,

      306,   89,  318,  322,  308,   89,   89,   89,   89,   89,
      89,   89,  309,   89,  311,   89,   89,   89,   89,   89,
      89,  333,   89,   89,   89,  313,  315,  155,   89,  316,
      317,  155,  341,  155,  155,  323,  155,  338,  332,  155,
      339,  346,  155,  324,  334,  335,  344,  155,  337,  331,
      330,  329,  155,  322,  328,  155,  325,  343,  327,  340,
      155,  326,  321,  336,  339,  155,  346,  345,  155,  334,
      79,   79,   79,   86,   86,   86,   90,   90,  155,  155,
      155,  155,  155,  296,  294,   89,  291,  155,  155,  155,
      155,  155,  155,  155,   89,  273,  155,  272,  271,  155,

      270,  155,  155,  155,  261,  155,  260,  155,  259,  155,
      258,  257,  256,  250,  155,   89,   89,  155,  205,  204,
      138,  204,  138,   89,  170,   89,  155,  347,  347,   89,
      145,  148,  145,  137,  140,  147,  146,  145,  137,  140,
      142,  141,  140,  139,  138,  137,   89,  347,    9,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,

      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347
  } ;

static yyconst flex_int16_t yy_chk[819] =
  {   0,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
      1,    1,    1,    1,    1,    1,    1,    1,    1,    5,
      5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
      5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
      5,    5,    5,    5,    5,    5,    5,    5,    5,    5,

      5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
      5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
      5,    5,    5,    5,    5,    5,    5,    5,    5,    5,
      5,    5,    5,    5,    5,    5,    5,    5,    7,    8,
      11,   11,   12,   12,   14,    7,    8,    7,    8,   20,
      22,   20,   20,   20,   21,   27,   21,   21,   21,   26,
      28,   20,   38,   23,   32,   39,   21,   40,    7,    8,
      25,   30,   36,   22,   28,   44,  351,   26,   23,   23,
      29,   35,   31,   14,   28,   20,   32,   37,   25,   27,
      21,    7,    8,   23,   23,   23,   31,   25,   30,   29,

      20,   25,   33,   34,   38,   40,   29,   35,   41,   31,
      42,   36,   36,   79,   40,   43,   45,   34,   46,   70,
      33,   44,   39,   47,   33,   36,   36,   36,   62,   37,
      63,   33,   70,   34,   71,   77,   76,   37,   78,   78,
      92,   37,   62,   86,   63,   93,  227,   71,   94,  346,
      76,   41,   79,   43,  227,   95,   46,   41,   45,   91,
      42,   93,   45,   76,   97,   43,   86,   92,   45,   95,
      94,   46,   47,   77,   82,   82,   82,   83,   96,   83,
      83,   83,   98,   99,   82,   77,   84,  100,   84,   83,
      91,   84,   84,   84,  101,   97,   97,  102,   98,  105,

      96,  104,  106,  107,  110,  109,  111,   99,   82,  113,
      101,  112,  114,   83,  115,  100,  116,  117,  101,  105,
      104,  109,  119,  118,  102,  120,  121,  122,  106,  123,
      110,  124,  125,  107,  114,  107,  111,  112,  126,  135,
      127,  128,  113,  129,  130,  132,  131,  133,  149,  134,
      136,  150,  172,  151,  151,  151,  165,  117,  159,  342,
      119,  172,  157,  151,  182,  339,  116,  122,  115,  118,
      165,  120,  125,  152,  152,  152,  123,  160,  149,  125,
      121,  121,  124,  127,  159,  128,  131,  151,  126,  153,
      153,  153,  129,  157,  132,  135,  136,  130,  134,  130,

      133,  158,  161,  160,  150,  167,  162,  163,  164,  166,
      168,  169,  171,  178,  174,  183,  181,  158,  182,  176,
      186,  177,  179,  184,  185,  190,  161,  162,  163,  164,
      180,  187,  158,  158,  171,  181,  166,  167,  169,  174,
      176,  168,  177,  179,  188,  178,  189,  191,  180,  192,
      194,  193,  195,  196,  197,  183,  198,  200,  199,  207,
      208,  201,  196,  190,  219,  202,  203,  186,  221,  183,
      183,  209,  184,  185,  223,  238,  187,  239,  208,  228,
      224,  222,  208,  240,  237,  209,  207,  225,  241,  188,
      207,  189,  223,  228,  221,  242,  244,  191,  195,  219,

      194,  198,  197,  199,  192,  193,  201,  202,  222,  203,
      224,  237,  200,  225,  243,  245,  246,  248,  247,  239,
      249,  240,  251,  239,  252,  238,  247,  253,  264,  238,
      254,  255,  263,  274,  275,  276,  269,  267,  244,  277,
      252,  278,  279,  253,  242,  280,  241,  281,  282,  283,
      263,  284,  285,  251,  251,  248,  254,  255,  264,  267,
      269,  286,  287,  274,  243,  246,  295,  299,  245,  300,
      249,  288,  289,  285,  290,  276,  292,  293,  298,  277,
      301,  302,  286,  287,  303,  304,  305,  280,  275,  275,
      278,  279,  288,  289,  282,  290,  283,  306,  295,  293,

      281,  307,  292,  298,  284,  308,  318,  319,  323,  320,
      324,  325,  299,  336,  300,  332,  333,  337,  338,  340,
      343,  319,  341,  344,  345,  301,  302,  335,  334,  303,
      304,  331,  338,  330,  329,  305,  328,  332,  318,  327,
      333,  344,  326,  306,  320,  322,  341,  321,  324,  317,
      316,  315,  314,  308,  313,  312,  307,  340,  311,  336,
      310,  309,  297,  323,  337,  296,  345,  343,  294,  325,
      348,  348,  348,  349,  349,  349,  350,  350,  291,  273,
      272,  271,  270,  268,  266,  265,  262,  261,  260,  259,
      258,  257,  256,  250,  236,  235,  234,  233,  232,  231,

      230,  229,  226,  220,  218,  217,  216,  215,  214,  213,
      212,  211,  210,  206,  205,  175,  173,  170,  156,  148,
      147,  146,  142,  108,  103,   90,   89,   88,   81,   80,
      75,   74,   73,   72,   69,   68,   66,   65,   64,   61,
      60,   59,   58,   57,   52,   50,   24,    9,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,

      347,  347,  347,  347,  347,  347,  347,  347,  347,  347,
      347,  347,  347,  347,  347,  347,  347,  347
  } ;

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "CEvaluationLexer.lpp"
/* scanner for kinetic functions */

#line 11 "CEvaluationLexer.lpp"
#include <vector>

#include "copasi.h"
#include "CEvaluationNode.h"
#include "CEvaluationLexer.h"
#include "CEvaluationParser_yacc.h"

#ifndef YYERRCODE
#define YYERRCODE 256
#endif

#define YY_USER_INIT \
  mpNode = NULL;\
  mPosition = 0;\
  mpNodeList = new std::vector< CEvaluationNode * >;

#define COMMON_ACTION \
  mPosition += yyleng;\
  mpNodeList->push_back(mpNode);

#line 723 "CEvaluationLexer_lex.cpp"

#define INITIAL 0
#define sSIGNorVALUE 1
#define sOPERATOR 2
#define sVALUE 3

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy(char *, yyconst char *, int);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char *);
#endif

#ifndef YY_NO_INPUT

#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
#define ECHO LexerOutput( yytext, yyleng )
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
  \
  if ( (result = LexerInput( (char *) buf, max_size )) < 0 ) \
    YY_FATAL_ERROR( "input in flex scanner failed" );

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError( msg )
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1
#define YY_DECL int yyFlexLexer::yylex()
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
  YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
  register yy_state_type yy_current_state;
  register char *yy_cp, *yy_bp;
  register int yy_act;

#line 37 "CEvaluationLexer.lpp"

#line 828 "CEvaluationLexer_lex.cpp"

  if (!(yy_init))
    {
      (yy_init) = 1;

#ifdef YY_USER_INIT
      YY_USER_INIT;
#endif

      if (!(yy_start))
        (yy_start) = 1; /* first start state */

      if (! yyin)
        yyin = & std::cin;

      if (! yyout)
        yyout = & std::cout;

      if (! YY_CURRENT_BUFFER)
        {
          yyensure_buffer_stack();
          YY_CURRENT_BUFFER_LVALUE =
            yy_create_buffer(yyin, YY_BUF_SIZE);
        }

      yy_load_buffer_state();
    }

  while (1)      /* loops until end-of-file is reached */
    {
      yy_cp = (yy_c_buf_p);

      /* Support of yytext. */
      *yy_cp = (yy_hold_char);

      /* yy_bp points to the position in yy_ch_buf of the start of
       * the current run.
       */
      yy_bp = yy_cp;

      yy_current_state = (yy_start);
yy_match:

      do
        {
          register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];

          if (yy_accept[yy_current_state])
            {
              (yy_last_accepting_state) = yy_current_state;
              (yy_last_accepting_cpos) = yy_cp;
            }

          while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
            {
              yy_current_state = (int) yy_def[yy_current_state];

              if (yy_current_state >= 348)
                yy_c = yy_meta[(unsigned int) yy_c];
            }

          yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
          ++yy_cp;
        }
      while (yy_current_state != 347);

      yy_cp = (yy_last_accepting_cpos);
      yy_current_state = (yy_last_accepting_state);

yy_find_action:
      yy_act = yy_accept[yy_current_state];

      YY_DO_BEFORE_ACTION;

do_action:  /* This label is used only to access EOF actions. */

      switch (yy_act)
        { /* beginning of action switch */
          case 0: /* must back up */
            /* undo the effects of YY_DO_BEFORE_ACTION */
            *yy_cp = (yy_hold_char);
            yy_cp = (yy_last_accepting_cpos);
            yy_current_state = (yy_last_accepting_state);
            goto yy_find_action;

          case 1:
            YY_RULE_SETUP
#line 38 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeNumber(CEvaluationNodeNumber::DOUBLE,
                                               yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 2:
            YY_RULE_SETUP
#line 46 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::EXPONENTIALE,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 3:
            YY_RULE_SETUP
#line 54 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::PI,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 4:
            YY_RULE_SETUP
#line 62 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::TRUE,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_VALUE;

            YY_BREAK
          case 5:
            YY_RULE_SETUP
#line 70 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::FALSE,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_VALUE;

            YY_BREAK
          case 6:
            YY_RULE_SETUP
#line 78 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::_INFINITY,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 7:
            YY_RULE_SETUP
#line 86 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::_NaN,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 8:
            YY_RULE_SETUP
#line 94 "CEvaluationLexer.lpp"

            BEGIN(sVALUE);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::NOT,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_NOT;

            YY_BREAK
          case 9:
            YY_RULE_SETUP
#line 102 "CEvaluationLexer.lpp"

            BEGIN(sSIGNorVALUE);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::LE,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_LE;

            YY_BREAK
          case 10:
            YY_RULE_SETUP
#line 110 "CEvaluationLexer.lpp"

            BEGIN(sSIGNorVALUE);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::LT,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_LT;

            YY_BREAK
          case 11:
            YY_RULE_SETUP
#line 118 "CEvaluationLexer.lpp"

            BEGIN(sSIGNorVALUE);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::GE,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_GE;

            YY_BREAK
          case 12:
            YY_RULE_SETUP
#line 126 "CEvaluationLexer.lpp"

            BEGIN(sSIGNorVALUE);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::GT,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_GT;

            YY_BREAK
          case 13:
            YY_RULE_SETUP
#line 134 "CEvaluationLexer.lpp"

            BEGIN(sSIGNorVALUE);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::NE,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_NE;

            YY_BREAK
          case 14:
            YY_RULE_SETUP
#line 142 "CEvaluationLexer.lpp"

            BEGIN(sSIGNorVALUE);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::EQ,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_EQ;

            YY_BREAK
          case 15:
            YY_RULE_SETUP
#line 150 "CEvaluationLexer.lpp"

            BEGIN(sSIGNorVALUE);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::AND,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_AND;

            YY_BREAK
          case 16:
            YY_RULE_SETUP
#line 158 "CEvaluationLexer.lpp"

            BEGIN(sSIGNorVALUE);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::XOR,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_XOR;

            YY_BREAK
          case 17:
            YY_RULE_SETUP
#line 166 "CEvaluationLexer.lpp"

            BEGIN(sSIGNorVALUE);
            mpNode = new CEvaluationNodeLogical(CEvaluationNodeLogical::OR,
                                                yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_OR;

            YY_BREAK
          case 18:
            /* rule 18 can match eol */
            YY_RULE_SETUP
#line 174 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeObject(CEvaluationNodeObject::CN,
                                               yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 19:
            YY_RULE_SETUP
#line 182 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeObject(CEvaluationNodeObject::POINTER,
                                               yytext);
            COMMON_ACTION;
            return TOKEN_NUMBER;

            YY_BREAK
          case 20:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 190 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::LOG,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 21:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 197 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::LOG10,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 22:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 204 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::EXP,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 23:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 211 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SIN,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 24:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 218 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 25:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 225 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::TAN,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 26:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 232 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SEC,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 27:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 239 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CSC,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 28:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 246 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COT,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 29:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 253 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SINH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 30:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 260 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COSH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 31:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 267 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::TANH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 32:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 274 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SECH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 33:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 281 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CSCH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 34:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 288 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COTH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 35:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 295 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSIN,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 36:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 302 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 37:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 309 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCTAN,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 38:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 316 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSEC,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 39:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 323 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCSC,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 40:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 330 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOT,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 41:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 337 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSINH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 42:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 344 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOSH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 43:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 351 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCTANH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 44:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 358 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSECH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 45:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 365 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCSCH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 46:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 372 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOTH,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 47:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 379 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SQRT,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 48:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 386 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ABS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 49:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 393 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::FLOOR,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 50:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 400 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CEIL,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 51:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 407 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::FACTORIAL,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION;

            YY_BREAK
          case 52:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 414 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::RUNIFORM,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION_2;

            YY_BREAK
          case 53:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 421 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::RNORMAL,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION_2;

            YY_BREAK
          case 54:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 428 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeDelay(CEvaluationNodeDelay::DELAY,
                                              yytext);
            COMMON_ACTION;
            return TOKEN_FUNCTION_2;

            YY_BREAK
          case 55:
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 435 "CEvaluationLexer.lpp"

            mpNode = new CEvaluationNodeChoice(CEvaluationNodeChoice::IF,
                                               yytext);
            COMMON_ACTION;
            return TOKEN_LOGICAL_CHOICE;

            YY_BREAK
          case 56:
            /* rule 56 can match eol */
            *yy_cp = (yy_hold_char); /* undo effects of setting up yytext */
            (yy_c_buf_p) = yy_cp -= 1;
            YY_DO_BEFORE_ACTION; /* set up yytext again */
            YY_RULE_SETUP
#line 442 "CEvaluationLexer.lpp"

            {
              std::string tmp(yytext);
              mpNode = new CEvaluationNodeCall(CEvaluationNodeCall::EXPRESSION,
                                               tmp.substr(0, tmp.length() - 1));
            }
            COMMON_ACTION;
            return TOKEN_CALL;

            YY_BREAK
          case 57:
            /* rule 57 can match eol */
            YY_RULE_SETUP
#line 452 "CEvaluationLexer.lpp"

            {
              std::string tmp(yytext);
              mpNode = new CEvaluationNodeCall(CEvaluationNodeCall::FUNCTION,
                                               tmp.substr(0, tmp.length() - 1));
            }
            COMMON_ACTION;
            return TOKEN_CALL;

            YY_BREAK
          case 58:
            YY_RULE_SETUP
#line 462 "CEvaluationLexer.lpp"

            BEGIN(sVALUE);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::MINUS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_SIGN;

            YY_BREAK
          case 59:
            YY_RULE_SETUP
#line 470 "CEvaluationLexer.lpp"

            BEGIN(sVALUE);
            mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::PLUS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_SIGN;

            YY_BREAK
          case 60:
            YY_RULE_SETUP
#line 478 "CEvaluationLexer.lpp"

            BEGIN(sSIGNorVALUE);
            mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::POWER,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_OPERATOR_POWER;

            YY_BREAK
          case 61:
            YY_RULE_SETUP
#line 486 "CEvaluationLexer.lpp"

            BEGIN(sSIGNorVALUE);
            mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MULTIPLY,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_OPERATOR_MULTIPLY;

            YY_BREAK
          case 62:
            YY_RULE_SETUP
#line 494 "CEvaluationLexer.lpp"

            BEGIN(sSIGNorVALUE);
            mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::DIVIDE,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_OPERATOR_MULTIPLY;

            YY_BREAK
          case 63:
            YY_RULE_SETUP
#line 502 "CEvaluationLexer.lpp"

            BEGIN(sSIGNorVALUE);
            mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MODULUS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_OPERATOR_MODULUS;

            YY_BREAK
          case 64:
            YY_RULE_SETUP
#line 510 "CEvaluationLexer.lpp"

            BEGIN(sSIGNorVALUE);
            mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::PLUS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_OPERATOR_PLUS;

            YY_BREAK
          case 65:
            YY_RULE_SETUP
#line 518 "CEvaluationLexer.lpp"

            BEGIN(sSIGNorVALUE);
            mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MINUS,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_OPERATOR_PLUS;

            YY_BREAK
          case 66:
            YY_RULE_SETUP
#line 526 "CEvaluationLexer.lpp"

            BEGIN(sSIGNorVALUE);
            mPosition += yyleng;
            // mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::OPEN,
            //                                       yytext);
            // COMMON_ACTION;
            return TOKEN_STRUCTURE_OPEN;

            YY_BREAK
          case 67:
            YY_RULE_SETUP
#line 535 "CEvaluationLexer.lpp"

            BEGIN(sSIGNorVALUE);
            mPosition += yyleng;
            // mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::VECTOR_OPEN,
            //                                       yytext);
            // COMMON_ACTION;
            return TOKEN_STRUCTURE_VECTOR_OPEN;

            YY_BREAK
          case 68:
            YY_RULE_SETUP
#line 544 "CEvaluationLexer.lpp"

            BEGIN(sSIGNorVALUE);
            mPosition += yyleng;
            // mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::COMMA,
            //                                       yytext);
            // COMMON_ACTION;
            return TOKEN_STRUCTURE_COMMA;

            YY_BREAK
          case 69:
            YY_RULE_SETUP
#line 553 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mPosition += yyleng;
            // mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::CLOSE,
            //                                       yytext);
            // COMMON_ACTION;
            return TOKEN_STRUCTURE_CLOSE;

            YY_BREAK
          case 70:
            YY_RULE_SETUP
#line 562 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mPosition += yyleng;
            // mpNode = new CEvaluationNodeStructure(CEvaluationNodeStructure::VECTOR_CLOSE,
            //                                       yytext);
            // COMMON_ACTION;
            return TOKEN_STRUCTURE_VECTOR_CLOSE;

            YY_BREAK
          case 71:
            /* rule 71 can match eol */
            YY_RULE_SETUP
#line 571 "CEvaluationLexer.lpp"

            BEGIN(sOPERATOR);
            mpNode = new CEvaluationNodeVariable(CEvaluationNodeVariable::ANY,
                                                 yytext);
            COMMON_ACTION;
            return TOKEN_VARIABLE;

            YY_BREAK
          case 72:
            /* rule 72 can match eol */
            YY_RULE_SETUP
#line 579 "CEvaluationLexer.lpp"

            mPosition += yyleng;
            // mpNode = new CEvaluationNodeWhiteSpace(CEvaluationNodeWhiteSpace::ANY,
            //                                        yytext);
            // COMMON_ACTION;

            YY_BREAK
          case YY_STATE_EOF(INITIAL):
          case YY_STATE_EOF(sSIGNorVALUE):
          case YY_STATE_EOF(sOPERATOR):
          case YY_STATE_EOF(sVALUE):
#line 586 "CEvaluationLexer.lpp"
            return 0;
            YY_BREAK
          case 73:
            YY_RULE_SETUP
#line 588 "CEvaluationLexer.lpp"

            CCopasiMessage(CCopasiMessage::ERROR, MCFunction + 2, mPosition);
            return YYERRCODE;

            YY_BREAK
          case 74:
            YY_RULE_SETUP
#line 593 "CEvaluationLexer.lpp"
            ECHO;
            YY_BREAK
#line 1807 "CEvaluationLexer_lex.cpp"

          case YY_END_OF_BUFFER:
          {
            /* Amount of text matched not including the EOB char. */
            int yy_amount_of_matched_text = (int)(yy_cp - (yytext_ptr)) - 1;

            /* Undo the effects of YY_DO_BEFORE_ACTION. */
            *yy_cp = (yy_hold_char);
            YY_RESTORE_YY_MORE_OFFSET

            if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW)
              {
                /* We're scanning a new file or input source.  It's
                 * possible that this happened because the user
                 * just pointed yyin at a new source and called
                 * yylex().  If so, then we have to assure
                 * consistency between YY_CURRENT_BUFFER and our
                 * globals.  Here is the right place to do so, because
                 * this is the first action (other than possibly a
                 * back-up) that will match for the new input source.
                 */
                (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
                YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
                YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
              }

            /* Note that here we test for yy_c_buf_p "<=" to the position
             * of the first EOB in the buffer, since yy_c_buf_p will
             * already have been incremented past the NUL character
             * (since all states make transitions on EOB to the
             * end-of-buffer state).  Contrast this with the test
             * in input().
             */
            if ((yy_c_buf_p) <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
              { /* This was really a NUL. */
                yy_state_type yy_next_state;

                (yy_c_buf_p) = (yytext_ptr) + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                /* Okay, we're now positioned to make the NUL
                 * transition.  We couldn't have
                 * yy_get_previous_state() go ahead and do it
                 * for us because it doesn't know how to deal
                 * with the possibility of jamming (and we don't
                 * want to build jamming into it because then it
                 * will run more slowly).
                 */

                yy_next_state = yy_try_NUL_trans(yy_current_state);

                yy_bp = (yytext_ptr) + YY_MORE_ADJ;

                if (yy_next_state)
                  {
                    /* Consume the NUL. */
                    yy_cp = ++(yy_c_buf_p);
                    yy_current_state = yy_next_state;
                    goto yy_match;
                  }

                else
                  {
                    yy_cp = (yy_last_accepting_cpos);
                    yy_current_state = (yy_last_accepting_state);
                    goto yy_find_action;
                  }
              }

            else switch (yy_get_next_buffer())
                {
                  case EOB_ACT_END_OF_FILE:
                  {
                    (yy_did_buffer_switch_on_eof) = 0;

                    if (yywrap())
                      {
                        /* Note: because we've taken care in
                         * yy_get_next_buffer() to have set up
                         * yytext, we can now set up
                         * yy_c_buf_p so that if some total
                         * hoser (like flex itself) wants to
                         * call the scanner after we return the
                         * YY_NULL, it'll still work - another
                         * YY_NULL will get returned.
                         */
                        (yy_c_buf_p) = (yytext_ptr) + YY_MORE_ADJ;

                        yy_act = YY_STATE_EOF(YY_START);
                        goto do_action;
                      }

                    else
                      {
                        if (!(yy_did_buffer_switch_on_eof))
                          YY_NEW_FILE;
                      }

                    break;
                  }

                  case EOB_ACT_CONTINUE_SCAN:
                    (yy_c_buf_p) =
                      (yytext_ptr) + yy_amount_of_matched_text;

                    yy_current_state = yy_get_previous_state();

                    yy_cp = (yy_c_buf_p);
                    yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                    goto yy_match;

                  case EOB_ACT_LAST_MATCH:
                    (yy_c_buf_p) =
                      &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)];

                    yy_current_state = yy_get_previous_state();

                    yy_cp = (yy_c_buf_p);
                    yy_bp = (yytext_ptr) + YY_MORE_ADJ;
                    goto yy_find_action;
                }

            break;
          }

          default:
            YY_FATAL_ERROR(
              "fatal flex scanner internal error--no action found");
        } /* end of action switch */
    } /* end of scanning one token */
} /* end of yylex */

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::yyFlexLexer(std::istream* arg_yyin, std::ostream* arg_yyout)
{
  yyin = arg_yyin;
  yyout = arg_yyout;
  yy_c_buf_p = 0;
  yy_init = 0;
  yy_start = 0;
  yy_flex_debug = 0;
  yylineno = 1; // this will only get updated if %option yylineno

  yy_did_buffer_switch_on_eof = 0;

  yy_looking_for_trail_begin = 0;
  yy_more_flag = 0;
  yy_more_len = 0;
  yy_more_offset = yy_prev_more_offset = 0;

  yy_start_stack_ptr = yy_start_stack_depth = 0;
  yy_start_stack = NULL;

  yy_buffer_stack = 0;
  yy_buffer_stack_top = 0;
  yy_buffer_stack_max = 0;

  yy_state_buf = 0;

}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
yyFlexLexer::~yyFlexLexer()
{
  delete [] yy_state_buf;
  CEvaluationfree(yy_start_stack);
  yy_delete_buffer(YY_CURRENT_BUFFER);
  CEvaluationfree(yy_buffer_stack);
}

/* The contents of this function are C++ specific, so the () macro is not used.
 */
void yyFlexLexer::switch_streams(std::istream* new_in, std::ostream* new_out)
{
  if (new_in)
    {
      yy_delete_buffer(YY_CURRENT_BUFFER);
      yy_switch_to_buffer(yy_create_buffer(new_in, YY_BUF_SIZE));
    }

  if (new_out)
    yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput(char* buf, int /* max_size */)
#else
int yyFlexLexer::LexerInput(char* buf, int max_size)
#endif
{

  if (yyin->eof() || yyin->fail())
    return 0;

#ifdef YY_INTERACTIVE
  yyin->get(buf[0]);

  if (yyin->eof())
    return 0;

  if (yyin->bad())
    return -1;

  return 1;

#else
  (void) yyin->read(buf, max_size);

  if (yyin->bad())
    return -1;
  else
    return yyin->gcount();

#endif
}

void yyFlexLexer::LexerOutput(const char* buf, int size)
{
  (void) yyout->write(buf, size);
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *  EOB_ACT_LAST_MATCH -
 *  EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *  EOB_ACT_END_OF_FILE - end of file
 */
int yyFlexLexer::yy_get_next_buffer()
{
  register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
  register char *source = (yytext_ptr);
  register int number_to_move, i;
  int ret_val;

  if ((yy_c_buf_p) > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1])
    YY_FATAL_ERROR(
      "fatal flex scanner internal error--end of buffer missed");

  if (YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0)
    { /* Don't try to fill the buffer, so this is an EOF. */
      if ((yy_c_buf_p) - (yytext_ptr) - YY_MORE_ADJ == 1)
        {
          /* We matched a single character, the EOB, so
           * treat this as a final EOF.
           */
          return EOB_ACT_END_OF_FILE;
        }

      else
        {
          /* We matched some text prior to the EOB, first
           * process it.
           */
          return EOB_ACT_LAST_MATCH;
        }
    }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int)((yy_c_buf_p) - (yytext_ptr)) - 1;

  for (i = 0; i < number_to_move; ++i)
    *(dest++) = *(source++);

  if (YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING)
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars) = 0;

  else
    {
      yy_size_t num_to_read =
        YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

      while (num_to_read <= 0)
        { /* Not enough room in the buffer - grow it. */

          /* just a shorter name for the current buffer */
          YY_BUFFER_STATE b = YY_CURRENT_BUFFER;

          int yy_c_buf_p_offset =
            (int)((yy_c_buf_p) - b->yy_ch_buf);

          if (b->yy_is_our_buffer)
            {
              yy_size_t new_size = b->yy_buf_size * 2;

              if (new_size <= 0)
                b->yy_buf_size += b->yy_buf_size / 8;
              else
                b->yy_buf_size *= 2;

              b->yy_ch_buf = (char *)
                             /* Include room in for 2 EOB chars. */
                             CEvaluationrealloc((void *) b->yy_ch_buf, b->yy_buf_size + 2);
            }
          else
            /* Can't grow it, we don't own it. */
            b->yy_ch_buf = 0;

          if (! b->yy_ch_buf)
            YY_FATAL_ERROR(
              "fatal error - scanner input buffer overflow");

          (yy_c_buf_p) = &b->yy_ch_buf[yy_c_buf_p_offset];

          num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
                        number_to_move - 1;

        }

      if (num_to_read > YY_READ_BUF_SIZE)
        num_to_read = YY_READ_BUF_SIZE;

      /* Read in more data. */
      YY_INPUT((&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
               (yy_n_chars), num_to_read);

      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

  if ((yy_n_chars) == 0)
    {
      if (number_to_move == YY_MORE_ADJ)
        {
          ret_val = EOB_ACT_END_OF_FILE;
          yyrestart(yyin);
        }

      else
        {
          ret_val = EOB_ACT_LAST_MATCH;
          YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
            YY_BUFFER_EOF_PENDING;
        }
    }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  if ((yy_size_t)((yy_n_chars) + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size)
    {
      /* Extend the array by 50%, plus the number we really need. */
      yy_size_t new_size = (yy_n_chars) + number_to_move + ((yy_n_chars) >> 1);
      YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) CEvaluationrealloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf, new_size);

      if (! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
        YY_FATAL_ERROR("out of dynamic memory in yy_get_next_buffer()");
    }

  (yy_n_chars) += number_to_move;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)] = YY_END_OF_BUFFER_CHAR;
  YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars) + 1] = YY_END_OF_BUFFER_CHAR;

  (yytext_ptr) = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
{
  register yy_state_type yy_current_state;
  register char *yy_cp;

  yy_current_state = (yy_start);

  for (yy_cp = (yytext_ptr) + YY_MORE_ADJ; yy_cp < (yy_c_buf_p); ++yy_cp)
    {
      register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);

      if (yy_accept[yy_current_state])
        {
          (yy_last_accepting_state) = yy_current_state;
          (yy_last_accepting_cpos) = yy_cp;
        }

      while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
        {
          yy_current_state = (int) yy_def[yy_current_state];

          if (yy_current_state >= 348)
            yy_c = yy_meta[(unsigned int) yy_c];
        }

      yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *  next_state = yy_try_NUL_trans( current_state );
 */
yy_state_type yyFlexLexer::yy_try_NUL_trans(yy_state_type yy_current_state)
{
  register int yy_is_jam;
  register char *yy_cp = (yy_c_buf_p);

  register YY_CHAR yy_c = 1;

  if (yy_accept[yy_current_state])
    {
      (yy_last_accepting_state) = yy_current_state;
      (yy_last_accepting_cpos) = yy_cp;
    }

  while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
    {
      yy_current_state = (int) yy_def[yy_current_state];

      if (yy_current_state >= 348)
        yy_c = yy_meta[(unsigned int) yy_c];
    }

  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
  yy_is_jam = (yy_current_state == 347);

  return yy_is_jam ? 0 : yy_current_state;
}

void yyFlexLexer::yyunput(int c, register char* yy_bp)
{
  register char *yy_cp;

  yy_cp = (yy_c_buf_p);

  /* undo effects of setting up yytext */
  *yy_cp = (yy_hold_char);

  if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2)
    { /* need to shift things up to make room */
      /* +2 for EOB chars. */
      register yy_size_t number_to_move = (yy_n_chars) + 2;
      register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
                              YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
      register char *source =
        &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

      while (source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf)
        *--dest = *--source;

      yy_cp += (int)(dest - source);
      yy_bp += (int)(dest - source);
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
        (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

      if (yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2)
        YY_FATAL_ERROR("flex scanner push-back overflow");
    }

  *--yy_cp = (char) c;

  (yytext_ptr) = yy_bp;
  (yy_hold_char) = *yy_cp;
  (yy_c_buf_p) = yy_cp;
}

int yyFlexLexer::yyinput()
{
  int c;

  *(yy_c_buf_p) = (yy_hold_char);

  if (*(yy_c_buf_p) == YY_END_OF_BUFFER_CHAR)
    {
      /* yy_c_buf_p now points to the character we want to return.
       * If this occurs *before* the EOB characters, then it's a
       * valid NUL; if not, then we've hit the end of the buffer.
       */
      if ((yy_c_buf_p) < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[(yy_n_chars)])
        /* This was really a NUL. */
        *(yy_c_buf_p) = '\0';

      else
        { /* need more input */
          yy_size_t offset = (yy_c_buf_p) - (yytext_ptr);
          ++(yy_c_buf_p);

          switch (yy_get_next_buffer())
            {
              case EOB_ACT_LAST_MATCH:
                /* This happens because yy_g_n_b()
                 * sees that we've accumulated a
                 * token and flags that we need to
                 * try matching the token before
                 * proceeding.  But for input(),
                 * there's no matching to consider.
                 * So convert the EOB_ACT_LAST_MATCH
                 * to EOB_ACT_END_OF_FILE.
                 */

                /* Reset buffer status. */
                yyrestart(yyin);

                /*FALLTHROUGH*/

              case EOB_ACT_END_OF_FILE:
              {
                if (yywrap())
                  return 0;

                if (!(yy_did_buffer_switch_on_eof))
                  YY_NEW_FILE;

#ifdef __cplusplus
                return yyinput();
#else
                return input();
#endif
              }

              case EOB_ACT_CONTINUE_SCAN:
                (yy_c_buf_p) = (yytext_ptr) + offset;
                break;
            }
        }
    }

  c = *(unsigned char *)(yy_c_buf_p);   /* cast for 8-bit char's */
  *(yy_c_buf_p) = '\0'; /* preserve yytext */
  (yy_hold_char) = *++(yy_c_buf_p);

  return c;
}

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 *
 * @note This function does not reset the start condition to @c INITIAL .
 */
void yyFlexLexer::yyrestart(std::istream* input_file)
{

  if (! YY_CURRENT_BUFFER)
    {
      yyensure_buffer_stack();
      YY_CURRENT_BUFFER_LVALUE =
        yy_create_buffer(yyin, YY_BUF_SIZE);
    }

  yy_init_buffer(YY_CURRENT_BUFFER, input_file);
  yy_load_buffer_state();
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 *
 */
void yyFlexLexer::yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
{

  /* TODO. We should be able to replace this entire function body
   * with
   *    yypop_buffer_state();
   *    yypush_buffer_state(new_buffer);
     */
  yyensure_buffer_stack();

  if (YY_CURRENT_BUFFER == new_buffer)
    return;

  if (YY_CURRENT_BUFFER)
    {
      /* Flush out information for old buffer. */
      *(yy_c_buf_p) = (yy_hold_char);
      YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

  YY_CURRENT_BUFFER_LVALUE = new_buffer;
  yy_load_buffer_state();

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  (yy_did_buffer_switch_on_eof) = 1;
}

void yyFlexLexer::yy_load_buffer_state()
{
  (yy_n_chars) = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
  (yytext_ptr) = (yy_c_buf_p) = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
  yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
  (yy_hold_char) = *(yy_c_buf_p);
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 *
 * @return the allocated buffer state.
 */
YY_BUFFER_STATE yyFlexLexer::yy_create_buffer(std::istream* file, int size)
{
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE) CEvaluationalloc(sizeof(struct yy_buffer_state));

  if (! b)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *) CEvaluationalloc(b->yy_buf_size + 2);

  if (! b->yy_ch_buf)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  yy_init_buffer(b, file);

  return b;
}

/** Destroy the buffer.
 * @param b a buffer created with yy_create_buffer()
 *
 */
void yyFlexLexer::yy_delete_buffer(YY_BUFFER_STATE b)
{

  if (! b)
    return;

  if (b == YY_CURRENT_BUFFER)   /* Not sure if we should pop here. */
    YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

  if (b->yy_is_our_buffer)
    CEvaluationfree((void *) b->yy_ch_buf);

  CEvaluationfree((void *) b);
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a yyrestart() or at EOF.
 */
void yyFlexLexer::yy_init_buffer(YY_BUFFER_STATE b, std::istream* file)

{
  int oerrno = errno;

  yy_flush_buffer(b);

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

  /* If b is the current buffer, then yy_init_buffer was _probably_
   * called from yyrestart() or through yy_get_next_buffer.
   * In that case, we don't want to reset the lineno or column.
   */
  if (b != YY_CURRENT_BUFFER)
    {
      b->yy_bs_lineno = 1;
      b->yy_bs_column = 0;
    }

  b->yy_is_interactive = 0;
  errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 *
 */
void yyFlexLexer::yy_flush_buffer(YY_BUFFER_STATE b)
{
  if (! b)
    return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == YY_CURRENT_BUFFER)
    yy_load_buffer_state();
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *
 */
void yyFlexLexer::yypush_buffer_state(YY_BUFFER_STATE new_buffer)
{
  if (new_buffer == NULL)
    return;

  yyensure_buffer_stack();

  /* This block is copied from yy_switch_to_buffer. */
  if (YY_CURRENT_BUFFER)
    {
      /* Flush out information for old buffer. */
      *(yy_c_buf_p) = (yy_hold_char);
      YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = (yy_c_buf_p);
      YY_CURRENT_BUFFER_LVALUE->yy_n_chars = (yy_n_chars);
    }

  /* Only push if top exists. Otherwise, replace top. */
  if (YY_CURRENT_BUFFER)
    (yy_buffer_stack_top)++;

  YY_CURRENT_BUFFER_LVALUE = new_buffer;

  /* copied from yy_switch_to_buffer. */
  yy_load_buffer_state();
  (yy_did_buffer_switch_on_eof) = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *
 */
void yyFlexLexer::yypop_buffer_state(void)
{
  if (!YY_CURRENT_BUFFER)
    return;

  yy_delete_buffer(YY_CURRENT_BUFFER);
  YY_CURRENT_BUFFER_LVALUE = NULL;

  if ((yy_buffer_stack_top) > 0)
    --(yy_buffer_stack_top);

  if (YY_CURRENT_BUFFER)
    {
      yy_load_buffer_state();
      (yy_did_buffer_switch_on_eof) = 1;
    }
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
void yyFlexLexer::yyensure_buffer_stack(void)
{
  yy_size_t num_to_alloc;

  if (!(yy_buffer_stack))
    {

      /* First allocation is just for 2 elements, since we don't know if this
       * scanner will even need a stack. We use 2 instead of 1 to avoid an
       * immediate realloc on the next call.
           */
      num_to_alloc = 1;
      (yy_buffer_stack) = (struct yy_buffer_state**)CEvaluationalloc
                          (num_to_alloc * sizeof(struct yy_buffer_state*)
                          );

      if (!(yy_buffer_stack))
        YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

      memset((yy_buffer_stack), 0, num_to_alloc * sizeof(struct yy_buffer_state*));

      (yy_buffer_stack_max) = num_to_alloc;
      (yy_buffer_stack_top) = 0;
      return;
    }

  if ((yy_buffer_stack_top) >= ((yy_buffer_stack_max)) - 1)
    {

      /* Increase the buffer to prepare for a possible push. */
      int grow_size = 8 /* arbitrary grow size */;

      num_to_alloc = (yy_buffer_stack_max) + grow_size;
      (yy_buffer_stack) = (struct yy_buffer_state**)CEvaluationrealloc
                          ((yy_buffer_stack),
                           num_to_alloc * sizeof(struct yy_buffer_state*)
                          );

      if (!(yy_buffer_stack))
        YY_FATAL_ERROR("out of dynamic memory in yyensure_buffer_stack()");

      /* zero only the new slots.*/
      memset((yy_buffer_stack) + (yy_buffer_stack_max), 0, grow_size * sizeof(struct yy_buffer_state*));
      (yy_buffer_stack_max) = num_to_alloc;
    }
}

void yyFlexLexer::yy_push_state(int new_state)
{
  if ((yy_start_stack_ptr) >= (yy_start_stack_depth))
    {
      yy_size_t new_size;

      (yy_start_stack_depth) += YY_START_STACK_INCR;
      new_size = (yy_start_stack_depth) * sizeof(int);

      if (!(yy_start_stack))
        (yy_start_stack) = (int *) CEvaluationalloc(new_size);

      else
        (yy_start_stack) = (int *) CEvaluationrealloc((void *)(yy_start_stack), new_size);

      if (!(yy_start_stack))
        YY_FATAL_ERROR("out of memory expanding start-condition stack");
    }

  (yy_start_stack)[(yy_start_stack_ptr)++] = YY_START;

  BEGIN(new_state);
}

void yyFlexLexer::yy_pop_state()
{
  if (--(yy_start_stack_ptr) < 0)
    YY_FATAL_ERROR("start-condition stack underflow");

  BEGIN((yy_start_stack)[(yy_start_stack_ptr)]);
}

int yyFlexLexer::yy_top_state()
{
  return (yy_start_stack)[(yy_start_stack_ptr) - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError(yyconst char msg[])
{
  std::cerr << msg << std::endl;
  exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
  do \
    { \
      /* Undo effects of setting up yytext. */ \
      int yyless_macro_arg = (n); \
      YY_LESS_LINENO(yyless_macro_arg);\
      yytext[yyleng] = (yy_hold_char); \
      (yy_c_buf_p) = yytext + yyless_macro_arg; \
      (yy_hold_char) = *(yy_c_buf_p); \
      *(yy_c_buf_p) = '\0'; \
      yyleng = yyless_macro_arg; \
    } \
  while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy(char* s1, yyconst char * s2, int n)
{
  register int i;

  for (i = 0; i < n; ++i)
    s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen(yyconst char * s)
{
  register int n;

  for (n = 0; s[n]; ++n)
    ;

  return n;
}
#endif

void *CEvaluationalloc(yy_size_t  size)
{
  return (void *) malloc(size);
}

void *CEvaluationrealloc(void * ptr, yy_size_t  size)
{
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return (void *) realloc((char *) ptr, size);
}

void CEvaluationfree(void * ptr)
{
  free((char *) ptr);    /* see CEvaluationrealloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 593 "CEvaluationLexer.lpp"



