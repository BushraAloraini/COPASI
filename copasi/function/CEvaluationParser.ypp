// The bison parser together with CEvaluationFlexLexer builds
// the evaluation tree.

%{
#define YYSTYPE CEvaluationNode *
#define yylval  mpNode
#define yyerror(__str) \
  if (yychar != YYERRCODE) correctErrorPosition(); \
  CCopasiMessage(CCopasiMessage::ERROR, MCFunction + 1, mPosition)

#include "copasi.h"
#include "CEvaluationNode.h"
#include "CEvaluationLexer.h"
%}

// %output="CEvaluationBisonParser.hpp"
// %debug

/* BISON Declarations */
%token TOKEN_NUMBER

%token TOKEN_FUNCTION
%token TOKEN_SIGN

%token TOKEN_OPERATOR_POWER
%token TOKEN_OPERATOR_MULTIPLY
%token TOKEN_OPERATOR_MODULUS
%token TOKEN_OPERATOR_PLUS

%token TOKEN_STRUCTURE_OPEN
%token TOKEN_STRUCTURE_COMMA
%token TOKEN_STRUCTURE_CLOSE

// Precedence
%left TOKEN_OPERATOR_PLUS
%left TOKEN_OPERATOR_MODULUS
%left TOKEN_OPERATOR_MULTIPLY
%right TOKEN_OPERATOR_POWER

// Right Precedence
%right TOKEN_FUNCTION // Will never occur
%right TOKEN_SIGN // Will never occur

/* Grammar follows */
%%

exp:      TOKEN_NUMBER  {mpRootNode = $1;}
        | exp TOKEN_OPERATOR_PLUS exp 
          {
            $$ = $2;
            $$->addChild($1); 
            $$->addChild($3);
            mpRootNode = $$; 
          }
        | exp TOKEN_OPERATOR_MODULUS exp 
          {
            $$ = $2;
            $$->addChild($1); 
            $$->addChild($3);
            mpRootNode = $$; 
          }
        | exp TOKEN_OPERATOR_MULTIPLY exp
          {
            $$ = $2;
            $$->addChild($1);
            $$->addChild($3);
            mpRootNode = $$; 
          }
        | exp TOKEN_OPERATOR_POWER exp
          {
            $$ = $2;
            $$->addChild($1);
            $$->addChild($3);
            mpRootNode = $$; 
          }
        | TOKEN_STRUCTURE_OPEN exp TOKEN_STRUCTURE_CLOSE
          {
            $$ = $2;
            mpRootNode = $$; 
          }
        | TOKEN_FUNCTION TOKEN_STRUCTURE_OPEN exp TOKEN_STRUCTURE_CLOSE
          {
            $$ = $1;
            $$->addChild($3);
            mpRootNode = $$; 
          }
        | TOKEN_SIGN exp
          {
            $$ = $1;
            $$->addChild($2);
            mpRootNode = $$; 
          }
;

%%

