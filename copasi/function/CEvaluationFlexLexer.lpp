/* scanner for kinetic functions */

%option outfile="CEvaluationFlexLexer.cpp"
%option prefix="CEvaluation"
%option noyywrap
%option never-interactive
%option c++

%s sSIGN sOPERATOR

%{
#include <vector>

#include "copasi.h"
#include "CEvaluationNode.h"
#include "CEvaluationFlexLexer.h"

#define YY_USER_INIT \
    mpNode = NULL;\
    mPosition = 0;\
    mpNodeList = new std::vector< CEvaluationNode * >;

#define YY_BREAK \
    mPosition += yyleng;\
    mpNodeList->push_back(mpNode);\
    break;
%}

DIGIT    [0-9]
ID       [a-z_A-Z][a-z_A-Z0-9]*
   
%%

{DIGIT}+("."?{DIGIT}*(((e|E)"+"?|(e|E)"-"){DIGIT}+)?)?  BEGIN(sOPERATOR); mpNode = new CEvaluationNodeNumber(CEvaluationNodeNumber::DOUBLE, yytext);
 
(log|LOG)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::LOG, yytext);

(log10|LOG10)/\( BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::LOG10, yytext);

(exp|EXP)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::EXP, yytext);

(sin|SIN)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SIN, yytext);

(cos|COS)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COS, yytext);

(tan|TAN)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::TAN, yytext);

(sec|SEC)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SEC, yytext);

(csc|CSC)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CSC, yytext);

(cot|COT)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COT, yytext);

(sinh|SINH)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SINH, yytext);

(cosh|COSH)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COSH, yytext);

(tanh|TANH)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::TANH, yytext);

(sech|SECH)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SECH, yytext);

(csch|CSCH)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::CSCH, yytext);

(coth|COTH)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::COTH, yytext);

(asin|ASIN)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSIN, yytext);

(acos|ACOS)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOS, yytext);

(atan|ATAN)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCTAN, yytext);

(arcsec|ARCSEC)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSEC, yytext);

(arccsc|ARCCSC)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCSC, yytext);

(arccot|ARCCOT)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOT, yytext);

(arcsinh|ARCSINH)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSINH, yytext);

(arccosh|ARCCOSH)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOSH, yytext);

(arctanh|ARCTANH)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCTANH, yytext);

(arcsech|ARCSECH)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCSECH, yytext);
 
(arccsch|ARCCSCH)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCSCH, yytext);

(arccoth|ARCCOTH)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ARCCOTH, yytext);

(sqrt|SQRT)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::SQRT, yytext);

(abs|ABS)/\(   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::ABS, yytext);

<INITIAL,sSIGN>"-"   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeFunction(CEvaluationNodeFunction::MINUS, yytext);

exponentiale |
EXPONENTIALE BEGIN(sOPERATOR); mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::EXPONENTIALE, yytext);

pi |
PI BEGIN(sSIGN); mpNode = new CEvaluationNodeConstant(CEvaluationNodeConstant::PI, yytext);
      
"^"   BEGIN(sSIGN); mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::POWER, yytext);

"*"   BEGIN(sSIGN); mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MULTIPLY, yytext);

"/"   BEGIN(sSIGN); mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::DIVIDE, yytext);

"%"   BEGIN(sSIGN); mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MODULUS, yytext);

"+"   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::PLUS, yytext);

<sOPERATOR>"-"   BEGIN(sOPERATOR); mpNode = new CEvaluationNodeOperator(CEvaluationNodeOperator::MINUS, yytext);

"("   BEGIN(sSIGN); return 0; // '(';
","   BEGIN(sSIGN); return 0; // ',';
")"   BEGIN(sOPERATOR); return 0; // ')';

{ID}  BEGIN(sOPERATOR); return 0; // CEvaluationNodeVariable::IDENTIFIER;

\<([^\\\>]|\\.)*\>  BEGIN(sOPERATOR); return 0; // CEvaluationNodeObject::OBJECT;
     
[ \t\r\n]+ /* eat up whitespace */
     
.     freeNodeList(mpNodeList); return mPosition;
     
%%
