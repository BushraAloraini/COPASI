/* Begin CVS Header
   $Source: /Volumes/Home/Users/shoops/cvs/copasi_dev/copasi/function/Attic/CKinFunctionFlexLexer.cpp,v $
   $Revision: 1.21 $
   $Name:  $
   $Author: gauges $ 
   $Date: 2005/05/10 07:55:18 $
   End CVS Header */

#define yyFlexLexer CKinFunctionFlexLexer

#line 4 "CKinFunctionFlexLexer.cpp" 
/* A lexical scanner generated by flex */

/* Scanner skeleton version:
 * $Header: /Volumes/Home/Users/shoops/cvs/copasi_dev/copasi/function/Attic/CKinFunctionFlexLexer.cpp,v 1.21 2005/05/10 07:55:18 gauges Exp $
 */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5

/* cfront 1.2 defines "c_plusplus" instead of "__cplusplus" */
#ifdef c_plusplus
#ifndef __cplusplus
#define __cplusplus
#endif
#endif

#ifdef __cplusplus

#include <stdlib.h>
#include "copasi.h"
using namespace std;

/* Use prototypes in function declarations. */
#define YY_USE_PROTOS

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else /* ! __cplusplus */

#if __STDC__

#define YY_USE_PROTOS
#define YY_USE_CONST

#endif /* __STDC__ */
#endif /* ! __cplusplus */

#ifdef __TURBOC__
 #pragma warn -rch
 #pragma warn -use
#include <io.h>
#include <stdlib.h>
#define YY_USE_CONST
#define YY_USE_PROTOS
#endif

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

#ifdef YY_USE_PROTOS
#define YY_PROTO(proto) proto
#else
#define YY_PROTO(proto) ()
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE yyrestart(yyin)

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#define YY_BUF_SIZE 16384

typedef struct yy_buffer_state *YY_BUFFER_STATE;

extern int yyleng;

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

/* The funky do-while in the following #define is used to turn the definition
 * int a single C statement (which needs a semi-colon terminator).  This
 * avoids problems with code like:
 *
 *  if (condition_holds)
 *  yyless(5);
 * else
 *  do_something_else();
 *
 * Prior to using the do-while the compiler would get upset at the
 * "else" because it interpreted the "if" statement as being all
 * done when it reached the ';' after the yyless() call.
 */

/* Return all but the first 'n' matched characters back to the input stream. */

#define yyless(n) \
 do \
  {\
  /* Undo effects of setting up yytext. */ \
  *yy_cp = yy_hold_char; \
  YY_RESTORE_YY_MORE_OFFSET \
  yy_c_buf_p = yy_cp = yy_bp + n - YY_MORE_ADJ; \
  YY_DO_BEFORE_ACTION; /* set up yytext again */ \
  } \
 while (0)

#define unput(c) yyunput(c, yytext_ptr)

/* The following is because we cannot portably get our hands on size_t
 * (without autoconf's help, which isn't available because we want
 * flex-generated scanners to compile on their own).
 */
typedef unsigned int yy_size_t;

struct yy_buffer_state
  {
    istream* yy_input_file;

    char *yy_ch_buf;  /* input buffer */
    char *yy_buf_pos;  /* current position in input buffer */

    /* Size of input buffer in bytes, not including room for EOB
     * characters.
     */
    yy_size_t yy_buf_size;

    /* Number of characters read into yy_ch_buf, not including EOB
     * characters.
     */
    int yy_n_chars;

    /* Whether we "own" the buffer - i.e., we know we created it,
     * and can realloc() it to grow it, and should free() it to
     * delete it.
     */
    int yy_is_our_buffer;

    /* Whether this is an "interactive" input source; if so, and
     * if we're using stdio for input, then we want to use getc()
     * instead of fread(), to make sure we stop fetching input after
     * each newline.
     */
    int yy_is_interactive;

    /* Whether we're considered to be at the beginning of a line.
     * If so, '^' rules will be active on the next match, otherwise
     * not.
     */
    int yy_at_bol;

    /* Whether to try to fill the input buffer when we reach the
     * end of it.
     */
    int yy_fill_buffer;

    int yy_buffer_status;
#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
    /* When an EOF's been seen but there's still some text to process
     * then we mark the buffer as YY_EOF_PENDING, to indicate that we
     * shouldn't try reading from the input source any more.  We might
     * still have a bunch of tokens to match, though, because of
     * possible backing-up.
     *
     * When we actually see the EOF, we change the status to "new"
     * (via yyrestart()), so that the user can continue scanning by
     * just pointing yyin at a new input file.
     */
#define YY_BUFFER_EOF_PENDING 2
  };

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 */
#define YY_CURRENT_BUFFER yy_current_buffer

static void *yy_flex_alloc YY_PROTO((yy_size_t));
static void *yy_flex_realloc YY_PROTO((void *, yy_size_t));
static void yy_flex_free YY_PROTO((void *));

#define yy_new_buffer yy_create_buffer

#define yy_set_interactive(is_interactive) \
 {\
 if (! yy_current_buffer) \
  yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE); \
 yy_current_buffer->yy_is_interactive = is_interactive; \
 }

#define yy_set_bol(at_bol) \
 {\
 if (! yy_current_buffer) \
  yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE); \
 yy_current_buffer->yy_at_bol = at_bol; \
 }

#define YY_AT_BOL() (yy_current_buffer->yy_at_bol)

#define yywrap() 1
#define YY_SKIP_YYWRAP
typedef unsigned char YY_CHAR;
#define yytext_ptr yytext
#define YY_INTERACTIVE

#include "FlexLexer.h"

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
 yytext_ptr = yy_bp; \
 yyleng = (int) (yy_cp - yy_bp); \
 yy_hold_char = *yy_cp; \
 *yy_cp = '\0'; \
 yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 75
#define YY_END_OF_BUFFER 76
static yyconst short int yy_accept[162] =
  {0,
    0, 0, 76, 74, 73, 73, 69, 70, 66, 64,
    65, 67, 1, 74, 71, 71, 71, 71, 71, 71,
    71, 71, 68, 71, 71, 71, 71, 71, 71, 71,
    73, 1, 1, 0, 0, 72, 71, 71, 71, 71,
    71, 71, 71, 63, 71, 71, 71, 71, 71, 71,
    71, 71, 71, 71, 62, 71, 71, 71, 71, 1,
    0, 1, 59, 71, 11, 19, 17, 7, 3, 15,
    9, 71, 13, 58, 71, 10, 18, 16, 6, 2,
    14, 8, 71, 12, 71, 71, 71, 23, 31, 29,
    71, 71, 27, 21, 57, 25, 71, 71, 71, 22,

    30, 28, 71, 71, 26, 20, 56, 24, 71, 71,
    71, 71, 71, 71, 5, 71, 71, 71, 71, 71,
    71, 4, 35, 43, 41, 39, 33, 37, 71, 34,
    42, 40, 38, 32, 36, 71, 47, 55, 53, 51,
    45, 49, 71, 46, 54, 52, 50, 44, 48, 71,
    71, 71, 71, 71, 71, 71, 71, 71, 61, 60,
    0
  };

static yyconst int yy_ec[256] =
  {0,
    1, 1, 1, 1, 1, 1, 1, 1, 2, 3,
    1, 1, 2, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 2, 1, 1, 1, 1, 1, 1, 1, 4,
    5, 6, 7, 1, 8, 9, 10, 11, 12, 13,
    13, 13, 13, 13, 13, 13, 13, 1, 1, 14,
    1, 15, 1, 1, 16, 17, 18, 19, 20, 19,
    21, 22, 23, 19, 19, 24, 19, 25, 26, 27,
    28, 29, 30, 31, 19, 19, 19, 32, 19, 19,
    1, 1, 1, 33, 19, 1, 34, 35, 36, 19,

    37, 19, 38, 39, 40, 19, 19, 41, 19, 42,
    43, 44, 45, 46, 47, 48, 19, 19, 19, 49,
    19, 19, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,

    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1
  };

static yyconst int yy_meta[50] =
  {0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    2, 2, 2, 1, 1, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 1, 2, 2, 2, 2, 2, 2, 2,
    2, 2, 2, 2, 2, 2, 2, 2, 2
  };

static yyconst short int yy_base[163] =
  {0,
    0, 0, 218, 219, 48, 50, 219, 219, 219, 219,
    219, 219, 45, 48, 38, 0, 36, 185, 190, 192,
    48, 198, 219, 29, 26, 164, 169, 171, 40, 176,
    76, 75, 80, 90, 93, 219, 0, 179, 190, 53,
    189, 179, 184, 0, 186, 178, 173, 176, 153, 163,
    62, 162, 153, 158, 0, 159, 152, 147, 150, 102,
    107, 112, 0, 98, 169, 168, 167, 162, 175, 164,
    163, 153, 161, 0, 85, 143, 142, 141, 136, 166,
    138, 137, 127, 135, 44, 76, 157, 0, 0, 0,
    147, 160, 0, 0, 0, 0, 47, 90, 136, 0,

    0, 0, 127, 157, 0, 0, 0, 0, 104, 149,
    148, 140, 139, 143, 0, 89, 126, 125, 118, 117,
    121, 0, 135, 134, 133, 132, 131, 130, 126, 111,
    110, 109, 108, 107, 106, 102, 0, 0, 0, 0,
    0, 0, 112, 0, 0, 0, 0, 0, 0, 94,
    118, 100, 122, 97, 102, 70, 87, 44, 0, 0,
    219, 70
  };

static yyconst short int yy_def[163] =
  {0,
    161, 1, 161, 161, 161, 161, 161, 161, 161, 161,
    161, 161, 161, 161, 162, 162, 162, 162, 162, 162,
    162, 162, 161, 162, 162, 162, 162, 162, 162, 162,
    161, 161, 161, 161, 161, 161, 162, 162, 162, 162,
    162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
    162, 162, 162, 162, 162, 162, 162, 162, 162, 161,
    161, 161, 162, 162, 162, 162, 162, 162, 162, 162,
    162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
    162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
    162, 162, 162, 162, 162, 162, 162, 162, 162, 162,

    162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
    162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
    162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
    162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
    162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
    162, 162, 162, 162, 162, 162, 162, 162, 162, 162,
    0, 161
  };

static yyconst short int yy_nxt[269] =
  {0,
    4, 5, 6, 7, 8, 9, 10, 11, 4, 12,
    13, 13, 13, 14, 4, 15, 16, 17, 16, 18,
    16, 16, 16, 19, 16, 16, 20, 16, 16, 21,
    22, 16, 23, 24, 16, 25, 26, 16, 16, 16,
    27, 16, 16, 28, 16, 16, 29, 30, 16, 31,
    31, 31, 31, 32, 38, 33, 33, 33, 35, 35,
    35, 40, 36, 49, 34, 41, 39, 45, 51, 109,
    46, 37, 52, 110, 50, 47, 56, 31, 31, 57,
    160, 34, 65, 66, 58, 60, 60, 60, 32, 116,
    33, 33, 33, 117, 34, 111, 61, 61, 112, 34,

    62, 62, 62, 35, 35, 35, 159, 36, 76, 77,
    158, 34, 60, 60, 60, 85, 34, 62, 62, 62,
    97, 34, 62, 62, 62, 157, 118, 86, 87, 119,
    156, 98, 99, 123, 124, 130, 131, 155, 34, 154,
    153, 152, 151, 150, 149, 148, 147, 146, 145, 144,
    143, 142, 141, 140, 139, 138, 137, 136, 135, 134,
    133, 132, 129, 128, 127, 126, 125, 122, 121, 120,
    115, 114, 113, 108, 107, 106, 105, 104, 103, 102,
    101, 100, 96, 95, 94, 93, 92, 91, 90, 89,
    88, 84, 83, 82, 81, 80, 79, 78, 75, 74,

    73, 72, 71, 70, 69, 68, 67, 64, 63, 59,
    55, 54, 53, 48, 44, 43, 42, 161, 3, 161,
    161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
    161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
    161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
    161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
    161, 161, 161, 161, 161, 161, 161, 161
  };

static yyconst short int yy_chk[269] =
  {0,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
    1, 1, 1, 1, 1, 1, 1, 1, 1, 5,
    5, 6, 6, 13, 15, 13, 13, 13, 14, 14,
    14, 17, 14, 24, 13, 17, 15, 21, 25, 85,
    21, 162, 25, 85, 24, 21, 29, 31, 31, 29,
    158, 13, 40, 40, 29, 32, 32, 32, 33, 97,
    33, 33, 33, 97, 32, 86, 34, 34, 86, 33,

    34, 34, 34, 35, 35, 35, 157, 35, 51, 51,
    156, 32, 60, 60, 60, 64, 33, 61, 61, 61,
    75, 60, 62, 62, 62, 155, 98, 64, 64, 98,
    154, 75, 75, 109, 109, 116, 116, 153, 60, 152,
    151, 150, 143, 136, 135, 134, 133, 132, 131, 130,
    129, 128, 127, 126, 125, 124, 123, 121, 120, 119,
    118, 117, 114, 113, 112, 111, 110, 104, 103, 99,
    92, 91, 87, 84, 83, 82, 81, 80, 79, 78,
    77, 76, 73, 72, 71, 70, 69, 68, 67, 66,
    65, 59, 58, 57, 56, 54, 53, 52, 50, 49,

    48, 47, 46, 45, 43, 42, 41, 39, 38, 30,
    28, 27, 26, 22, 20, 19, 18, 3, 161, 161,
    161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
    161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
    161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
    161, 161, 161, 161, 161, 161, 161, 161, 161, 161,
    161, 161, 161, 161, 161, 161, 161, 161
  };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "CKinFunctionFlexLexer.lpp"
#define INITIAL 0 
/* scanner for kinetic functions */
#define YY_NEVER_INTERACTIVE 1
#line 10 "CKinFunctionFlexLexer.lpp"
#include "CNodeK.h"
#line 443 "CKinFunctionFlexLexer.cpp"

/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int yywrap YY_PROTO((void));
#else
extern int yywrap YY_PROTO((void));
#endif
#endif

#ifndef yytext_ptr
static void yy_flex_strncpy YY_PROTO((char *, yyconst char *, int));
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen YY_PROTO((yyconst char *));
#endif

#ifndef YY_NO_INPUT
#endif

#if YY_STACK_USED
static int yy_start_stack_ptr = 0;
static int yy_start_stack_depth = 0;
static int *yy_start_stack = 0;
#ifndef YY_NO_PUSH_STATE
static void yy_push_state YY_PROTO((int new_state));
#endif
#ifndef YY_NO_POP_STATE
static void yy_pop_state YY_PROTO((void));
#endif
#ifndef YY_NO_TOP_STATE
static int yy_top_state YY_PROTO((void));
#endif

#else
#define YY_NO_PUSH_STATE 1
#define YY_NO_POP_STATE 1
#define YY_NO_TOP_STATE 1
#endif

#ifdef YY_MALLOC_DECL
YY_MALLOC_DECL
#else
#if __STDC__
#ifndef __cplusplus
#include <stdlib.h>
#endif
#else 
/* Just try to get by without declaring the routines.  This will fail
 * miserably on non-ANSI systems for which sizeof(size_t) != sizeof(int)
 * or sizeof(void*) != sizeof(int).
 */
#endif
#endif

/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#define YY_READ_BUF_SIZE 8192
#endif

/* Copy whatever the last rule matched to the standard output. */

#ifndef ECHO
#define ECHO LexerOutput(yytext, yyleng)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
 if ((result = LexerInput((char *) buf, max_size)) < 0) \
  YY_FATAL_ERROR("input in flex scanner failed");
#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) LexerError(msg)
#endif

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL int yyFlexLexer::yylex()
#endif

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
 YY_USER_ACTION

YY_DECL
{
  register yy_state_type yy_current_state;
  register char *yy_cp, *yy_bp;
  register int yy_act;

#line 16 "CKinFunctionFlexLexer.lpp"

#line 573 "CKinFunctionFlexLexer.cpp"

  if (yy_init)
  {
    yy_init = 0;

#ifdef YY_USER_INIT
    YY_USER_INIT;
#endif

    if (! yy_start)
        yy_start = 1; /* first start state */

      if (! yyin)
        yyin = &cin;

      if (! yyout)
        yyout = &cout;

      if (! yy_current_buffer)
        yy_current_buffer =
          yy_create_buffer(yyin, YY_BUF_SIZE);

      yy_load_buffer_state();
    }

  while (1)  /* loops until end-of-file is reached */
  {
    yy_cp = yy_c_buf_p;

    /* Support of yytext. */
    *yy_cp = yy_hold_char;

    /* yy_bp points to the position in yy_ch_buf of the start of
     * the current run.
     */
    yy_bp = yy_cp;

    yy_current_state = yy_start;
  yy_match:
    do
      {
        register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)];
          if (yy_accept[yy_current_state])
            {
              yy_last_accepting_state = yy_current_state;
              yy_last_accepting_cpos = yy_cp;
            }
          while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
            {
              yy_current_state = (int) yy_def[yy_current_state];
              if (yy_current_state >= 162)
                yy_c = yy_meta[(unsigned int) yy_c];
            }
          yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
          ++yy_cp;
        }
      while (yy_base[yy_current_state] != 219);

  yy_find_action:
      yy_act = yy_accept[yy_current_state];
      if (yy_act == 0)
        {/* have to back up */
          yy_cp = yy_last_accepting_cpos;
          yy_current_state = yy_last_accepting_state;
          yy_act = yy_accept[yy_current_state];
        }

      YY_DO_BEFORE_ACTION;

  do_action:  /* This label is used only to access EOF actions. */

      switch (yy_act)
        {/* beginning of action switch */
        case 0:  /* must back up */
          /* undo the effects of YY_DO_BEFORE_ACTION */
          *yy_cp = yy_hold_char;
          yy_cp = yy_last_accepting_cpos;
          yy_current_state = yy_last_accepting_state;
          goto yy_find_action;

        case 1:
          YY_RULE_SETUP
#line 18 "CKinFunctionFlexLexer.lpp"
          return N_NUMBER;
          YY_BREAK
        case 2:
#line 21 "CKinFunctionFlexLexer.lpp"
        case 3:
          YY_RULE_SETUP
#line 21 "CKinFunctionFlexLexer.lpp"
          return N_LOG;
          YY_BREAK
        case 4:
#line 24 "CKinFunctionFlexLexer.lpp"
        case 5:
          YY_RULE_SETUP
#line 24 "CKinFunctionFlexLexer.lpp"
          return N_LOG10;
          YY_BREAK
        case 6:
#line 27 "CKinFunctionFlexLexer.lpp"
        case 7:
          YY_RULE_SETUP
#line 27 "CKinFunctionFlexLexer.lpp"
          return N_EXP;
          YY_BREAK
        case 8:
#line 30 "CKinFunctionFlexLexer.lpp"
        case 9:
          YY_RULE_SETUP
#line 30 "CKinFunctionFlexLexer.lpp"
          return N_SIN;
          YY_BREAK
        case 10:
#line 33 "CKinFunctionFlexLexer.lpp"
        case 11:
          YY_RULE_SETUP
#line 33 "CKinFunctionFlexLexer.lpp"
          return N_COS;
          YY_BREAK
        case 12:
#line 36 "CKinFunctionFlexLexer.lpp"
        case 13:
          YY_RULE_SETUP
#line 36 "CKinFunctionFlexLexer.lpp"
          return N_TAN;
          YY_BREAK
        case 14:
#line 39 "CKinFunctionFlexLexer.lpp"
        case 15:
          YY_RULE_SETUP
#line 39 "CKinFunctionFlexLexer.lpp"
          return N_SEC;
          YY_BREAK
        case 16:
#line 42 "CKinFunctionFlexLexer.lpp"
        case 17:
          YY_RULE_SETUP
#line 42 "CKinFunctionFlexLexer.lpp"
          return N_CSC;
          YY_BREAK
        case 18:
#line 45 "CKinFunctionFlexLexer.lpp"
        case 19:
          YY_RULE_SETUP
#line 45 "CKinFunctionFlexLexer.lpp"
          return N_COT;
          YY_BREAK
        case 20:
#line 48 "CKinFunctionFlexLexer.lpp"
        case 21:
          YY_RULE_SETUP
#line 48 "CKinFunctionFlexLexer.lpp"
          return N_SINH;
          YY_BREAK
        case 22:
#line 51 "CKinFunctionFlexLexer.lpp"
        case 23:
          YY_RULE_SETUP
#line 51 "CKinFunctionFlexLexer.lpp"
          return N_COSH;
          YY_BREAK
        case 24:
#line 54 "CKinFunctionFlexLexer.lpp"
        case 25:
          YY_RULE_SETUP
#line 54 "CKinFunctionFlexLexer.lpp"
          return N_TANH;
          YY_BREAK
        case 26:
#line 57 "CKinFunctionFlexLexer.lpp"
        case 27:
          YY_RULE_SETUP
#line 57 "CKinFunctionFlexLexer.lpp"
          return N_SECH;
          YY_BREAK
        case 28:
#line 60 "CKinFunctionFlexLexer.lpp"
        case 29:
          YY_RULE_SETUP
#line 60 "CKinFunctionFlexLexer.lpp"
          return N_CSCH;
          YY_BREAK
        case 30:
#line 63 "CKinFunctionFlexLexer.lpp"
        case 31:
          YY_RULE_SETUP
#line 63 "CKinFunctionFlexLexer.lpp"
          return N_COTH;
          YY_BREAK
        case 32:
#line 66 "CKinFunctionFlexLexer.lpp"
        case 33:
          YY_RULE_SETUP
#line 66 "CKinFunctionFlexLexer.lpp"
          return N_ARCSIN;
          YY_BREAK
        case 34:
#line 69 "CKinFunctionFlexLexer.lpp"
        case 35:
          YY_RULE_SETUP
#line 69 "CKinFunctionFlexLexer.lpp"
          return N_ARCCOS;
          YY_BREAK
        case 36:
#line 72 "CKinFunctionFlexLexer.lpp"
        case 37:
          YY_RULE_SETUP
#line 72 "CKinFunctionFlexLexer.lpp"
          return N_ARCTAN;
          YY_BREAK
        case 38:
#line 75 "CKinFunctionFlexLexer.lpp"
        case 39:
          YY_RULE_SETUP
#line 75 "CKinFunctionFlexLexer.lpp"
          return N_ARCSEC;
          YY_BREAK
        case 40:
#line 78 "CKinFunctionFlexLexer.lpp"
        case 41:
          YY_RULE_SETUP
#line 78 "CKinFunctionFlexLexer.lpp"
          return N_ARCCSC;
          YY_BREAK
        case 42:
#line 81 "CKinFunctionFlexLexer.lpp"
        case 43:
          YY_RULE_SETUP
#line 81 "CKinFunctionFlexLexer.lpp"
          return N_ARCCOT;
          YY_BREAK
        case 44:
#line 84 "CKinFunctionFlexLexer.lpp"
        case 45:
          YY_RULE_SETUP
#line 84 "CKinFunctionFlexLexer.lpp"
          return N_ARCSINH;
          YY_BREAK
        case 46:
#line 87 "CKinFunctionFlexLexer.lpp"
        case 47:
          YY_RULE_SETUP
#line 87 "CKinFunctionFlexLexer.lpp"
          return N_ARCCOSH;
          YY_BREAK
        case 48:
#line 90 "CKinFunctionFlexLexer.lpp"
        case 49:
          YY_RULE_SETUP
#line 90 "CKinFunctionFlexLexer.lpp"
          return N_ARCTANH;
          YY_BREAK
        case 50:
#line 93 "CKinFunctionFlexLexer.lpp"
        case 51:
          YY_RULE_SETUP
#line 93 "CKinFunctionFlexLexer.lpp"
          return N_ARCSECH;
          YY_BREAK
        case 52:
#line 96 "CKinFunctionFlexLexer.lpp"
        case 53:
          YY_RULE_SETUP
#line 96 "CKinFunctionFlexLexer.lpp"
          return N_ARCCSCH;
          YY_BREAK
        case 54:
#line 99 "CKinFunctionFlexLexer.lpp"
        case 55:
          YY_RULE_SETUP
#line 99 "CKinFunctionFlexLexer.lpp"
          return N_ARCCOTH;
          YY_BREAK
        case 56:
#line 102 "CKinFunctionFlexLexer.lpp"
        case 57:
          YY_RULE_SETUP
#line 102 "CKinFunctionFlexLexer.lpp"
          return N_SQRT;
          YY_BREAK
        case 58:
#line 105 "CKinFunctionFlexLexer.lpp"
        case 59:
          YY_RULE_SETUP
#line 105 "CKinFunctionFlexLexer.lpp"
          return N_ABS;
          YY_BREAK
        case 60:
#line 108 "CKinFunctionFlexLexer.lpp"
        case 61:
          YY_RULE_SETUP
#line 108 "CKinFunctionFlexLexer.lpp"
          return N_NUMBER;
          YY_BREAK
        case 62:
#line 111 "CKinFunctionFlexLexer.lpp"
        case 63:
          YY_RULE_SETUP
#line 111 "CKinFunctionFlexLexer.lpp"
          return N_NUMBER;
          YY_BREAK
        case 64:
          YY_RULE_SETUP
#line 113 "CKinFunctionFlexLexer.lpp"
          return '+';
          YY_BREAK
        case 65:
          YY_RULE_SETUP
#line 114 "CKinFunctionFlexLexer.lpp"
          return '-';
          YY_BREAK
        case 66:
          YY_RULE_SETUP
#line 115 "CKinFunctionFlexLexer.lpp"
          return '*';
          YY_BREAK
        case 67:
          YY_RULE_SETUP
#line 116 "CKinFunctionFlexLexer.lpp"
          return '/';
          YY_BREAK
        case 68:
          YY_RULE_SETUP
#line 117 "CKinFunctionFlexLexer.lpp"
          return '^';
          YY_BREAK
        case 69:
          YY_RULE_SETUP
#line 118 "CKinFunctionFlexLexer.lpp"
          return '(';
          YY_BREAK
        case 70:
          YY_RULE_SETUP
#line 119 "CKinFunctionFlexLexer.lpp"
          return ')';
          YY_BREAK
        case 71:
          YY_RULE_SETUP
#line 121 "CKinFunctionFlexLexer.lpp"
          return N_IDENTIFIER;
          YY_BREAK
        case 72:
          YY_RULE_SETUP
#line 123 "CKinFunctionFlexLexer.lpp"
          return N_OBJECT;
          YY_BREAK
        case 73:
          YY_RULE_SETUP
#line 125 "CKinFunctionFlexLexer.lpp" 
          /* eat up whitespace */
          YY_BREAK
        case 74:
          YY_RULE_SETUP
#line 127 "CKinFunctionFlexLexer.lpp"
          return N_NOP;
          YY_BREAK
        case 75:
          YY_RULE_SETUP
#line 129 "CKinFunctionFlexLexer.lpp"
          ECHO;
          YY_BREAK
#line 938 "CKinFunctionFlexLexer.cpp"
        case YY_STATE_EOF(INITIAL):
                yyterminate();

        case YY_END_OF_BUFFER:
      {
            /* Amount of text matched not including the EOB char. */
            int yy_amount_of_matched_text = (int) (yy_cp - yytext_ptr) - 1;

            /* Undo the effects of YY_DO_BEFORE_ACTION. */
            *yy_cp = yy_hold_char;
            YY_RESTORE_YY_MORE_OFFSET

            if (yy_current_buffer->yy_buffer_status == YY_BUFFER_NEW)
              {
                /* We're scanning a new file or input source.  It's
                 * possible that this happened because the user
                 * just pointed yyin at a new source and called
                 * yylex().  If so, then we have to assure
                 * consistency between yy_current_buffer and our
                 * globals.  Here is the right place to do so, because
                 * this is the first action (other than possibly a
                 * back-up) that will match for the new input source.
                 */
                yy_n_chars = yy_current_buffer->yy_n_chars;
                yy_current_buffer->yy_input_file = yyin;
                yy_current_buffer->yy_buffer_status = YY_BUFFER_NORMAL;
              }

            /* Note that here we test for yy_c_buf_p "<=" to the position
             * of the first EOB in the buffer, since yy_c_buf_p will
             * already have been incremented past the NUL character
             * (since all states make transitions on EOB to the
             * end-of-buffer state).  Contrast this with the test
             * in input().
             */
            if (yy_c_buf_p <= &yy_current_buffer->yy_ch_buf[yy_n_chars])
              {/* This was really a NUL. */
                yy_state_type yy_next_state;

                yy_c_buf_p = yytext_ptr + yy_amount_of_matched_text;

                yy_current_state = yy_get_previous_state();

                /* Okay, we're now positioned to make the NUL
                 * transition.  We couldn't have
                 * yy_get_previous_state() go ahead and do it
                 * for us because it doesn't know how to deal
                 * with the possibility of jamming (and we don't
                 * want to build jamming into it because then it
                 * will run more slowly).
                 */

                yy_next_state = yy_try_NUL_trans(yy_current_state);

                yy_bp = yytext_ptr + YY_MORE_ADJ;

                if (yy_next_state)
                  {
                    /* Consume the NUL. */
                    yy_cp = ++yy_c_buf_p;
                    yy_current_state = yy_next_state;
                    goto yy_match;
                  }

                else
                  {
                    yy_cp = yy_c_buf_p;
                    goto yy_find_action;
                  }
              }

            else switch (yy_get_next_buffer())
                {
                case EOB_ACT_END_OF_FILE:
                  {
                    yy_did_buffer_switch_on_eof = 0;

                    if (yywrap())
                      {
                        /* Note: because we've taken care in
                         * yy_get_next_buffer() to have set up
                         * yytext, we can now set up
                         * yy_c_buf_p so that if some total
                         * hoser (like flex itself) wants to
                         * call the scanner after we return the
                         * YY_NULL, it'll still work - another
                         * YY_NULL will get returned.
                         */
                        yy_c_buf_p = yytext_ptr + YY_MORE_ADJ;

                        yy_act = YY_STATE_EOF(YY_START);
                        goto do_action;
                      }

                    else
                      {
                        if (! yy_did_buffer_switch_on_eof)
                          YY_NEW_FILE;
                      }
                    break;
                  }

                case EOB_ACT_CONTINUE_SCAN:
                  yy_c_buf_p =
                    yytext_ptr + yy_amount_of_matched_text;

                  yy_current_state = yy_get_previous_state();

                  yy_cp = yy_c_buf_p;
                  yy_bp = yytext_ptr + YY_MORE_ADJ;
                  goto yy_match;

                case EOB_ACT_LAST_MATCH:
                  yy_c_buf_p =
                    &yy_current_buffer->yy_ch_buf[yy_n_chars];

                  yy_current_state = yy_get_previous_state();

                  yy_cp = yy_c_buf_p;
                  yy_bp = yytext_ptr + YY_MORE_ADJ;
                  goto yy_find_action;
                }
            break;
          }

        default:
          YY_FATAL_ERROR(
            "fatal flex scanner internal error--no action found");
        } /* end of action switch */
    } /* end of scanning one token */
} /* end of yylex */

yyFlexLexer::yyFlexLexer(istream* arg_yyin, ostream* arg_yyout)
{
  yyin = arg_yyin;
  yyout = arg_yyout;
  yy_c_buf_p = 0;
  yy_init = 1;
  yy_start = 0;
  yy_flex_debug = 0;
  yylineno = 1; // this will only get updated if %option yylineno

  yy_did_buffer_switch_on_eof = 0;

  yy_looking_for_trail_begin = 0;
  yy_more_flag = 0;
  yy_more_len = 0;
  yy_more_offset = yy_prev_more_offset = 0;

  yy_start_stack_ptr = yy_start_stack_depth = 0;
  yy_start_stack = 0;

  yy_current_buffer = 0;

#ifdef YY_USES_REJECT
  yy_state_buf = new yy_state_type[YY_BUF_SIZE + 2];
#else
  yy_state_buf = 0;
#endif
}

yyFlexLexer::~yyFlexLexer()
{
  delete yy_state_buf;
  yy_delete_buffer(yy_current_buffer);
}

void yyFlexLexer::switch_streams(istream* new_in, ostream* new_out)
{
  if (new_in)
    {
      yy_delete_buffer(yy_current_buffer);
      yy_switch_to_buffer(yy_create_buffer(new_in, YY_BUF_SIZE));
    }

  if (new_out)
    yyout = new_out;
}

#ifdef YY_INTERACTIVE
int yyFlexLexer::LexerInput(char* buf, int /* max_size */)
#else
int yyFlexLexer::LexerInput(char* buf, int max_size)
#endif
{
  if (yyin->eof() || yyin->fail())
    return 0;

#ifdef YY_INTERACTIVE
  yyin->get(buf[0]);

  if (yyin->eof())
    return 0;

  if (yyin->bad())
    return - 1;

  return 1;

#else
  (void) yyin->read(buf, max_size);

  if (yyin->bad())
    return - 1;
  else
    return yyin->gcount();
#endif
}

void yyFlexLexer::LexerOutput(const char* buf, int size)
{
  (void) yyout->write(buf, size);
}

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 * EOB_ACT_LAST_MATCH -
 * EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 * EOB_ACT_END_OF_FILE - end of file
 */

int yyFlexLexer::yy_get_next_buffer()
{
  register char *dest = yy_current_buffer->yy_ch_buf;
  register char *source = yytext_ptr;
  register int number_to_move, i;
  int ret_val;

  if (yy_c_buf_p > &yy_current_buffer->yy_ch_buf[yy_n_chars + 1])
    YY_FATAL_ERROR(
      "fatal flex scanner internal error--end of buffer missed");

  if (yy_current_buffer->yy_fill_buffer == 0)
    {/* Don't try to fill the buffer, so this is an EOF. */
      if (yy_c_buf_p - yytext_ptr - YY_MORE_ADJ == 1)
        {
          /* We matched a single character, the EOB, so
           * treat this as a final EOF.
           */
          return EOB_ACT_END_OF_FILE;
        }

      else
        {
          /* We matched some text prior to the EOB, first
           * process it.
           */
          return EOB_ACT_LAST_MATCH;
        }
    }

  /* Try to read more data. */

  /* First move last chars to start of buffer. */
  number_to_move = (int) (yy_c_buf_p - yytext_ptr) - 1;

  for (i = 0; i < number_to_move; ++i)
    *(dest++) = *(source++);

  if (yy_current_buffer->yy_buffer_status == YY_BUFFER_EOF_PENDING)
    /* don't do the read, it's not guaranteed to return an EOF,
     * just force an EOF
     */
    yy_current_buffer->yy_n_chars = yy_n_chars = 0;

  else
    {
      int num_to_read =
        yy_current_buffer->yy_buf_size - number_to_move - 1;

      while (num_to_read <= 0)
        {/* Not enough room in the buffer - grow it. */
#ifdef YY_USES_REJECT
          YY_FATAL_ERROR(
            "input buffer overflow, can't enlarge buffer because scanner uses REJECT");
#else

          /* just a shorter name for the current buffer */
          YY_BUFFER_STATE b = yy_current_buffer;

          int yy_c_buf_p_offset =
            (int) (yy_c_buf_p - b->yy_ch_buf);

          if (b->yy_is_our_buffer)
            {
              int new_size = b->yy_buf_size * 2;

              if (new_size <= 0)
                b->yy_buf_size += b->yy_buf_size / 8;
              else
                b->yy_buf_size *= 2;

              b->yy_ch_buf = (char *)
                             /* Include room in for 2 EOB chars. */
                             yy_flex_realloc((void *) b->yy_ch_buf,
                                              b->yy_buf_size + 2);
            }
          else
            /* Can't grow it, we don't own it. */
            b->yy_ch_buf = 0;

          if (! b->yy_ch_buf)
            YY_FATAL_ERROR(
              "fatal error - scanner input buffer overflow");

          yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

          num_to_read = yy_current_buffer->yy_buf_size -
                        number_to_move - 1;
#endif
        }

      if (num_to_read > YY_READ_BUF_SIZE)
        num_to_read = YY_READ_BUF_SIZE;

      /* Read in more data. */
      YY_INPUT((&yy_current_buffer->yy_ch_buf[number_to_move]),
                yy_n_chars, num_to_read);

      yy_current_buffer->yy_n_chars = yy_n_chars;
    }

  if (yy_n_chars == 0)
    {
      if (number_to_move == YY_MORE_ADJ)
        {
          ret_val = EOB_ACT_END_OF_FILE;
          yyrestart(yyin);
        }

      else
        {
          ret_val = EOB_ACT_LAST_MATCH;
          yy_current_buffer->yy_buffer_status =
            YY_BUFFER_EOF_PENDING;
        }
    }

  else
    ret_val = EOB_ACT_CONTINUE_SCAN;

  yy_n_chars += number_to_move;
  yy_current_buffer->yy_ch_buf[yy_n_chars] = YY_END_OF_BUFFER_CHAR;
  yy_current_buffer->yy_ch_buf[yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

  yytext_ptr = &yy_current_buffer->yy_ch_buf[0];

  return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

yy_state_type yyFlexLexer::yy_get_previous_state()
{
  register yy_state_type yy_current_state;
  register char *yy_cp;

  yy_current_state = yy_start;

  for (yy_cp = yytext_ptr + YY_MORE_ADJ; yy_cp < yy_c_buf_p; ++yy_cp)
    {
      register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
      if (yy_accept[yy_current_state])
        {
          yy_last_accepting_state = yy_current_state;
          yy_last_accepting_cpos = yy_cp;
        }
      while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
        {
          yy_current_state = (int) yy_def[yy_current_state];
          if (yy_current_state >= 162)
            yy_c = yy_meta[(unsigned int) yy_c];
        }
      yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
    }

  return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 * next_state = yy_try_NUL_trans(current_state);
 */

yy_state_type yyFlexLexer::yy_try_NUL_trans(yy_state_type yy_current_state)
{
  register int yy_is_jam;
  register char *yy_cp = yy_c_buf_p;

  register YY_CHAR yy_c = 1;
  if (yy_accept[yy_current_state])
    {
      yy_last_accepting_state = yy_current_state;
      yy_last_accepting_cpos = yy_cp;
    }
  while (yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state)
    {
      yy_current_state = (int) yy_def[yy_current_state];
      if (yy_current_state >= 162)
        yy_c = yy_meta[(unsigned int) yy_c];
    }
  yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
  yy_is_jam = (yy_current_state == 161);

  return yy_is_jam ? 0 : yy_current_state;
}

void yyFlexLexer::yyunput(int c, register char* yy_bp)
{
  register char *yy_cp = yy_c_buf_p;

  /* undo effects of setting up yytext */
  *yy_cp = yy_hold_char;

  if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
    {/* need to shift things up to make room */
      /* +2 for EOB chars. */
      register int number_to_move = yy_n_chars + 2;
      register char *dest = &yy_current_buffer->yy_ch_buf[
                              yy_current_buffer->yy_buf_size + 2];
      register char *source =
        &yy_current_buffer->yy_ch_buf[number_to_move];

      while (source > yy_current_buffer->yy_ch_buf)
        *--dest = *--source;

      yy_cp += (int) (dest - source);
      yy_bp += (int) (dest - source);
      yy_current_buffer->yy_n_chars =
        yy_n_chars = yy_current_buffer->yy_buf_size;

      if (yy_cp < yy_current_buffer->yy_ch_buf + 2)
        YY_FATAL_ERROR("flex scanner push-back overflow");
    }

  *--yy_cp = (char) c;

  yytext_ptr = yy_bp;
  yy_hold_char = *yy_cp;
  yy_c_buf_p = yy_cp;
}

int yyFlexLexer::yyinput()
{
  int c;

  *yy_c_buf_p = yy_hold_char;

  if (*yy_c_buf_p == YY_END_OF_BUFFER_CHAR)
    {
      /* yy_c_buf_p now points to the character we want to return.
       * If this occurs *before* the EOB characters, then it's a
       * valid NUL; if not, then we've hit the end of the buffer.
       */
      if (yy_c_buf_p < &yy_current_buffer->yy_ch_buf[yy_n_chars])
        /* This was really a NUL. */
        *yy_c_buf_p = '\0';

      else
        {/* need more input */
          int offset = yy_c_buf_p - yytext_ptr;
          ++yy_c_buf_p;

          switch (yy_get_next_buffer())
            {
            case EOB_ACT_LAST_MATCH:
              /* This happens because yy_g_n_b()
               * sees that we've accumulated a
               * token and flags that we need to
               * try matching the token before
               * proceeding.  But for input(),
               * there's no matching to consider.
               * So convert the EOB_ACT_LAST_MATCH
               * to EOB_ACT_END_OF_FILE.
               */

              /* Reset buffer status. */
              yyrestart(yyin);

              /* fall through */

            case EOB_ACT_END_OF_FILE:
              {
                if (yywrap())
                  return EOF;

                if (! yy_did_buffer_switch_on_eof)
                  YY_NEW_FILE;
#ifdef __cplusplus
                return yyinput();
#else
                return input();
#endif
              }

            case EOB_ACT_CONTINUE_SCAN:
              yy_c_buf_p = yytext_ptr + offset;
              break;
            }
        }
    }

  c = *(unsigned char *) yy_c_buf_p; /* cast for 8-bit char's */
  *yy_c_buf_p = '\0'; /* preserve yytext */
  yy_hold_char = *++yy_c_buf_p;

  return c;
}

void yyFlexLexer::yyrestart(istream* input_file)
{
  if (! yy_current_buffer)
    yy_current_buffer = yy_create_buffer(yyin, YY_BUF_SIZE);

  yy_init_buffer(yy_current_buffer, input_file);
  yy_load_buffer_state();
}

void yyFlexLexer::yy_switch_to_buffer(YY_BUFFER_STATE new_buffer)
{
  if (yy_current_buffer == new_buffer)
    return;

  if (yy_current_buffer)
    {
      /* Flush out information for old buffer. */
      *yy_c_buf_p = yy_hold_char;
      yy_current_buffer->yy_buf_pos = yy_c_buf_p;
      yy_current_buffer->yy_n_chars = yy_n_chars;
    }

  yy_current_buffer = new_buffer;
  yy_load_buffer_state();

  /* We don't actually know whether we did this switch during
   * EOF (yywrap()) processing, but the only time this flag
   * is looked at is after yywrap() is called, so it's safe
   * to go ahead and always set it.
   */
  yy_did_buffer_switch_on_eof = 1;
}

void yyFlexLexer::yy_load_buffer_state()
{
  yy_n_chars = yy_current_buffer->yy_n_chars;
  yytext_ptr = yy_c_buf_p = yy_current_buffer->yy_buf_pos;
  yyin = yy_current_buffer->yy_input_file;
  yy_hold_char = *yy_c_buf_p;
}

YY_BUFFER_STATE yyFlexLexer::yy_create_buffer(istream* file, int size)
{
  YY_BUFFER_STATE b;

  b = (YY_BUFFER_STATE) yy_flex_alloc(sizeof(struct yy_buffer_state));
  if (! b)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_buf_size = size;

  /* yy_ch_buf has to be 2 characters longer than the size given because
   * we need to put in 2 end-of-buffer characters.
   */
  b->yy_ch_buf = (char *) yy_flex_alloc(b->yy_buf_size + 2);
  if (! b->yy_ch_buf)
    YY_FATAL_ERROR("out of dynamic memory in yy_create_buffer()");

  b->yy_is_our_buffer = 1;

  yy_init_buffer(b, file);

  return b;
}

void yyFlexLexer::yy_delete_buffer(YY_BUFFER_STATE b)
{
  if (! b)
    return;

  if (b == yy_current_buffer)
    yy_current_buffer = (YY_BUFFER_STATE) 0;

  if (b->yy_is_our_buffer)
    yy_flex_free((void *) b->yy_ch_buf);

  yy_flex_free((void *) b);
}

extern "C" int isatty YY_PROTO((int));
void yyFlexLexer::yy_init_buffer(YY_BUFFER_STATE b, istream* file)

{
  yy_flush_buffer(b);

  b->yy_input_file = file;
  b->yy_fill_buffer = 1;

  b->yy_is_interactive = 0;
}

void yyFlexLexer::yy_flush_buffer(YY_BUFFER_STATE b)
{
  if (! b)
    return;

  b->yy_n_chars = 0;

  /* We always need two end-of-buffer characters.  The first causes
   * a transition to the end-of-buffer state.  The second causes
   * a jam in that state.
   */
  b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
  b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

  b->yy_buf_pos = &b->yy_ch_buf[0];

  b->yy_at_bol = 1;
  b->yy_buffer_status = YY_BUFFER_NEW;

  if (b == yy_current_buffer)
    yy_load_buffer_state();
}

#ifndef YY_NO_SCAN_BUFFER
#endif

#ifndef YY_NO_SCAN_STRING
#endif

#ifndef YY_NO_SCAN_BYTES
#endif

#ifndef YY_NO_PUSH_STATE
void yyFlexLexer::yy_push_state(int new_state)
{
  if (yy_start_stack_ptr >= yy_start_stack_depth)
    {
      yy_size_t new_size;

      yy_start_stack_depth += YY_START_STACK_INCR;
      new_size = yy_start_stack_depth * sizeof(int);

      if (! yy_start_stack)
        yy_start_stack = (int *) yy_flex_alloc(new_size);

      else
        yy_start_stack = (int *) yy_flex_realloc(
                           (void *) yy_start_stack, new_size);

      if (! yy_start_stack)
        YY_FATAL_ERROR(
          "out of memory expanding start-condition stack");
    }

  yy_start_stack[yy_start_stack_ptr++] = YY_START;

  BEGIN(new_state);
}
#endif

#ifndef YY_NO_POP_STATE
void yyFlexLexer::yy_pop_state()
{
  if (--yy_start_stack_ptr < 0)
    YY_FATAL_ERROR("start-condition stack underflow");

  BEGIN(yy_start_stack[yy_start_stack_ptr]);
}
#endif

#ifndef YY_NO_TOP_STATE
int yyFlexLexer::yy_top_state()
{
  return yy_start_stack[yy_start_stack_ptr - 1];
}
#endif

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

void yyFlexLexer::LexerError(yyconst char msg[])
{
  cerr << msg << '\n';
  exit(YY_EXIT_FAILURE);
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
 do \
  {\
  /* Undo effects of setting up yytext. */ \
  yytext[yyleng] = yy_hold_char; \
  yy_c_buf_p = yytext + n; \
  yy_hold_char = *yy_c_buf_p; \
  *yy_c_buf_p = '\0'; \
  yyleng = n; \
  } \
 while (0)

/* Internal utility routines. */

#ifndef yytext_ptr
#ifdef YY_USE_PROTOS
static void yy_flex_strncpy(char *s1, yyconst char *s2, int n)
#else
static void yy_flex_strncpy(s1, s2, n)
char *s1;
yyconst char *s2;
int n;
#endif
{
  register int i;
  for (i = 0; i < n; ++i)
    s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
#ifdef YY_USE_PROTOS
static int yy_flex_strlen(yyconst char *s)
#else
static int yy_flex_strlen(s)
yyconst char *s;
#endif
{
  register int n;
  for (n = 0; s[n]; ++n)
;

  return n;
}
#endif

#ifdef YY_USE_PROTOS
static void *yy_flex_alloc(yy_size_t size)
#else
static void *yy_flex_alloc(size)
yy_size_t size;
#endif
{
  return (void *) malloc(size);
}

#ifdef YY_USE_PROTOS
static void *yy_flex_realloc(void *ptr, yy_size_t size)
#else
static void *yy_flex_realloc(ptr, size)
void *ptr;
yy_size_t size;
#endif
{
  /* The cast to (char *) in the following accommodates both
   * implementations that use char* generic pointers, and those
   * that use void* generic pointers.  It works with the latter
   * because both ANSI C and C++ allow castless assignment from
   * any pointer type to void*, and deal with argument conversions
   * as though doing an assignment.
   */
  return (void *) realloc((char *) ptr, size);
}

#ifdef YY_USE_PROTOS
static void yy_flex_free(void *ptr)
#else
static void yy_flex_free(ptr)
void *ptr;
#endif
{
  free(ptr);
}

#if YY_MAIN
int main()
{
  yylex();
  return 0;
}
#endif
#line 129 "CKinFunctionFlexLexer.lpp"
