// Begin CVS Header
//   $Source: /Volumes/Home/Users/shoops/cvs/copasi_dev/copasi/UI/CQOptimizationWidget.h,v $
//   $Revision: 1.15 $
//   $Name:  $
//   $Author: shoops $
//   $Date: 2009/01/08 16:07:44 $
// End CVS Header

// Copyright (C) 2008 by Pedro Mendes, Virginia Tech Intellectual
// Properties, Inc., EML Research, gGmbH, University of Heidelberg,
// and The University of Manchester.
// All rights reserved.

#ifndef CQOPTIMIZATIONWIDGET_H
#define CQOPTIMIZATIONWIDGET_H

#include <qvariant.h>
#include "TaskWidget.h"

class CQFittingItemWidget;

#include <Qt3Support/Q3ButtonGroup>
#include <QtCore/QVariant>
#include <QtGui/QAction>
#include <QtGui/QApplication>
#include <QtGui/QButtonGroup>
#include <QtGui/QComboBox>
#include <QtGui/QGridLayout>
#include <QtGui/QLabel>
#include <QtGui/QRadioButton>
#include <QtGui/QSpacerItem>
#include <QtGui/QTabWidget>
#include <QtGui/QVBoxLayout>
#include <QtGui/QWidget>
#include <map>
#include <string>
#include "CQExpressionMmlWidget.h"
#include "TaskWidget.h"

QT_BEGIN_NAMESPACE

class Ui_CQOptimizationWidget
  {
  public:
    QVBoxLayout *vboxLayout;
    QGridLayout *gridLayout;
    QLabel *mpLblType;
    QLabel *mpLblExpression;
    CQExpressionMmlWidget *mpExpressionEMW;
    QComboBox *mpBoxSubtask;
    Q3ButtonGroup *mpBtnGroup;
    QRadioButton *mpBtnMaximize;
    QRadioButton *mpBtnMinimize;
    QSpacerItem *mpSpacer;
    QTabWidget *mpTabWidget;
    QWidget *mpParametersPage;
    QWidget *mpConstraintsPage;

    void setupUi(TaskWidget *CQOptimizationWidget)
    {
      if (CQOptimizationWidget->objectName().isEmpty())
        CQOptimizationWidget->setObjectName(QString::fromUtf8("CQOptimizationWidget"));
      CQOptimizationWidget->resize(550, 222);
      QSizePolicy sizePolicy(static_cast<QSizePolicy::Policy>(5), static_cast<QSizePolicy::Policy>(5));
      sizePolicy.setHorizontalStretch(0);
      sizePolicy.setVerticalStretch(0);
      sizePolicy.setHeightForWidth(CQOptimizationWidget->sizePolicy().hasHeightForWidth());
      CQOptimizationWidget->setSizePolicy(sizePolicy);
      CQOptimizationWidget->setMinimumSize(QSize(0, 0));
      vboxLayout = new QVBoxLayout(CQOptimizationWidget);
      vboxLayout->setSpacing(6);
      vboxLayout->setMargin(11);
      vboxLayout->setObjectName(QString::fromUtf8("vboxLayout"));
      gridLayout = new QGridLayout();
      gridLayout->setSpacing(6);
      gridLayout->setObjectName(QString::fromUtf8("gridLayout"));
      mpLblType = new QLabel(CQOptimizationWidget);
      mpLblType->setObjectName(QString::fromUtf8("mpLblType"));
      sizePolicy.setHeightForWidth(mpLblType->sizePolicy().hasHeightForWidth());
      mpLblType->setSizePolicy(sizePolicy);
      mpLblType->setAlignment(Qt::AlignVCenter | Qt::AlignLeft);
      mpLblType->setWordWrap(false);

      gridLayout->addWidget(mpLblType, 2, 0, 1, 1);

      mpLblExpression = new QLabel(CQOptimizationWidget);
      mpLblExpression->setObjectName(QString::fromUtf8("mpLblExpression"));
      sizePolicy.setHeightForWidth(mpLblExpression->sizePolicy().hasHeightForWidth());
      mpLblExpression->setSizePolicy(sizePolicy);
      mpLblExpression->setAlignment(Qt::AlignTop | Qt::AlignLeft);
      mpLblExpression->setWordWrap(false);

      gridLayout->addWidget(mpLblExpression, 0, 0, 1, 1);

      mpExpressionEMW = new CQExpressionMmlWidget(CQOptimizationWidget);
      mpExpressionEMW->setObjectName(QString::fromUtf8("mpExpressionEMW"));
      sizePolicy.setHeightForWidth(mpExpressionEMW->sizePolicy().hasHeightForWidth());
      mpExpressionEMW->setSizePolicy(sizePolicy);
      mpExpressionEMW->setMinimumSize(QSize(420, 70));

      gridLayout->addWidget(mpExpressionEMW, 0, 1, 2, 2);

      mpBoxSubtask = new QComboBox(CQOptimizationWidget);
      mpBoxSubtask->setObjectName(QString::fromUtf8("mpBoxSubtask"));
      QSizePolicy sizePolicy1(static_cast<QSizePolicy::Policy>(3), static_cast<QSizePolicy::Policy>(0));
      sizePolicy1.setHorizontalStretch(0);
      sizePolicy1.setVerticalStretch(0);
      sizePolicy1.setHeightForWidth(mpBoxSubtask->sizePolicy().hasHeightForWidth());
      mpBoxSubtask->setSizePolicy(sizePolicy1);

      gridLayout->addWidget(mpBoxSubtask, 2, 1, 1, 1);

      mpBtnGroup = new Q3ButtonGroup(CQOptimizationWidget);
      mpBtnGroup->setObjectName(QString::fromUtf8("mpBtnGroup"));
      QSizePolicy sizePolicy2(static_cast<QSizePolicy::Policy>(1), static_cast<QSizePolicy::Policy>(3));
      sizePolicy2.setHorizontalStretch(0);
      sizePolicy2.setVerticalStretch(0);
      sizePolicy2.setHeightForWidth(mpBtnGroup->sizePolicy().hasHeightForWidth());
      mpBtnGroup->setSizePolicy(sizePolicy2);
      mpBtnGroup->setFrameShape(Q3GroupBox::NoFrame);
      mpBtnGroup->setFrameShadow(Q3GroupBox::Plain);
      mpBtnGroup->setLineWidth(0);
      mpBtnGroup->setFlat(true);
      mpBtnGroup->setProperty("selectedId", QVariant(1));
      mpBtnMaximize = new QRadioButton(mpBtnGroup);
      mpBtnMaximize->setObjectName(QString::fromUtf8("mpBtnMaximize"));
      mpBtnMaximize->setGeometry(QRect(0, 20, 90, 22));
      QSizePolicy sizePolicy3(static_cast<QSizePolicy::Policy>(1), static_cast<QSizePolicy::Policy>(0));
      sizePolicy3.setHorizontalStretch(0);
      sizePolicy3.setVerticalStretch(0);
      sizePolicy3.setHeightForWidth(mpBtnMaximize->sizePolicy().hasHeightForWidth());
      mpBtnMaximize->setSizePolicy(sizePolicy3);
      mpBtnMinimize = new QRadioButton(mpBtnGroup);
      mpBtnMinimize->setObjectName(QString::fromUtf8("mpBtnMinimize"));
      mpBtnMinimize->setGeometry(QRect(0, 0, 90, 22));
      sizePolicy3.setHeightForWidth(mpBtnMinimize->sizePolicy().hasHeightForWidth());
      mpBtnMinimize->setSizePolicy(sizePolicy3);
      mpBtnMinimize->setChecked(true);

      gridLayout->addWidget(mpBtnGroup, 1, 0, 1, 1);

      mpSpacer = new QSpacerItem(214, 20, QSizePolicy::Expanding, QSizePolicy::Minimum);

      gridLayout->addItem(mpSpacer, 2, 2, 1, 1);

      vboxLayout->addLayout(gridLayout);

      mpTabWidget = new QTabWidget(CQOptimizationWidget);
      mpTabWidget->setObjectName(QString::fromUtf8("mpTabWidget"));
      QSizePolicy sizePolicy4(static_cast<QSizePolicy::Policy>(7), static_cast<QSizePolicy::Policy>(7));
      sizePolicy4.setHorizontalStretch(0);
      sizePolicy4.setVerticalStretch(0);
      sizePolicy4.setHeightForWidth(mpTabWidget->sizePolicy().hasHeightForWidth());
      mpTabWidget->setSizePolicy(sizePolicy4);
      mpParametersPage = new QWidget();
      mpParametersPage->setObjectName(QString::fromUtf8("mpParametersPage"));
      mpTabWidget->addTab(mpParametersPage, QString());
      mpConstraintsPage = new QWidget();
      mpConstraintsPage->setObjectName(QString::fromUtf8("mpConstraintsPage"));
      mpTabWidget->addTab(mpConstraintsPage, QString());

      vboxLayout->addWidget(mpTabWidget);

      QWidget::setTabOrder(mpBoxSubtask, mpTabWidget);

      retranslateUi(CQOptimizationWidget);
      QObject::connect(mpTabWidget, SIGNAL(currentChanged(QWidget*)), CQOptimizationWidget, SLOT(slotPageChange(QWidget*)));
      QObject::connect(mpBoxSubtask, SIGNAL(activated(QString)), CQOptimizationWidget, SLOT(slotSubtaskChanged(QString)));

      QMetaObject::connectSlotsByName(CQOptimizationWidget);
    } // setupUi

    void retranslateUi(TaskWidget *CQOptimizationWidget)
    {
      CQOptimizationWidget->setCaption(QApplication::translate("CQOptimizationWidget", "Optimization", 0, QApplication::UnicodeUTF8));
      mpLblType->setText(QApplication::translate("CQOptimizationWidget", "Subtask", 0, QApplication::UnicodeUTF8));
      mpLblExpression->setText(QApplication::translate("CQOptimizationWidget", "Expression", 0, QApplication::UnicodeUTF8));
      mpBtnGroup->setTitle(QString());
      mpBtnMaximize->setText(QApplication::translate("CQOptimizationWidget", "maximize", 0, QApplication::UnicodeUTF8));
      mpBtnMinimize->setText(QApplication::translate("CQOptimizationWidget", "minimize", 0, QApplication::UnicodeUTF8));
      mpTabWidget->setTabText(mpTabWidget->indexOf(mpParametersPage), QApplication::translate("CQOptimizationWidget", "Parameters (0)", 0, QApplication::UnicodeUTF8));
      mpTabWidget->setTabText(mpTabWidget->indexOf(mpConstraintsPage), QApplication::translate("CQOptimizationWidget", "Constraints (0)", 0, QApplication::UnicodeUTF8));
      Q_UNUSED(CQOptimizationWidget);
    } // retranslateUi

  protected:
    enum IconID
    {
      image0_ID,
      image1_ID,
      unknown_ID
    };
    static QPixmap qt_get_icon(IconID id)
    {
      static const unsigned char image0_data[] =
        {
          0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
          0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x16,
          0x08, 0x06, 0x00, 0x00, 0x00, 0xc4, 0xb4, 0x6c, 0x3b, 0x00, 0x00, 0x03,
          0x2e, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0xb5, 0x95, 0x31, 0x68, 0x1c,
          0x47, 0x14, 0x86, 0x3f, 0x89, 0x2d, 0xde, 0x80, 0x04, 0xb3, 0x20, 0xc3,
          0x2e, 0x38, 0x70, 0x07, 0x32, 0xf8, 0x0a, 0x17, 0xd7, 0x1e, 0xa8, 0xb0,
          0x4a, 0x81, 0xc0, 0x16, 0xa8, 0x09, 0xa8, 0x71, 0x6b, 0x42, 0x20, 0x84,
          0x54, 0x09, 0x86, 0x04, 0xd2, 0xc4, 0x90, 0x4a, 0x69, 0x54, 0xa4, 0x10,
          0x51, 0x1a, 0xe7, 0x5c, 0x18, 0xac, 0x42, 0xb6, 0x12, 0x30, 0xdc, 0x35,
          0x22, 0x12, 0x44, 0xb0, 0x01, 0x19, 0xf6, 0x0a, 0xc1, 0x2e, 0xe8, 0x60,
          0x06, 0x2c, 0x98, 0x07, 0x19, 0x70, 0x8a, 0x95, 0xa2, 0x48, 0xf1, 0x29,
          0x45, 0x9c, 0xd7, 0xcc, 0xee, 0xcc, 0xf0, 0xed, 0xb7, 0x6f, 0xff, 0x61,
          0xa7, 0x06, 0x83, 0x01, 0xe7, 0xd5, 0xeb, 0xf5, 0xde, 0xf2, 0x1e, 0x6a,
          0x30, 0x18, 0x4c, 0x4d, 0x9d, 0x83, 0x5f, 0xee, 0xbc, 0x7c, 0xdb, 0x9e,
          0x6f, 0xe3, 0xbd, 0xa7, 0xaa, 0x2b, 0x9c, 0x77, 0x18, 0x0c, 0x81, 0x70,
          0xed, 0xe8, 0xbc, 0xa3, 0x38, 0x2a, 0x18, 0xee, 0x0d, 0x21, 0x5e, 0xc0,
          0x93, 0x73, 0xd3, 0x27, 0x3f, 0x3c, 0x21, 0xcd, 0x21, 0x6f, 0x43, 0x2b,
          0xea, 0xd9, 0xb2, 0x83, 0x44, 0x00, 0x87, 0x49, 0x04, 0x08, 0x17, 0xf3,
          0x5c, 0xdc, 0x17, 0x47, 0x02, 0xdf, 0x5b, 0x86, 0x2f, 0xfc, 0x65, 0x30,
          0x40, 0xed, 0x6b, 0xd2, 0x0f, 0xa0, 0x1c, 0xff, 0x84, 0xbe, 0x29, 0x09,
          0x51, 0x31, 0x06, 0xc2, 0x1f, 0xe0, 0x6b, 0xa1, 0xaa, 0x15, 0x41, 0x30,
          0x73, 0xd0, 0xbe, 0x05, 0x22, 0x0a, 0x11, 0x14, 0x90, 0x59, 0x48, 0x6f,
          0x28, 0x7f, 0xaf, 0xbf, 0xc0, 0xae, 0x76, 0x84, 0x3b, 0x1e, 0x7d, 0x53,
          0x13, 0xa2, 0xc7, 0xcc, 0x5a, 0xca, 0x7d, 0xd8, 0xdd, 0x56, 0xf6, 0xf7,
          0x6a, 0x24, 0x01, 0x8d, 0x8a, 0x24, 0x96, 0x6c, 0x5e, 0x58, 0x5a, 0x4d,
          0xe9, 0x2d, 0x04, 0x84, 0x66, 0xde, 0xce, 0x08, 0xcd, 0x63, 0xae, 0x80,
          0x2b, 0x5f, 0xd1, 0x45, 0x09, 0xb1, 0xc2, 0x18, 0xcb, 0x60, 0x47, 0xd9,
          0xda, 0xf0, 0x10, 0xc1, 0x5a, 0x21, 0x9f, 0x17, 0x44, 0xa0, 0x1a, 0x29,
          0xa3, 0xd7, 0xca, 0x77, 0x5f, 0x95, 0xd4, 0x6b, 0x19, 0x2b, 0x6b, 0x20,
          0xd2, 0xc0, 0xdf, 0x69, 0x6c, 0x12, 0x03, 0x28, 0x66, 0x56, 0x28, 0xf7,
          0xa1, 0x7f, 0x06, 0x5d, 0xba, 0x97, 0x71, 0x77, 0x19, 0xf2, 0xdc, 0x40,
          0x12, 0x50, 0x4d, 0xd9, 0xdd, 0x0e, 0xf4, 0x37, 0x3c, 0xfd, 0xcd, 0x11,
          0x59, 0xd6, 0x61, 0xf1, 0xbe, 0x41, 0x12, 0xbd, 0x64, 0x3c, 0x7d, 0x7e,
          0x11, 0x62, 0x00, 0x84, 0x10, 0xe0, 0xf9, 0x33, 0x8f, 0x46, 0x65, 0xe9,
          0x5e, 0xc6, 0xca, 0x03, 0x48, 0x73, 0x45, 0x93, 0x0a, 0x7f, 0x62, 0x78,
          0xfe, 0xd4, 0xb1, 0xb4, 0x9a, 0xf2, 0xe1, 0x47, 0x16, 0x12, 0x61, 0x6b,
          0xb3, 0x42, 0xc7, 0xff, 0x8c, 0xdc, 0x65, 0xe3, 0xc4, 0xe1, 0xeb, 0x94,
          0xe2, 0xa0, 0xc4, 0xda, 0xc6, 0x54, 0xa4, 0xb1, 0xf0, 0xa7, 0x39, 0xeb,
          0xdf, 0x38, 0xca, 0x43, 0x8f, 0x3b, 0x81, 0x87, 0x9f, 0xe5, 0x0c, 0x77,
          0x3c, 0xe5, 0xef, 0x4a, 0x51, 0x04, 0x44, 0x2e, 0x83, 0x2f, 0x19, 0x9b,
          0x44, 0xa8, 0x6a, 0x07, 0x09, 0xe4, 0x2d, 0x48, 0x6f, 0x80, 0xa2, 0x78,
          0x9f, 0xb2, 0xfe, 0x65, 0x45, 0x71, 0xe8, 0x11, 0x2b, 0xf4, 0x16, 0x52,
          0x98, 0x71, 0x74, 0xba, 0x16, 0x8d, 0x4a, 0x75, 0x0c, 0x1a, 0x27, 0x80,
          0x9b, 0x1e, 0x83, 0x20, 0x10, 0x15, 0x3b, 0x73, 0xf6, 0x51, 0x4e, 0x72,
          0xd6, 0xbf, 0x76, 0x94, 0x87, 0x4d, 0xbc, 0xec, 0x8c, 0x90, 0xdf, 0x84,
          0x54, 0x9a, 0xf7, 0x95, 0x44, 0xd0, 0x08, 0x72, 0x45, 0xf9, 0x4a, 0x8f,
          0xc1, 0xcc, 0x01, 0x89, 0xa5, 0x18, 0x29, 0xaa, 0x86, 0xdd, 0x17, 0xa1,
          0x31, 0x9d, 0x11, 0xb2, 0x9b, 0x96, 0xd1, 0xa8, 0xe6, 0xf1, 0xa3, 0x8a,
          0x62, 0x3f, 0xa5, 0x2a, 0x15, 0x8d, 0x4a, 0xbb, 0x65, 0xe0, 0xfa, 0x54,
          0x38, 0x3a, 0xb7, 0xa0, 0xd5, 0x12, 0xea, 0x91, 0xb2, 0xbb, 0x1d, 0x58,
          0x59, 0x4b, 0x71, 0x27, 0x4a, 0xef, 0x6e, 0x4a, 0x9e, 0xc1, 0xe3, 0x47,
          0x30, 0x7a, 0x5d, 0xf3, 0xf9, 0xc7, 0x15, 0x7a, 0xea, 0xc9, 0x32, 0x4b,
          0xa7, 0x0b, 0x55, 0x7d, 0x4d, 0x8f, 0x41, 0x40, 0x94, 0xa5, 0x55, 0x41,
          0xa3, 0xd2, 0xdf, 0xf0, 0xec, 0x6e, 0x3b, 0x1e, 0x7e, 0x92, 0xd3, 0x5d,
          0x08, 0xb4, 0xba, 0x81, 0x4f, 0xbf, 0xc8, 0xc9, 0x32, 0x8b, 0x1f, 0xd7,
          0x10, 0xa1, 0xb7, 0x6c, 0x69, 0xdf, 0xfe, 0xd7, 0x1c, 0x07, 0x88, 0x42,
          0x6f, 0x01, 0xea, 0xe3, 0x8c, 0xfe, 0xe6, 0x88, 0xad, 0x6f, 0x61, 0xb8,
          0xe3, 0xe9, 0xdc, 0xb1, 0x90, 0x40, 0x55, 0x3a, 0xfc, 0x58, 0x9b, 0xde,
          0xa2, 0x14, 0xaf, 0x94, 0xe2, 0xc0, 0x60, 0x65, 0xc2, 0xc9, 0x73, 0x63,
          0x77, 0x76, 0xf6, 0x15, 0x01, 0x56, 0xd6, 0x84, 0x2c, 0xeb, 0xd0, 0xff,
          0xb1, 0xa2, 0x38, 0x54, 0x8a, 0x83, 0x51, 0xb3, 0x3b, 0x82, 0x9d, 0xb3,
          0x2c, 0xde, 0xb7, 0xfc, 0xfa, 0xb3, 0x52, 0x9d, 0x7a, 0x34, 0xa6, 0xd4,
          0xe3, 0x09, 0xc6, 0xc5, 0x51, 0x41, 0x51, 0x0a, 0x92, 0x36, 0x26, 0x92,
          0xc0, 0xe2, 0x72, 0xa0, 0xb7, 0x90, 0x53, 0x14, 0x81, 0xea, 0xb8, 0x81,
          0xe6, 0x2d, 0x43, 0xa7, 0x0b, 0xed, 0xdb, 0x50, 0x2c, 0x1b, 0x88, 0x39,
          0x24, 0x8e, 0xf2, 0x37, 0xde, 0x0d, 0x1e, 0xee, 0x0d, 0x61, 0x43, 0x48,
          0xf3, 0x26, 0x52, 0xaa, 0xbe, 0xc9, 0x1b, 0x1e, 0x39, 0xdb, 0x25, 0x09,
          0x94, 0xc7, 0xbe, 0xc9, 0xed, 0xb3, 0xa6, 0x1d, 0xde, 0x43, 0xb1, 0xaf,
          0x54, 0xf5, 0x04, 0x63, 0x22, 0x0c, 0x7f, 0x39, 0x5f, 0xbc, 0x3a, 0x4e,
          0xaa, 0xc9, 0xeb, 0xd3, 0x13, 0x57, 0xfe, 0x63, 0x4d, 0x43, 0xf3, 0x8f,
          0xfa, 0x5f, 0xc0, 0xef, 0x1b, 0x3e, 0x18, 0x0c, 0xa6, 0xfe, 0x04, 0x09,
          0x39, 0x9b, 0xe1, 0x12, 0xf7, 0x85, 0x8f, 0x00, 0x00, 0x00, 0x00, 0x49,
          0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
        };

      static const unsigned char image1_data[] =
        {
          0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
          0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x16,
          0x08, 0x06, 0x00, 0x00, 0x00, 0xc4, 0xb4, 0x6c, 0x3b, 0x00, 0x00, 0x03,
          0x2d, 0x49, 0x44, 0x41, 0x54, 0x78, 0x9c, 0xb5, 0x95, 0x31, 0x68, 0x1c,
          0x47, 0x14, 0x86, 0x3f, 0x89, 0x2d, 0xde, 0x80, 0x04, 0xb3, 0x20, 0xc3,
          0x2e, 0x38, 0x70, 0x02, 0x0b, 0x74, 0x45, 0x8a, 0x6b, 0x0f, 0x54, 0x58,
          0xe5, 0x81, 0xc0, 0x16, 0xa8, 0x09, 0xa8, 0x49, 0x6b, 0x42, 0x20, 0x84,
          0x54, 0x09, 0x86, 0x04, 0xd2, 0xc4, 0x90, 0x4a, 0x69, 0x54, 0xa4, 0x10,
          0x51, 0x1a, 0xe7, 0x52, 0x08, 0x5b, 0x85, 0x8c, 0x12, 0x08, 0xdc, 0x35,
          0x22, 0x12, 0x44, 0xb0, 0x01, 0x19, 0xf6, 0x0a, 0xc1, 0x2e, 0xe8, 0x60,
          0x06, 0x2c, 0x98, 0x07, 0x19, 0x70, 0x8a, 0x95, 0xa2, 0x48, 0xf1, 0x29,
          0x45, 0x9c, 0xd7, 0xcc, 0xee, 0xcc, 0xf0, 0xed, 0xb7, 0x6f, 0xff, 0x61,
          0xa7, 0x06, 0x83, 0x01, 0x97, 0xd5, 0xed, 0x76, 0x5f, 0xf3, 0x16, 0x6a,
          0x30, 0x18, 0x4c, 0x4d, 0x5d, 0x82, 0x9f, 0xed, 0x3c, 0x7b, 0xdd, 0x5e,
          0x6c, 0xe3, 0xbd, 0xa7, 0x1a, 0x57, 0x38, 0xef, 0x30, 0x18, 0x02, 0xe1,
          0xd6, 0xd1, 0x79, 0x47, 0x71, 0x52, 0x30, 0x3c, 0x18, 0x42, 0xbc, 0x82,
          0x27, 0x97, 0xa6, 0x4f, 0xbf, 0x7b, 0x4a, 0x9a, 0x43, 0xbe, 0x00, 0xad,
          0xa8, 0x17, 0xcb, 0x0e, 0x12, 0x01, 0x1c, 0x26, 0x11, 0x20, 0x5c, 0xcd,
          0x73, 0x75, 0x5f, 0x9c, 0x08, 0x7c, 0x6b, 0x19, 0xbe, 0xf0, 0xd7, 0xc1,
          0x00, 0xf5, 0xb8, 0x26, 0x7d, 0x07, 0xca, 0xf1, 0x0f, 0xe8, 0xab, 0x92,
          0x10, 0x15, 0x63, 0x20, 0xfc, 0x01, 0xbe, 0x16, 0xaa, 0x5a, 0x11, 0x04,
          0x33, 0x07, 0xf3, 0x0b, 0x20, 0xa2, 0x10, 0x41, 0x01, 0x99, 0x85, 0xf4,
          0x8e, 0xf2, 0xf7, 0xfa, 0x0b, 0xec, 0xc6, 0x8e, 0x80, 0x47, 0x5f, 0xd5,
          0x84, 0xe8, 0x31, 0xb3, 0x96, 0xf2, 0x10, 0xf6, 0x77, 0x95, 0xc3, 0x83,
          0x1a, 0x49, 0x40, 0xa3, 0x22, 0x89, 0x25, 0xbb, 0x27, 0xf4, 0xd6, 0x52,
          0xba, 0x4b, 0x01, 0xa1, 0x99, 0xb7, 0x33, 0x42, 0xf3, 0x98, 0x1b, 0xe0,
          0xca, 0x57, 0x74, 0x50, 0x42, 0xac, 0x30, 0xc6, 0x32, 0xd8, 0x53, 0xb6,
          0x37, 0x3d, 0x44, 0xb0, 0x56, 0xc8, 0xef, 0x09, 0x22, 0x50, 0x8d, 0x94,
          0xd1, 0x4b, 0xe5, 0x9b, 0x2f, 0x4a, 0xea, 0xf5, 0x8c, 0xd5, 0x75, 0x10,
          0x69, 0xe0, 0x6f, 0x34, 0x36, 0x89, 0x01, 0x14, 0x33, 0x2b, 0x94, 0x87,
          0xd0, 0xbf, 0x80, 0xf6, 0x1e, 0x64, 0xdc, 0x5f, 0x81, 0x3c, 0x37, 0x90,
          0x04, 0x54, 0x53, 0xf6, 0x77, 0x03, 0xfd, 0x4d, 0x4f, 0x7f, 0x6b, 0x44,
          0x96, 0xb5, 0x59, 0x7e, 0x68, 0x90, 0x44, 0xaf, 0x19, 0x4f, 0x5f, 0x5e,
          0x84, 0x18, 0x00, 0x21, 0x04, 0x78, 0xbe, 0xe3, 0xd1, 0xa8, 0xf4, 0x1e,
          0x64, 0xac, 0xbe, 0x0f, 0x69, 0xae, 0x68, 0x52, 0xe1, 0xcf, 0x0c, 0xcf,
          0x7f, 0x74, 0xf4, 0xd6, 0x52, 0xde, 0xfb, 0xc0, 0x42, 0x22, 0x6c, 0x6f,
          0x55, 0xe8, 0xf8, 0x9f, 0x91, 0xbb, 0x6e, 0x9c, 0x38, 0x7c, 0x9d, 0x52,
          0x1c, 0x95, 0x58, 0xdb, 0x98, 0x8a, 0x34, 0x16, 0xfe, 0x3c, 0x67, 0xe3,
          0x2b, 0x47, 0x79, 0xec, 0x71, 0x67, 0xf0, 0xe8, 0x93, 0x9c, 0xe1, 0x9e,
          0xa7, 0xfc, 0x5d, 0x29, 0x8a, 0x80, 0xc8, 0x75, 0xf0, 0x35, 0x63, 0x93,
          0x08, 0x55, 0xed, 0x20, 0x81, 0xbc, 0x05, 0xe9, 0x1d, 0x50, 0x14, 0xef,
          0x53, 0x36, 0x3e, 0xaf, 0x28, 0x8e, 0x3d, 0x62, 0x85, 0xee, 0x52, 0x0a,
          0x33, 0x8e, 0x76, 0xc7, 0xa2, 0x51, 0xa9, 0x4e, 0x41, 0xe3, 0x04, 0x70,
          0xd3, 0x63, 0x10, 0x04, 0xa2, 0x62, 0x67, 0x2e, 0x3e, 0xca, 0x59, 0xce,
          0xc6, 0x97, 0x8e, 0xf2, 0xb8, 0x89, 0x97, 0x9d, 0x11, 0xf2, 0xbb, 0x90,
          0x4a, 0xf3, 0xbe, 0x92, 0x08, 0x1a, 0x41, 0x6e, 0x28, 0xdf, 0xe8, 0x31,
          0x98, 0x39, 0x20, 0xb1, 0x14, 0x23, 0x45, 0xd5, 0xb0, 0xff, 0x22, 0x34,
          0xa6, 0x33, 0x42, 0x76, 0xd7, 0x32, 0x1a, 0xd5, 0x3c, 0x79, 0x5c, 0x51,
          0x1c, 0xa6, 0x54, 0xa5, 0xa2, 0x51, 0x99, 0x6f, 0x19, 0xb8, 0x3d, 0x15,
          0x8e, 0xf6, 0x02, 0xb4, 0x5a, 0x42, 0x3d, 0x52, 0xf6, 0x77, 0x03, 0xab,
          0xeb, 0x29, 0xee, 0x4c, 0xe9, 0xde, 0x4f, 0xc9, 0x33, 0x78, 0xf2, 0x18,
          0x46, 0x2f, 0x6b, 0x3e, 0xfd, 0xb0, 0x42, 0xcf, 0x3d, 0x59, 0x66, 0x69,
          0x77, 0xa0, 0xaa, 0x6f, 0xe9, 0x31, 0x08, 0x88, 0xd2, 0x5b, 0x13, 0x34,
          0x2a, 0xfd, 0x4d, 0xcf, 0xfe, 0xae, 0xe3, 0xd1, 0x47, 0x39, 0x9d, 0xa5,
          0x40, 0xab, 0x13, 0xf8, 0xf8, 0xb3, 0x9c, 0x2c, 0xb3, 0xf8, 0x71, 0x0d,
          0x11, 0xba, 0x2b, 0x96, 0xf9, 0xc5, 0x7f, 0xcd, 0x71, 0x80, 0x28, 0x74,
          0x97, 0xa0, 0x3e, 0xcd, 0xe8, 0x6f, 0x8d, 0xd8, 0xfe, 0x1a, 0x86, 0x7b,
          0x9e, 0xf6, 0xbb, 0x16, 0x12, 0xa8, 0x4a, 0x87, 0x1f, 0x6b, 0xd3, 0x5b,
          0x94, 0xe2, 0x17, 0xa5, 0x38, 0x32, 0x58, 0x99, 0x70, 0xf2, 0xdc, 0xd8,
          0x5d, 0x9c, 0x7d, 0x45, 0x80, 0xd5, 0x75, 0x21, 0xcb, 0xda, 0xf4, 0xbf,
          0xaf, 0x28, 0x8e, 0x95, 0xe2, 0x68, 0xd4, 0xec, 0x8e, 0x60, 0xe7, 0x2c,
          0xcb, 0x0f, 0x2d, 0xbf, 0xfe, 0xa4, 0x54, 0xe7, 0x1e, 0x8d, 0x29, 0xf5,
          0x78, 0x82, 0x71, 0x71, 0x52, 0x50, 0x94, 0x82, 0xa4, 0x8d, 0x89, 0x24,
          0xb0, 0xbc, 0x12, 0xe8, 0x2e, 0xe5, 0x14, 0x45, 0xa0, 0x3a, 0x6d, 0xa0,
          0x79, 0xcb, 0xd0, 0xee, 0xc0, 0xfc, 0x22, 0x14, 0x2b, 0x06, 0x62, 0x0e,
          0x89, 0xa3, 0xfc, 0x8d, 0x37, 0x83, 0x87, 0x07, 0x43, 0xd8, 0x14, 0xd2,
          0xbc, 0x89, 0x94, 0xaa, 0x6f, 0xf2, 0x86, 0x47, 0x2e, 0x76, 0x49, 0x02,
          0xe5, 0xa9, 0x6f, 0x72, 0xbb, 0xd3, 0xb4, 0xc3, 0x7b, 0x28, 0x0e, 0x95,
          0xaa, 0x9e, 0x60, 0x4c, 0x84, 0xe1, 0xcf, 0x97, 0x8b, 0x37, 0xc7, 0x49,
          0x35, 0x79, 0x7d, 0x7a, 0xe2, 0xca, 0x7f, 0xac, 0x69, 0x68, 0xfe, 0x51,
          0xff, 0x0b, 0xf8, 0x6d, 0xc3, 0x07, 0x83, 0xc1, 0xd4, 0x9f, 0x0b, 0xaa,
          0x9b, 0xb8, 0x0f, 0x5d, 0xf2, 0x14, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
          0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
        };

      switch (id)
        {
        case image0_ID: {QImage img; img.loadFromData(image0_data, sizeof(image0_data), "PNG"); return QPixmap::fromImage(img);}
        case image1_ID: {QImage img; img.loadFromData(image1_data, sizeof(image1_data), "PNG"); return QPixmap::fromImage(img);}
        default: return QPixmap();
        } // switch
    } // icon
  };

namespace Ui
  {
  class CQOptimizationWidget: public Ui_CQOptimizationWidget {};
} // namespace Ui

QT_END_NAMESPACE

class CQOptimizationWidget : public TaskWidget, public Ui::CQOptimizationWidget
  {
    Q_OBJECT

  public:
    CQOptimizationWidget(QWidget* parent = 0, const char* name = 0);
    ~CQOptimizationWidget();

    virtual bool runTask();
    bool isSteadyState();

  public slots:
    void slotParameterNumberChanged(int number);
    void slotConstraintNumberChanged(int number);
    virtual void slotEditExpression();

  protected:
    CQFittingItemWidget * mpCurrentList;
    CQFittingItemWidget * mpConstraints;
    CQFittingItemWidget * mpParameters;
    QColor mChangedColor;
    QColor mSavedColor;
    bool mTypeChanged;
    Q3HBoxLayout * mpConstraintPageLayout;
    Q3HBoxLayout * mpParameterPageLayout;
    std::map< std::string, C_INT32 > mSubtaskMap;

    virtual bool saveTask();
    virtual bool loadTask();
    virtual CCopasiMethod * createMethod(const CCopasiMethod::SubType & type);

  protected slots:
    virtual void languageChange();

    void slotPageChange(QWidget * currentPage);
    void slotExpressionValid(bool valid);
    void slotSubtaskChanged(const QString & subtask);

  private:
    void init();
    void destroy();
  };

#endif // CQOPTIMIZATIONWIDGET_H
