// Begin CVS Header
//   $Source: /Volumes/Home/Users/shoops/cvs/copasi_dev/copasi/UI/CQOptimizationWidget.h,v $
//   $Revision: 1.13 $
//   $Name:  $
//   $Author: shoops $
//   $Date: 2008/12/18 19:56:51 $
// End CVS Header

// Copyright (C) 2008 by Pedro Mendes, Virginia Tech Intellectual
// Properties, Inc., EML Research, gGmbH, University of Heidelberg,
// and The University of Manchester.
// All rights reserved.

#ifndef CQOPTIMIZATIONWIDGET_H
#define CQOPTIMIZATIONWIDGET_H

#include <qvariant.h>
//Added by qt3to4:
#include <Q3HBoxLayout>
#include <Q3GridLayout>
#include <QPixmap>
#include <QLabel>
#include <Q3VBoxLayout>

class CQFittingItemWidget;

#include <QtCore/QVariant>
#include <QtGui/QAction>
#include <QtGui/QApplication>
#include <Qt3Support/Q3ButtonGroup>
#include <QtGui/QCheckBox>
#include <QtGui/QComboBox>
#include <Qt3Support/Q3GridLayout>
#include <QtGui/QLabel>
#include <QtGui/QSpacerItem>
#include <QtGui/QTabWidget>
#include <Qt3Support/Q3VBoxLayout>
#include <QtGui/QWidget>
#include <map>
#include <string>
#include "CQExpressionMmlWidget.h"
#include "TaskWidget.h"

QT_BEGIN_NAMESPACE

class Ui_CQOptimizationWidget
  {
  public:
    Q3VBoxLayout *vboxLayout;
    Q3GridLayout *gridLayout;
    QCheckBox *mpCheckMaximize;
    CQExpressionMmlWidget *mpExpressionEMW;
    QLabel *mpLblExpression;
    QComboBox *mpBoxSubtask;
    QLabel *mpLblType;
    QSpacerItem *mpSpacer;
    QSpacerItem *mpSpacer_2;
    QTabWidget *mpTabWidget;
    QWidget *mpParametersPage;
    QWidget *mpConstraintsPage;

    void setupUi(TaskWidget *CQOptimizationWidget)
    {
      if (CQOptimizationWidget->objectName().isEmpty())
        CQOptimizationWidget->setObjectName(QString::fromUtf8("CQOptimizationWidget"));
      CQOptimizationWidget->resize(529, 295);
      QSizePolicy sizePolicy(static_cast<QSizePolicy::Policy>(5), static_cast<QSizePolicy::Policy>(5));
      sizePolicy.setHorizontalStretch(0);
      sizePolicy.setVerticalStretch(0);
      sizePolicy.setHeightForWidth(CQOptimizationWidget->sizePolicy().hasHeightForWidth());
      CQOptimizationWidget->setSizePolicy(sizePolicy);
      CQOptimizationWidget->setMinimumSize(QSize(0, 0));
      vboxLayout = new Q3VBoxLayout(CQOptimizationWidget);
      vboxLayout->setSpacing(6);
      vboxLayout->setMargin(11);
      vboxLayout->setObjectName(QString::fromUtf8("vboxLayout"));
      gridLayout = new Q3GridLayout(1, 1);
      gridLayout->setSpacing(6);
      gridLayout->setObjectName(QString::fromUtf8("gridLayout"));
      mpCheckMaximize = new QCheckBox(CQOptimizationWidget);
      mpCheckMaximize->setObjectName(QString::fromUtf8("mpCheckMaximize"));

      gridLayout->addWidget(mpCheckMaximize, 1, 1, 1, 1);

      mpExpressionEMW = new CQExpressionMmlWidget(CQOptimizationWidget);
      mpExpressionEMW->setObjectName(QString::fromUtf8("mpExpressionEMW"));
      mpExpressionEMW->setMinimumSize(QSize(420, 70));

      gridLayout->addWidget(mpExpressionEMW, 0, 1, 1, 2);

      mpLblExpression = new QLabel(CQOptimizationWidget);
      mpLblExpression->setObjectName(QString::fromUtf8("mpLblExpression"));
      sizePolicy.setHeightForWidth(mpLblExpression->sizePolicy().hasHeightForWidth());
      mpLblExpression->setSizePolicy(sizePolicy);
      mpLblExpression->setAlignment(Qt::AlignTop | Qt::AlignRight);
      mpLblExpression->setWordWrap(false);

      gridLayout->addWidget(mpLblExpression, 0, 0, 1, 1);

      mpBoxSubtask = new QComboBox(CQOptimizationWidget);
      mpBoxSubtask->setObjectName(QString::fromUtf8("mpBoxSubtask"));

      gridLayout->addWidget(mpBoxSubtask, 2, 1, 1, 1);

      mpLblType = new QLabel(CQOptimizationWidget);
      mpLblType->setObjectName(QString::fromUtf8("mpLblType"));
      sizePolicy.setHeightForWidth(mpLblType->sizePolicy().hasHeightForWidth());
      mpLblType->setSizePolicy(sizePolicy);
      mpLblType->setAlignment(Qt::AlignTop | Qt::AlignRight);
      mpLblType->setWordWrap(false);

      gridLayout->addWidget(mpLblType, 2, 0, 1, 1);

      mpSpacer = new QSpacerItem(250, 20, QSizePolicy::Expanding, QSizePolicy::Minimum);

      gridLayout->addItem(mpSpacer, 2, 2, 1, 1);

      mpSpacer_2 = new QSpacerItem(250, 20, QSizePolicy::Expanding, QSizePolicy::Minimum);

      gridLayout->addItem(mpSpacer_2, 1, 2, 1, 1);

      vboxLayout->addLayout(gridLayout);

      mpTabWidget = new QTabWidget(CQOptimizationWidget);
      mpTabWidget->setObjectName(QString::fromUtf8("mpTabWidget"));
      QSizePolicy sizePolicy1(static_cast<QSizePolicy::Policy>(7), static_cast<QSizePolicy::Policy>(7));
      sizePolicy1.setHorizontalStretch(0);
      sizePolicy1.setVerticalStretch(0);
      sizePolicy1.setHeightForWidth(mpTabWidget->sizePolicy().hasHeightForWidth());
      mpTabWidget->setSizePolicy(sizePolicy1);
      mpParametersPage = new QWidget();
      mpParametersPage->setObjectName(QString::fromUtf8("mpParametersPage"));
      mpTabWidget->addTab(mpParametersPage, QString());
      mpConstraintsPage = new QWidget();
      mpConstraintsPage->setObjectName(QString::fromUtf8("mpConstraintsPage"));
      mpTabWidget->addTab(mpConstraintsPage, QString());

      vboxLayout->addWidget(mpTabWidget);

      QWidget::setTabOrder(mpBoxSubtask, mpTabWidget);

      retranslateUi(CQOptimizationWidget);
      QObject::connect(mpTabWidget, SIGNAL(currentChanged(QWidget*)), CQOptimizationWidget, SLOT(slotPageChange(QWidget*)));
      QObject::connect(mpBoxSubtask, SIGNAL(activated(QString)), CQOptimizationWidget, SLOT(slotSubtaskChanged(QString)));

      QMetaObject::connectSlotsByName(CQOptimizationWidget);
    } // setupUi

    void retranslateUi(TaskWidget *CQOptimizationWidget)
    {
      CQOptimizationWidget->setCaption(QApplication::translate("CQOptimizationWidget", "Optimization", 0, QApplication::UnicodeUTF8));
      mpCheckMaximize->setText(QApplication::translate("CQOptimizationWidget", "maximize", 0, QApplication::UnicodeUTF8));
      mpLblExpression->setText(QApplication::translate("CQOptimizationWidget", "Expression", 0, QApplication::UnicodeUTF8));
      mpLblType->setText(QApplication::translate("CQOptimizationWidget", "Subtask", 0, QApplication::UnicodeUTF8));
      mpTabWidget->setTabText(mpTabWidget->indexOf(mpParametersPage), QApplication::translate("CQOptimizationWidget", "Parameters (0)", 0, QApplication::UnicodeUTF8));
      mpTabWidget->setTabText(mpTabWidget->indexOf(mpConstraintsPage), QApplication::translate("CQOptimizationWidget", "Constraints (0)", 0, QApplication::UnicodeUTF8));
      Q_UNUSED(CQOptimizationWidget);
    } // retranslateUi

  protected:
    enum IconID
    {
      image0_ID,
      unknown_ID
    };
    static QPixmap qt_get_icon(IconID id)
    {
      static const unsigned char image0_data[] =
        {
          0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
          0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x16,
          0x08, 0x06, 0x00, 0x00, 0x00, 0xc4, 0xb4, 0x6c, 0x3b, 0x00, 0x00, 0x03,
          0x2f, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xb5, 0x95, 0x31, 0x48, 0x25,
          0x47, 0x18, 0xc7, 0x7f, 0x1e, 0x5b, 0x7c, 0x03, 0x0a, 0xb3, 0xe0, 0xc1,
          0x2e, 0x5c, 0xe0, 0x09, 0x27, 0xf8, 0x8a, 0x14, 0xaf, 0x7d, 0x87, 0xc5,
          0x59, 0x0a, 0xc2, 0x9d, 0x60, 0x13, 0xb0, 0x49, 0x7b, 0x84, 0x40, 0x08,
          0xa9, 0x12, 0x0e, 0x12, 0x48, 0x93, 0x83, 0x54, 0xa6, 0xb1, 0x48, 0x21,
          0x31, 0xcd, 0xe5, 0xa5, 0x10, 0xb4, 0xf0, 0x30, 0x81, 0xf0, 0x7c, 0x8d,
          0x44, 0x21, 0xc2, 0x06, 0x3c, 0xd8, 0x57, 0x08, 0xbb, 0xe0, 0x83, 0x19,
          0x38, 0x61, 0x3e, 0xc8, 0xc0, 0xa5, 0x58, 0x8d, 0xd1, 0xdc, 0x33, 0x45,
          0x2e, 0x5f, 0x33, 0xbb, 0x33, 0xc3, 0x6f, 0x7f, 0xfb, 0xed, 0x7f, 0xd8,
          0x89, 0xfe, 0x7e, 0x9f, 0xcb, 0x7a, 0xd0, 0x7d, 0xf0, 0x9a, 0xb7, 0x50,
          0xfd, 0xfd, 0xfe, 0xc4, 0xc4, 0x25, 0x78, 0x7b, 0x6b, 0xfb, 0x75, 0x7b,
          0xae, 0x8d, 0xf7, 0x9e, 0x6a, 0x54, 0xe1, 0xbc, 0xc3, 0x60, 0x08, 0x84,
          0x5b, 0x47, 0xe7, 0x1d, 0xc5, 0x49, 0xc1, 0xe0, 0x60, 0x00, 0xf1, 0x0a,
          0x9e, 0x5c, 0x9a, 0x3e, 0xff, 0xee, 0x39, 0x69, 0x0e, 0xf9, 0x2c, 0xb4,
          0xa2, 0x5e, 0x2c, 0x3b, 0x48, 0x04, 0x70, 0x98, 0x44, 0x80, 0x70, 0x35,
          0xcf, 0xd5, 0x7d, 0x71, 0x22, 0xf0, 0xad, 0x65, 0xf0, 0xc2, 0x5f, 0x07,
          0x03, 0xd4, 0xa3, 0x9a, 0xf4, 0x1d, 0x28, 0x47, 0x3f, 0xa0, 0xaf, 0x4a,
          0x42, 0x54, 0x8c, 0x81, 0xf0, 0x07, 0xf8, 0x5a, 0xa8, 0x6a, 0x45, 0x10,
          0xcc, 0x34, 0xcc, 0xcc, 0x82, 0x88, 0x42, 0x04, 0x05, 0x64, 0x0a, 0xd2,
          0xbb, 0xca, 0xdf, 0xeb, 0x2f, 0xb0, 0x1b, 0x39, 0x02, 0x1e, 0x7d, 0x55,
          0x13, 0xa2, 0xc7, 0x4c, 0x59, 0xca, 0x43, 0xd8, 0xdb, 0x51, 0x0e, 0x0f,
          0x6a, 0x24, 0x01, 0x8d, 0x8a, 0x24, 0x96, 0xec, 0xbe, 0xb0, 0xb8, 0x92,
          0xd2, 0x9d, 0x0f, 0x08, 0xcd, 0xbc, 0x9d, 0x14, 0x9a, 0xc7, 0xdc, 0x00,
          0x57, 0xbe, 0xa2, 0x83, 0x12, 0x62, 0x85, 0x31, 0x96, 0xfd, 0x5d, 0x65,
          0x73, 0xdd, 0x43, 0x04, 0x6b, 0x85, 0xfc, 0xbe, 0x20, 0x02, 0xd5, 0x50,
          0x19, 0xbe, 0x54, 0xbe, 0xf9, 0xa2, 0xa4, 0x5e, 0xcd, 0x58, 0x5e, 0x05,
          0x91, 0x06, 0xfe, 0x46, 0x63, 0x93, 0x18, 0x40, 0x31, 0x53, 0x42, 0x79,
          0x08, 0xbd, 0x0b, 0xe8, 0xe2, 0xa3, 0x8c, 0x87, 0x4b, 0x90, 0xe7, 0x06,
          0x92, 0x80, 0x6a, 0xca, 0xde, 0x4e, 0xa0, 0xb7, 0xee, 0xe9, 0x6d, 0x0c,
          0xc9, 0xb2, 0x36, 0x0b, 0x8f, 0x0d, 0x92, 0xe8, 0x35, 0xe3, 0x3b, 0x97,
          0x17, 0x21, 0x06, 0x40, 0x08, 0x01, 0xb6, 0xb7, 0x3c, 0x1a, 0x95, 0xc5,
          0x47, 0x19, 0xcb, 0xef, 0x43, 0x9a, 0x2b, 0x9a, 0x54, 0xf8, 0x33, 0xc3,
          0xf6, 0x8f, 0x8e, 0xc5, 0x95, 0x94, 0xf7, 0x3e, 0xb0, 0x90, 0x08, 0x9b,
          0x1b, 0x15, 0x3a, 0xfa, 0x67, 0xe4, 0xae, 0x1b, 0x27, 0x0e, 0x5f, 0xa7,
          0x14, 0x47, 0x25, 0xd6, 0x36, 0xa6, 0x22, 0x8d, 0x85, 0x3f, 0xcf, 0x59,
          0xfb, 0xca, 0x51, 0x1e, 0x7b, 0xdc, 0x19, 0x3c, 0xf9, 0x24, 0x67, 0xb0,
          0xeb, 0x29, 0x7f, 0x57, 0x8a, 0x22, 0x20, 0x72, 0x1d, 0x7c, 0xcd, 0xd8,
          0x24, 0x42, 0x55, 0x3b, 0x48, 0x20, 0x6f, 0x41, 0x7a, 0x17, 0x14, 0xc5,
          0xfb, 0x94, 0xb5, 0xcf, 0x2b, 0x8a, 0x63, 0x8f, 0x58, 0xa1, 0x3b, 0x9f,
          0xc2, 0xa4, 0xa3, 0xdd, 0xb1, 0x68, 0x54, 0xaa, 0x53, 0xd0, 0x38, 0x06,
          0xdc, 0xf4, 0x18, 0x04, 0x81, 0xa8, 0xd8, 0xc9, 0x8b, 0x8f, 0x72, 0x96,
          0xb3, 0xf6, 0xa5, 0xa3, 0x3c, 0x6e, 0xe2, 0x65, 0x27, 0x85, 0xfc, 0x1e,
          0xa4, 0xd2, 0xbc, 0xaf, 0x24, 0x82, 0x46, 0x90, 0x1b, 0xca, 0x37, 0x7a,
          0x0c, 0x66, 0x1a, 0x48, 0x2c, 0xc5, 0x50, 0x51, 0x35, 0xec, 0xbd, 0x08,
          0x8d, 0xe9, 0xa4, 0x90, 0xdd, 0xb3, 0x0c, 0x87, 0x35, 0xcf, 0x9e, 0x56,
          0x14, 0x87, 0x29, 0x55, 0xa9, 0x68, 0x54, 0x66, 0x5a, 0x06, 0x6e, 0x4f,
          0x85, 0xa3, 0x3d, 0x0b, 0xad, 0x96, 0x50, 0x0f, 0x95, 0xbd, 0x9d, 0xc0,
          0xf2, 0x6a, 0x8a, 0x3b, 0x53, 0xba, 0x0f, 0x53, 0xf2, 0x0c, 0x9e, 0x3d,
          0x85, 0xe1, 0xcb, 0x9a, 0x4f, 0x3f, 0xac, 0xd0, 0x73, 0x4f, 0x96, 0x59,
          0xda, 0x1d, 0xa8, 0xea, 0x5b, 0x7a, 0x0c, 0x02, 0xa2, 0x2c, 0xae, 0x08,
          0x1a, 0x95, 0xde, 0xba, 0x67, 0x6f, 0xc7, 0xf1, 0xe4, 0xa3, 0x9c, 0xce,
          0x7c, 0xa0, 0xd5, 0x09, 0x7c, 0xfc, 0x59, 0x4e, 0x96, 0x59, 0xfc, 0xa8,
          0x86, 0x08, 0xdd, 0x25, 0xcb, 0xcc, 0xdc, 0xbf, 0xe6, 0x38, 0x40, 0x14,
          0xba, 0xf3, 0x50, 0x9f, 0x66, 0xf4, 0x36, 0x86, 0x6c, 0x7e, 0x0d, 0x83,
          0x5d, 0x4f, 0xfb, 0x5d, 0x0b, 0x09, 0x54, 0xa5, 0xc3, 0x8f, 0xb4, 0xe9,
          0x2d, 0x4a, 0xf1, 0x8b, 0x52, 0x1c, 0x19, 0xac, 0x8c, 0x39, 0x79, 0x6e,
          0xe4, 0x2e, 0xce, 0xbe, 0x22, 0xc0, 0xf2, 0xaa, 0x90, 0x65, 0x6d, 0x7a,
          0xdf, 0x57, 0x14, 0xc7, 0x4a, 0x71, 0x34, 0x6c, 0x76, 0x47, 0xb0, 0xd3,
          0x96, 0x85, 0xc7, 0x96, 0x5f, 0x7f, 0x52, 0xaa, 0x73, 0x8f, 0xc6, 0x94,
          0x7a, 0x34, 0xc6, 0xb8, 0x38, 0x29, 0x28, 0x4a, 0x41, 0xd2, 0xc6, 0x44,
          0x12, 0x58, 0x58, 0x0a, 0x74, 0xe7, 0x73, 0x8a, 0x22, 0x50, 0x9d, 0x36,
          0xd0, 0xbc, 0x65, 0x68, 0x77, 0x60, 0x66, 0x0e, 0x8a, 0x25, 0x03, 0x31,
          0x87, 0xc4, 0x51, 0xfe, 0xc6, 0x9b, 0xc1, 0x83, 0x83, 0x01, 0xac, 0x0b,
          0x69, 0xde, 0x44, 0x4a, 0xd5, 0x37, 0x79, 0xc3, 0x23, 0x17, 0xbb, 0x24,
          0x81, 0xf2, 0xd4, 0x37, 0xb9, 0xdd, 0x6a, 0xda, 0xe1, 0x3d, 0x14, 0x87,
          0x4a, 0x55, 0x8f, 0x31, 0x26, 0xc2, 0xe0, 0xe7, 0xcb, 0xc5, 0x9b, 0xe3,
          0xb8, 0x1a, 0xbf, 0x7e, 0x67, 0xec, 0xca, 0x7f, 0xac, 0x3b, 0xd0, 0xfc,
          0xa3, 0xfe, 0x17, 0xf0, 0xdb, 0x86, 0xf7, 0xf7, 0xfb, 0x13, 0x7f, 0x02,
          0x08, 0xc2, 0x9b, 0xb2, 0xc7, 0x6e, 0x38, 0x7f, 0x00, 0x00, 0x00, 0x00,
          0x49, 0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
        };

      switch (id)
        {
        case image0_ID: {QImage img; img.loadFromData(image0_data, sizeof(image0_data), "PNG"); return QPixmap::fromImage(img);}
        default: return QPixmap();
        } // switch
    } // icon
  };

namespace Ui
  {
  class CQOptimizationWidget: public Ui_CQOptimizationWidget {};
} // namespace Ui

QT_END_NAMESPACE

class CQOptimizationWidget : public TaskWidget, public Ui::CQOptimizationWidget
  {
    Q_OBJECT

  public:
    CQOptimizationWidget(QWidget* parent = 0, const char* name = 0);
    ~CQOptimizationWidget();

    virtual bool runTask();
    bool isSteadyState();

  public slots:
    void slotParameterNumberChanged(int number);
    void slotConstraintNumberChanged(int number);
    virtual void slotEditExpression();

  protected:
    CQFittingItemWidget * mpCurrentList;
    CQFittingItemWidget * mpConstraints;
    CQFittingItemWidget * mpParameters;
    QColor mChangedColor;
    QColor mSavedColor;
    bool mTypeChanged;
    Q3HBoxLayout * mpConstraintPageLayout;
    Q3HBoxLayout * mpParameterPageLayout;
    std::map< std::string, C_INT32 > mSubtaskMap;

    virtual bool saveTask();
    virtual bool loadTask();
    virtual CCopasiMethod * createMethod(const CCopasiMethod::SubType & type);

  protected slots:
    virtual void languageChange();

    void slotPageChange(QWidget * currentPage);
    void slotExpressionValid(bool valid);
    void slotSubtaskChanged(const QString & subtask);

  private:
    void init();
    void destroy();
  };

#endif // CQOPTIMIZATIONWIDGET_H
