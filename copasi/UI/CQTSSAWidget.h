// Begin CVS Header
//   $Source: /Volumes/Home/Users/shoops/cvs/copasi_dev/copasi/UI/CQTSSAWidget.h,v $
//   $Revision: 1.9 $
//   $Name:  $
//   $Author: gauges $
//   $Date: 2009/02/18 20:48:27 $
// End CVS Header

// Copyright (C) 2008 by Pedro Mendes, Virginia Tech Intellectual
// Properties, Inc., EML Research, gGmbH, University of Heidelberg,
// and The University of Manchester.
// All rights reserved.

#ifndef CQTSSAWIDGET_H
#define CQTSSAWIDGET_H

#include <qvariant.h>
#include "TaskWidget.h"

class CTSSAProblem;
class CQValidatorInt;
class CQValidatorDouble;

#include <QtCore/QVariant>
#include <QtGui/QAction>
#include <QtGui/QApplication>
#include <QtGui/QButtonGroup>
#include <QtGui/QCheckBox>
#include <QtGui/QFrame>
#include <QtGui/QGridLayout>
#include <QtGui/QLabel>
#include <QtGui/QLineEdit>
#include <QtGui/QVBoxLayout>
#include "TaskWidget.h"

class Ui_CQTSSAWidget
  {
  public:
    QVBoxLayout *vboxLayout;
    QGridLayout *gridLayout;
    QLineEdit *mpEditIntervals;
    QLineEdit *mpEditIntervalSize;
    QLabel *mpLbDeuflTol;
    QLineEdit *mpEditDuration;
    QLabel *mpLblIntervals;
    QLineEdit *mpEditDeufelTol;
    QLabel *mpLblDuration;
    QLabel *mpLblIntervalSize;
    QCheckBox *mpCheckSave;
    QFrame *line1;

    void setupUi(TaskWidget *CQTSSAWidget)
    {
      if (CQTSSAWidget->objectName().isEmpty())
        CQTSSAWidget->setObjectName(QString::fromUtf8("CQTSSAWidget"));
      CQTSSAWidget->resize(363, 141);
      vboxLayout = new QVBoxLayout(CQTSSAWidget);
      vboxLayout->setSpacing(6);
      vboxLayout->setMargin(11);
      vboxLayout->setObjectName(QString::fromUtf8("vboxLayout"));
      gridLayout = new QGridLayout();
      gridLayout->setSpacing(6);
      gridLayout->setObjectName(QString::fromUtf8("gridLayout"));
      mpEditIntervals = new QLineEdit(CQTSSAWidget);
      mpEditIntervals->setObjectName(QString::fromUtf8("mpEditIntervals"));

      gridLayout->addWidget(mpEditIntervals, 1, 3, 1, 1);

      mpEditIntervalSize = new QLineEdit(CQTSSAWidget);
      mpEditIntervalSize->setObjectName(QString::fromUtf8("mpEditIntervalSize"));

      gridLayout->addWidget(mpEditIntervalSize, 1, 1, 1, 1);

      mpLbDeuflTol = new QLabel(CQTSSAWidget);
      mpLbDeuflTol->setObjectName(QString::fromUtf8("mpLbDeuflTol"));
      mpLbDeuflTol->setAlignment(Qt::AlignVCenter | Qt::AlignRight);
      mpLbDeuflTol->setWordWrap(false);

      gridLayout->addWidget(mpLbDeuflTol, 2, 0, 1, 1);

      mpEditDuration = new QLineEdit(CQTSSAWidget);
      mpEditDuration->setObjectName(QString::fromUtf8("mpEditDuration"));

      gridLayout->addWidget(mpEditDuration, 0, 1, 1, 1);

      mpLblIntervals = new QLabel(CQTSSAWidget);
      mpLblIntervals->setObjectName(QString::fromUtf8("mpLblIntervals"));
      mpLblIntervals->setAlignment(Qt::AlignVCenter | Qt::AlignRight);
      mpLblIntervals->setWordWrap(false);

      gridLayout->addWidget(mpLblIntervals, 1, 2, 1, 1);

      mpEditDeufelTol = new QLineEdit(CQTSSAWidget);
      mpEditDeufelTol->setObjectName(QString::fromUtf8("mpEditDeufelTol"));

      gridLayout->addWidget(mpEditDeufelTol, 2, 1, 1, 1);

      mpLblDuration = new QLabel(CQTSSAWidget);
      mpLblDuration->setObjectName(QString::fromUtf8("mpLblDuration"));
      mpLblDuration->setAlignment(Qt::AlignVCenter | Qt::AlignRight);
      mpLblDuration->setWordWrap(false);

      gridLayout->addWidget(mpLblDuration, 0, 0, 1, 1);

      mpLblIntervalSize = new QLabel(CQTSSAWidget);
      mpLblIntervalSize->setObjectName(QString::fromUtf8("mpLblIntervalSize"));
      mpLblIntervalSize->setAlignment(Qt::AlignVCenter | Qt::AlignRight);
      mpLblIntervalSize->setWordWrap(false);

      gridLayout->addWidget(mpLblIntervalSize, 1, 0, 1, 1);

      mpCheckSave = new QCheckBox(CQTSSAWidget);
      mpCheckSave->setObjectName(QString::fromUtf8("mpCheckSave"));

      gridLayout->addWidget(mpCheckSave, 3, 1, 1, 2);

      vboxLayout->addLayout(gridLayout);

      line1 = new QFrame(CQTSSAWidget);
      line1->setObjectName(QString::fromUtf8("line1"));
      line1->setFrameShape(QFrame::HLine);
      line1->setFrameShadow(QFrame::Sunken);

      vboxLayout->addWidget(line1);

      QWidget::setTabOrder(mpEditDuration, mpEditIntervalSize);
      QWidget::setTabOrder(mpEditIntervalSize, mpEditIntervals);
      QWidget::setTabOrder(mpEditIntervals, mpEditDeufelTol);
      QWidget::setTabOrder(mpEditDeufelTol, mpCheckSave);

      retranslateUi(CQTSSAWidget);
      QObject::connect(mpEditDuration, SIGNAL(lostFocus()), CQTSSAWidget, SLOT(slotDuration()));
      QObject::connect(mpEditIntervalSize, SIGNAL(lostFocus()), CQTSSAWidget, SLOT(slotIntervalSize()));
      QObject::connect(mpEditIntervals, SIGNAL(lostFocus()), CQTSSAWidget, SLOT(slotIntervals()));

      QMetaObject::connectSlotsByName(CQTSSAWidget);
    } // setupUi

    void retranslateUi(TaskWidget *CQTSSAWidget)
    {
      CQTSSAWidget->setCaption(QApplication::translate("CQTSSAWidget", "Time Scale Separation Analysis", 0, QApplication::UnicodeUTF8));
      mpLbDeuflTol->setText(QApplication::translate("CQTSSAWidget", "Deuflhard Tolerance", 0, QApplication::UnicodeUTF8));
      mpLblIntervals->setText(QApplication::translate("CQTSSAWidget", "Intervals", 0, QApplication::UnicodeUTF8));
      mpLblDuration->setText(QApplication::translate("CQTSSAWidget", "Duration", 0, QApplication::UnicodeUTF8));
      mpLblIntervalSize->setText(QApplication::translate("CQTSSAWidget", "Interval Size", 0, QApplication::UnicodeUTF8));
      mpCheckSave->setText(QApplication::translate("CQTSSAWidget", "Save Result in Memory", 0, QApplication::UnicodeUTF8));
      Q_UNUSED(CQTSSAWidget);
    } // retranslateUi

  protected:
    enum IconID
    {
      image0_ID,
      unknown_ID
    };
    static QPixmap qt_get_icon(IconID id)
    {
      static const unsigned char image0_data[] =
        {
          0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
          0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x16,
          0x08, 0x06, 0x00, 0x00, 0x00, 0xc4, 0xb4, 0x6c, 0x3b, 0x00, 0x00, 0x03,
          0x2e, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xb5, 0x95, 0x31, 0x68, 0x1c,
          0x47, 0x14, 0x86, 0x3f, 0x89, 0x2d, 0xde, 0x80, 0x04, 0xb3, 0x20, 0xc3,
          0x2e, 0x38, 0x70, 0x07, 0x32, 0xf8, 0x0a, 0x17, 0xd7, 0x1e, 0xa8, 0xb0,
          0x4a, 0x81, 0xc0, 0x16, 0xa8, 0x09, 0xa8, 0x71, 0x6b, 0x42, 0x20, 0x84,
          0x54, 0x09, 0x86, 0x04, 0xd2, 0xc4, 0x90, 0x4a, 0x69, 0x54, 0xa4, 0x10,
          0x51, 0x1a, 0xe7, 0x5c, 0x18, 0xac, 0x42, 0xb6, 0x12, 0x30, 0xdc, 0x35,
          0x22, 0x12, 0x44, 0xb0, 0x01, 0x19, 0xf6, 0x0a, 0xc1, 0x2e, 0xe8, 0x60,
          0x06, 0x2c, 0x98, 0x07, 0x19, 0x70, 0x8a, 0x95, 0xa2, 0x48, 0xf1, 0x29,
          0x45, 0x9c, 0xd7, 0xcc, 0xee, 0xcc, 0xf0, 0xed, 0xb7, 0x6f, 0xff, 0x61,
          0xa7, 0x06, 0x83, 0x01, 0xe7, 0xd5, 0xeb, 0xf5, 0xde, 0xf2, 0x1e, 0x6a,
          0x30, 0x18, 0x4c, 0x4d, 0x9d, 0x83, 0x5f, 0xee, 0xbc, 0x7c, 0xdb, 0x9e,
          0x6f, 0xe3, 0xbd, 0xa7, 0xaa, 0x2b, 0x9c, 0x77, 0x18, 0x0c, 0x81, 0x70,
          0xed, 0xe8, 0xbc, 0xa3, 0x38, 0x2a, 0x18, 0xee, 0x0d, 0x21, 0x5e, 0xc0,
          0x93, 0x73, 0xd3, 0x27, 0x3f, 0x3c, 0x21, 0xcd, 0x21, 0x6f, 0x43, 0x2b,
          0xea, 0xd9, 0xb2, 0x83, 0x44, 0x00, 0x87, 0x49, 0x04, 0x08, 0x17, 0xf3,
          0x5c, 0xdc, 0x17, 0x47, 0x02, 0xdf, 0x5b, 0x86, 0x2f, 0xfc, 0x65, 0x30,
          0x40, 0xed, 0x6b, 0xd2, 0x0f, 0xa0, 0x1c, 0xff, 0x84, 0xbe, 0x29, 0x09,
          0x51, 0x31, 0x06, 0xc2, 0x1f, 0xe0, 0x6b, 0xa1, 0xaa, 0x15, 0x41, 0x30,
          0x73, 0xd0, 0xbe, 0x05, 0x22, 0x0a, 0x11, 0x14, 0x90, 0x59, 0x48, 0x6f,
          0x28, 0x7f, 0xaf, 0xbf, 0xc0, 0xae, 0x76, 0x84, 0x3b, 0x1e, 0x7d, 0x53,
          0x13, 0xa2, 0xc7, 0xcc, 0x5a, 0xca, 0x7d, 0xd8, 0xdd, 0x56, 0xf6, 0xf7,
          0x6a, 0x24, 0x01, 0x8d, 0x8a, 0x24, 0x96, 0x6c, 0x5e, 0x58, 0x5a, 0x4d,
          0xe9, 0x2d, 0x04, 0x84, 0x66, 0xde, 0xce, 0x08, 0xcd, 0x63, 0xae, 0x80,
          0x2b, 0x5f, 0xd1, 0x45, 0x09, 0xb1, 0xc2, 0x18, 0xcb, 0x60, 0x47, 0xd9,
          0xda, 0xf0, 0x10, 0xc1, 0x5a, 0x21, 0x9f, 0x17, 0x44, 0xa0, 0x1a, 0x29,
          0xa3, 0xd7, 0xca, 0x77, 0x5f, 0x95, 0xd4, 0x6b, 0x19, 0x2b, 0x6b, 0x20,
          0xd2, 0xc0, 0xdf, 0x69, 0x6c, 0x12, 0x03, 0x28, 0x66, 0x56, 0x28, 0xf7,
          0xa1, 0x7f, 0x06, 0x5d, 0xba, 0x97, 0x71, 0x77, 0x19, 0xf2, 0xdc, 0x40,
          0x12, 0x50, 0x4d, 0xd9, 0xdd, 0x0e, 0xf4, 0x37, 0x3c, 0xfd, 0xcd, 0x11,
          0x59, 0xd6, 0x61, 0xf1, 0xbe, 0x41, 0x12, 0xbd, 0x64, 0x3c, 0x7d, 0x7e,
          0x11, 0x62, 0x00, 0x84, 0x10, 0xe0, 0xf9, 0x33, 0x8f, 0x46, 0x65, 0xe9,
          0x5e, 0xc6, 0xca, 0x03, 0x48, 0x73, 0x45, 0x93, 0x0a, 0x7f, 0x62, 0x78,
          0xfe, 0xd4, 0xb1, 0xb4, 0x9a, 0xf2, 0xe1, 0x47, 0x16, 0x12, 0x61, 0x6b,
          0xb3, 0x42, 0xc7, 0xff, 0x8c, 0xdc, 0x65, 0xe3, 0xc4, 0xe1, 0xeb, 0x94,
          0xe2, 0xa0, 0xc4, 0xda, 0xc6, 0x54, 0xa4, 0xb1, 0xf0, 0xa7, 0x39, 0xeb,
          0xdf, 0x38, 0xca, 0x43, 0x8f, 0x3b, 0x81, 0x87, 0x9f, 0xe5, 0x0c, 0x77,
          0x3c, 0xe5, 0xef, 0x4a, 0x51, 0x04, 0x44, 0x2e, 0x83, 0x2f, 0x19, 0x9b,
          0x44, 0xa8, 0x6a, 0x07, 0x09, 0xe4, 0x2d, 0x48, 0x6f, 0x80, 0xa2, 0x78,
          0x9f, 0xb2, 0xfe, 0x65, 0x45, 0x71, 0xe8, 0x11, 0x2b, 0xf4, 0x16, 0x52,
          0x98, 0x71, 0x74, 0xba, 0x16, 0x8d, 0x4a, 0x75, 0x0c, 0x1a, 0x27, 0x80,
          0x9b, 0x1e, 0x83, 0x20, 0x10, 0x15, 0x3b, 0x73, 0xf6, 0x51, 0x4e, 0x72,
          0xd6, 0xbf, 0x76, 0x94, 0x87, 0x4d, 0xbc, 0xec, 0x8c, 0x90, 0xdf, 0x84,
          0x54, 0x9a, 0xf7, 0x95, 0x44, 0xd0, 0x08, 0x72, 0x45, 0xf9, 0x4a, 0x8f,
          0xc1, 0xcc, 0x01, 0x89, 0xa5, 0x18, 0x29, 0xaa, 0x86, 0xdd, 0x17, 0xa1,
          0x31, 0x9d, 0x11, 0xb2, 0x9b, 0x96, 0xd1, 0xa8, 0xe6, 0xf1, 0xa3, 0x8a,
          0x62, 0x3f, 0xa5, 0x2a, 0x15, 0x8d, 0x4a, 0xbb, 0x65, 0xe0, 0xfa, 0x54,
          0x38, 0x3a, 0xb7, 0xa0, 0xd5, 0x12, 0xea, 0x91, 0xb2, 0xbb, 0x1d, 0x58,
          0x59, 0x4b, 0x71, 0x27, 0x4a, 0xef, 0x6e, 0x4a, 0x9e, 0xc1, 0xe3, 0x47,
          0x30, 0x7a, 0x5d, 0xf3, 0xf9, 0xc7, 0x15, 0x7a, 0xea, 0xc9, 0x32, 0x4b,
          0xa7, 0x0b, 0x55, 0x7d, 0x4d, 0x8f, 0x41, 0x40, 0x94, 0xa5, 0x55, 0x41,
          0xa3, 0xd2, 0xdf, 0xf0, 0xec, 0x6e, 0x3b, 0x1e, 0x7e, 0x92, 0xd3, 0x5d,
          0x08, 0xb4, 0xba, 0x81, 0x4f, 0xbf, 0xc8, 0xc9, 0x32, 0x8b, 0x1f, 0xd7,
          0x10, 0xa1, 0xb7, 0x6c, 0x69, 0xdf, 0xfe, 0xd7, 0x1c, 0x07, 0x88, 0x42,
          0x6f, 0x01, 0xea, 0xe3, 0x8c, 0xfe, 0xe6, 0x88, 0xad, 0x6f, 0x61, 0xb8,
          0xe3, 0xe9, 0xdc, 0xb1, 0x90, 0x40, 0x55, 0x3a, 0xfc, 0x58, 0x9b, 0xde,
          0xa2, 0x14, 0xaf, 0x94, 0xe2, 0xc0, 0x60, 0x65, 0xc2, 0xc9, 0x73, 0x63,
          0x77, 0x76, 0xf6, 0x15, 0x01, 0x56, 0xd6, 0x84, 0x2c, 0xeb, 0xd0, 0xff,
          0xb1, 0xa2, 0x38, 0x54, 0x8a, 0x83, 0x51, 0xb3, 0x3b, 0x82, 0x9d, 0xb3,
          0x2c, 0xde, 0xb7, 0xfc, 0xfa, 0xb3, 0x52, 0x9d, 0x7a, 0x34, 0xa6, 0xd4,
          0xe3, 0x09, 0xc6, 0xc5, 0x51, 0x41, 0x51, 0x0a, 0x92, 0x36, 0x26, 0x92,
          0xc0, 0xe2, 0x72, 0xa0, 0xb7, 0x90, 0x53, 0x14, 0x81, 0xea, 0xb8, 0x81,
          0xe6, 0x2d, 0x43, 0xa7, 0x0b, 0xed, 0xdb, 0x50, 0x2c, 0x1b, 0x88, 0x39,
          0x24, 0x8e, 0xf2, 0x37, 0xde, 0x0d, 0x1e, 0xee, 0x0d, 0x61, 0x43, 0x48,
          0xf3, 0x26, 0x52, 0xaa, 0xbe, 0xc9, 0x1b, 0x1e, 0x39, 0xdb, 0x25, 0x09,
          0x94, 0xc7, 0xbe, 0xc9, 0xed, 0xb3, 0xa6, 0x1d, 0xde, 0x43, 0xb1, 0xaf,
          0x54, 0xf5, 0x04, 0x63, 0x22, 0x0c, 0x7f, 0x39, 0x5f, 0xbc, 0x3a, 0x4e,
          0xaa, 0xc9, 0xeb, 0xd3, 0x13, 0x57, 0xfe, 0x63, 0x4d, 0x43, 0xf3, 0x8f,
          0xfa, 0x5f, 0xc0, 0xef, 0x1b, 0x3e, 0x18, 0x0c, 0xa6, 0xfe, 0x04, 0x09,
          0x39, 0x9b, 0xe1, 0x59, 0xe5, 0xea, 0x28, 0x00, 0x00, 0x00, 0x00, 0x49,
          0x45, 0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
        };

      switch (id)
        {
        case image0_ID: {QImage img; img.loadFromData(image0_data, sizeof(image0_data), "PNG"); return QPixmap::fromImage(img);}
        default: return QPixmap();
        } // switch
    } // icon
  };

namespace Ui
  {
  class CQTSSAWidget: public Ui_CQTSSAWidget {};
} // namespace Ui

class CQTSSAWidget : public TaskWidget, public Ui::CQTSSAWidget
  {
    Q_OBJECT

  public:
    CQTSSAWidget(QWidget* parent = 0, const char* name = 0);
    ~CQTSSAWidget();

    virtual bool runTask();

  public slots:
    void slotDuration();
    void slotIntervalSize();
    void slotIntervals();
    virtual void disableDeuflhard(int);

  protected:
    virtual bool saveTask();
    virtual bool loadTask();
    virtual CCopasiMethod * createMethod(const CCopasiMethod::SubType & type);

  protected slots:
    virtual void languageChange();

  private:
    CTSSAProblem * mpTSSAProblem;
    CQValidatorDouble * mpValidatorDuration;
    CQValidatorDouble * mpValidatorIntervalSize;
    CQValidatorDouble * mpValidatorDelay;
    CQValidatorInt * mpValidatorIntervals;

    void init();
    void destroy();
    void checkTimeSeries();
  };

#endif // CQTSSAWIDGET_H
