// Begin CVS Header
//   $Source: /Volumes/Home/Users/shoops/cvs/copasi_dev/copasi/UI/CQEventWidget1.h,v $
//   $Revision: 1.7 $
//   $Name:  $
//   $Author: gauges $
//   $Date: 2009/02/18 20:46:37 $
// End CVS Header

// Copyright (C) 2008 by Pedro Mendes, Virginia Tech Intellectual
// Properties, Inc., EML Research, gGmbH, University of Heidelberg,
// and The University of Manchester.
// All rights reserved.

#ifndef CQEVENTWIDGET1_H
#define CQEVENTWIDGET1_H

#include <qvariant.h>
//Added by qt3to4:
#include <Q3HBoxLayout>
#include <Q3GridLayout>
#include <Q3Frame>
#include <QPixmap>
#include <QLabel>
#include <Q3VBoxLayout>

class CQExpressionWidget;
class CCompartment;
class CExpression;
class CEvent;

#include <Qt3Support/Q3ListBox>
#include <QtCore/QVariant>
#include <QtGui/QAction>
#include <QtGui/QApplication>
#include <Qt3Support/Q3ButtonGroup>
#include <QtGui/QCheckBox>
#include <Qt3Support/Q3Frame>
#include <Qt3Support/Q3GridLayout>
#include <Qt3Support/Q3HBoxLayout>
#include <QtGui/QLabel>
#include <QtGui/QPushButton>
#include <QtGui/QSpacerItem>
#include <QtGui/QToolButton>
#include <Qt3Support/Q3VBoxLayout>
#include <string>
#include <vector>
#include "CQExpressionMmlWidget.h"
#include "MyLineEdit.h"
#include "copasiWidget.h"

class Ui_CQEventWidget1
  {
  public:
    Q3VBoxLayout *vboxLayout;
    Q3GridLayout *gridLayout;
    QLabel *mpLabelDelay;
    MyLineEdit *mpLineEditName;
    CQExpressionMmlWidget *mpExpressionDelay;
    CQExpressionMmlWidget *mpExpressionTrigger;
    QLabel *mpLabelEventName;
    QLabel *mpLabelTrigger;
    QCheckBox *mpCheckBoxDelay;
    Q3Frame *mpLine1;
    Q3GridLayout *gridLayout1;
    Q3HBoxLayout *hboxLayout;
    Q3ListBox *mpLBTarget;
    Q3VBoxLayout *vboxLayout1;
    QToolButton *mpBtnSelectObject;
    QToolButton *mpBtnAddTarget;
    QToolButton *mpBtnDeleteTarget;
    QSpacerItem *spacerTargetIcons;
    CQExpressionMmlWidget *mpExpressionEA;
    Q3HBoxLayout *hboxLayout1;
    QLabel *mpLabelTarget;
    QSpacerItem *spacerTarget;
    Q3HBoxLayout *hboxLayout2;
    QLabel *mpLabelEA;
    QSpacerItem *spacerExpression;
    Q3Frame *mpLine2;
    Q3HBoxLayout *hboxLayout3;
    QPushButton *mpBtnCommit;
    QPushButton *mpBtnRevert;
    QPushButton *mpBtnNew;
    QPushButton *mpBtnDelete;

    void setupUi(CopasiWidget *CQEventWidget1)
    {
      if (CQEventWidget1->objectName().isEmpty())
        CQEventWidget1->setObjectName(QString::fromUtf8("CQEventWidget1"));
      CQEventWidget1->resize(513, 498);
      QSizePolicy sizePolicy(static_cast<QSizePolicy::Policy>(5), static_cast<QSizePolicy::Policy>(5));
      sizePolicy.setHorizontalStretch(0);
      sizePolicy.setVerticalStretch(0);
      sizePolicy.setHeightForWidth(CQEventWidget1->sizePolicy().hasHeightForWidth());
      CQEventWidget1->setSizePolicy(sizePolicy);
      vboxLayout = new Q3VBoxLayout(CQEventWidget1);
      vboxLayout->setSpacing(6);
      vboxLayout->setMargin(11);
      vboxLayout->setObjectName(QString::fromUtf8("vboxLayout"));
      gridLayout = new Q3GridLayout(1, 1);
      gridLayout->setSpacing(6);
      gridLayout->setObjectName(QString::fromUtf8("gridLayout"));
      mpLabelDelay = new QLabel(CQEventWidget1);
      mpLabelDelay->setObjectName(QString::fromUtf8("mpLabelDelay"));
      QSizePolicy sizePolicy1(static_cast<QSizePolicy::Policy>(5), static_cast<QSizePolicy::Policy>(1));
      sizePolicy1.setHorizontalStretch(0);
      sizePolicy1.setVerticalStretch(0);
      sizePolicy1.setHeightForWidth(mpLabelDelay->sizePolicy().hasHeightForWidth());
      mpLabelDelay->setSizePolicy(sizePolicy1);
      mpLabelDelay->setAlignment(Qt::AlignTop | Qt::AlignRight);
      mpLabelDelay->setWordWrap(false);

      gridLayout->addWidget(mpLabelDelay, 3, 0, 1, 1);

      mpLineEditName = new MyLineEdit(CQEventWidget1);
      mpLineEditName->setObjectName(QString::fromUtf8("mpLineEditName"));
      mpLineEditName->setMinimumSize(QSize(380, 20));
      mpLineEditName->setMaximumSize(QSize(32767, 32767));

      gridLayout->addWidget(mpLineEditName, 0, 1, 1, 1);

      mpExpressionDelay = new CQExpressionMmlWidget(CQEventWidget1);
      mpExpressionDelay->setObjectName(QString::fromUtf8("mpExpressionDelay"));
      mpExpressionDelay->setMinimumSize(QSize(380, 100));

      gridLayout->addWidget(mpExpressionDelay, 3, 1, 1, 1);

      mpExpressionTrigger = new CQExpressionMmlWidget(CQEventWidget1);
      mpExpressionTrigger->setObjectName(QString::fromUtf8("mpExpressionTrigger"));
      mpExpressionTrigger->setMinimumSize(QSize(380, 120));
      mpExpressionTrigger->setMaximumSize(QSize(32767, 32767));

      gridLayout->addWidget(mpExpressionTrigger, 1, 1, 1, 1);

      mpLabelEventName = new QLabel(CQEventWidget1);
      mpLabelEventName->setObjectName(QString::fromUtf8("mpLabelEventName"));
      sizePolicy1.setHeightForWidth(mpLabelEventName->sizePolicy().hasHeightForWidth());
      mpLabelEventName->setSizePolicy(sizePolicy1);
      mpLabelEventName->setAlignment(Qt::AlignVCenter | Qt::AlignRight);
      mpLabelEventName->setWordWrap(false);

      gridLayout->addWidget(mpLabelEventName, 0, 0, 1, 1);

      mpLabelTrigger = new QLabel(CQEventWidget1);
      mpLabelTrigger->setObjectName(QString::fromUtf8("mpLabelTrigger"));
      sizePolicy1.setHeightForWidth(mpLabelTrigger->sizePolicy().hasHeightForWidth());
      mpLabelTrigger->setSizePolicy(sizePolicy1);
      mpLabelTrigger->setAlignment(Qt::AlignTop | Qt::AlignRight);
      mpLabelTrigger->setWordWrap(false);

      gridLayout->addWidget(mpLabelTrigger, 1, 0, 1, 1);

      mpCheckBoxDelay = new QCheckBox(CQEventWidget1);
      mpCheckBoxDelay->setObjectName(QString::fromUtf8("mpCheckBoxDelay"));

      gridLayout->addWidget(mpCheckBoxDelay, 2, 0, 1, 2);

      vboxLayout->addLayout(gridLayout);

      mpLine1 = new Q3Frame(CQEventWidget1);
      mpLine1->setObjectName(QString::fromUtf8("mpLine1"));
      mpLine1->setFrameShape(Q3Frame::HLine);
      mpLine1->setFrameShadow(Q3Frame::Sunken);

      vboxLayout->addWidget(mpLine1);

      gridLayout1 = new Q3GridLayout(1, 1);
      gridLayout1->setSpacing(6);
      gridLayout1->setObjectName(QString::fromUtf8("gridLayout1"));
      hboxLayout = new Q3HBoxLayout();
      hboxLayout->setSpacing(6);
      hboxLayout->setObjectName(QString::fromUtf8("hboxLayout"));
      mpLBTarget = new Q3ListBox(CQEventWidget1);
      mpLBTarget->setObjectName(QString::fromUtf8("mpLBTarget"));

      hboxLayout->addWidget(mpLBTarget);

      vboxLayout1 = new Q3VBoxLayout();
      vboxLayout1->setSpacing(6);
      vboxLayout1->setObjectName(QString::fromUtf8("vboxLayout1"));
      mpBtnSelectObject = new QToolButton(CQEventWidget1);
      mpBtnSelectObject->setObjectName(QString::fromUtf8("mpBtnSelectObject"));
      mpBtnSelectObject->setMaximumSize(QSize(20, 20));
      const QIcon icon = qt_get_icon(image0_ID);
      mpBtnSelectObject->setIcon(icon);

      vboxLayout1->addWidget(mpBtnSelectObject);

      mpBtnAddTarget = new QToolButton(CQEventWidget1);
      mpBtnAddTarget->setObjectName(QString::fromUtf8("mpBtnAddTarget"));
      mpBtnAddTarget->setMaximumSize(QSize(20, 20));
      const QIcon icon1 = qt_get_icon(image1_ID);
      mpBtnAddTarget->setIcon(icon1);

      vboxLayout1->addWidget(mpBtnAddTarget);

      mpBtnDeleteTarget = new QToolButton(CQEventWidget1);
      mpBtnDeleteTarget->setObjectName(QString::fromUtf8("mpBtnDeleteTarget"));
      mpBtnDeleteTarget->setMaximumSize(QSize(20, 20));
      const QIcon icon2 = qt_get_icon(image2_ID);
      mpBtnDeleteTarget->setIcon(icon2);

      vboxLayout1->addWidget(mpBtnDeleteTarget);

      spacerTargetIcons = new QSpacerItem(20, 40, QSizePolicy::Minimum, QSizePolicy::Expanding);

      vboxLayout1->addItem(spacerTargetIcons);

      hboxLayout->addLayout(vboxLayout1);

      gridLayout1->addLayout(hboxLayout, 1, 0, 1, 1);

      mpExpressionEA = new CQExpressionMmlWidget(CQEventWidget1);
      mpExpressionEA->setObjectName(QString::fromUtf8("mpExpressionEA"));
      mpExpressionEA->setMinimumSize(QSize(300, 60));

      gridLayout1->addWidget(mpExpressionEA, 1, 1, 1, 1);

      hboxLayout1 = new Q3HBoxLayout();
      hboxLayout1->setSpacing(6);
      hboxLayout1->setObjectName(QString::fromUtf8("hboxLayout1"));
      mpLabelTarget = new QLabel(CQEventWidget1);
      mpLabelTarget->setObjectName(QString::fromUtf8("mpLabelTarget"));
      mpLabelTarget->setAlignment(Qt::AlignVCenter | Qt::AlignRight);
      mpLabelTarget->setWordWrap(false);

      hboxLayout1->addWidget(mpLabelTarget);

      spacerTarget = new QSpacerItem(40, 20, QSizePolicy::Expanding, QSizePolicy::Minimum);

      hboxLayout1->addItem(spacerTarget);

      gridLayout1->addLayout(hboxLayout1, 0, 0, 1, 1);

      hboxLayout2 = new Q3HBoxLayout();
      hboxLayout2->setSpacing(6);
      hboxLayout2->setObjectName(QString::fromUtf8("hboxLayout2"));
      mpLabelEA = new QLabel(CQEventWidget1);
      mpLabelEA->setObjectName(QString::fromUtf8("mpLabelEA"));
      mpLabelEA->setAlignment(Qt::AlignVCenter | Qt::AlignRight);
      mpLabelEA->setWordWrap(false);

      hboxLayout2->addWidget(mpLabelEA);

      spacerExpression = new QSpacerItem(40, 20, QSizePolicy::Expanding, QSizePolicy::Minimum);

      hboxLayout2->addItem(spacerExpression);

      gridLayout1->addLayout(hboxLayout2, 0, 1, 1, 1);

      vboxLayout->addLayout(gridLayout1);

      mpLine2 = new Q3Frame(CQEventWidget1);
      mpLine2->setObjectName(QString::fromUtf8("mpLine2"));
      mpLine2->setFrameShape(Q3Frame::HLine);
      mpLine2->setFrameShadow(Q3Frame::Sunken);

      vboxLayout->addWidget(mpLine2);

      hboxLayout3 = new Q3HBoxLayout();
      hboxLayout3->setSpacing(6);
      hboxLayout3->setObjectName(QString::fromUtf8("hboxLayout3"));
      mpBtnCommit = new QPushButton(CQEventWidget1);
      mpBtnCommit->setObjectName(QString::fromUtf8("mpBtnCommit"));

      hboxLayout3->addWidget(mpBtnCommit);

      mpBtnRevert = new QPushButton(CQEventWidget1);
      mpBtnRevert->setObjectName(QString::fromUtf8("mpBtnRevert"));

      hboxLayout3->addWidget(mpBtnRevert);

      mpBtnNew = new QPushButton(CQEventWidget1);
      mpBtnNew->setObjectName(QString::fromUtf8("mpBtnNew"));

      hboxLayout3->addWidget(mpBtnNew);

      mpBtnDelete = new QPushButton(CQEventWidget1);
      mpBtnDelete->setObjectName(QString::fromUtf8("mpBtnDelete"));

      hboxLayout3->addWidget(mpBtnDelete);

      vboxLayout->addLayout(hboxLayout3);

      QWidget::setTabOrder(mpBtnCommit, mpBtnRevert);
      QWidget::setTabOrder(mpBtnRevert, mpBtnNew);
      QWidget::setTabOrder(mpBtnNew, mpBtnDelete);

      retranslateUi(CQEventWidget1);
      QObject::connect(mpBtnCommit, SIGNAL(clicked()), CQEventWidget1, SLOT(slotBtnCommitClicked()));
      QObject::connect(mpBtnDelete, SIGNAL(clicked()), CQEventWidget1, SLOT(slotBtnDeleteClicked()));
      QObject::connect(mpBtnNew, SIGNAL(clicked()), CQEventWidget1, SLOT(slotBtnNewClicked()));
      QObject::connect(mpBtnRevert, SIGNAL(clicked()), CQEventWidget1, SLOT(slotBtnRevertClicked()));
      QObject::connect(mpBtnAddTarget, SIGNAL(clicked()), CQEventWidget1, SLOT(slotAddTarget()));
      QObject::connect(mpBtnDeleteTarget, SIGNAL(clicked()), CQEventWidget1, SLOT(slotDeleteTarget()));
      QObject::connect(mpBtnSelectObject, SIGNAL(clicked()), CQEventWidget1, SLOT(slotSelectObject()));
      QObject::connect(mpCheckBoxDelay, SIGNAL(toggled(bool)), CQEventWidget1, SLOT(slotApplyDelay(bool)));

      QMetaObject::connectSlotsByName(CQEventWidget1);
    } // setupUi

    void retranslateUi(CopasiWidget *CQEventWidget1)
    {
      CQEventWidget1->setCaption(QApplication::translate("CQEventWidget1", "Event Widget", 0, QApplication::UnicodeUTF8));
      mpLabelDelay->setText(QApplication::translate("CQEventWidget1", "Delay Expression", 0, QApplication::UnicodeUTF8));
      mpLabelEventName->setText(QApplication::translate("CQEventWidget1", "Event Name", 0, QApplication::UnicodeUTF8));
      mpLabelTrigger->setText(QApplication::translate("CQEventWidget1", "Condition Trigger", 0, QApplication::UnicodeUTF8));
      mpCheckBoxDelay->setText(QApplication::translate("CQEventWidget1", "enabled delay", 0, QApplication::UnicodeUTF8));
      mpBtnSelectObject->setText(QString());

#ifndef QT_NO_TOOLTIP
      mpBtnSelectObject->setProperty("toolTip", QVariant(QApplication::translate("CQEventWidget1", "edit target", 0, QApplication::UnicodeUTF8)));
#endif // QT_NO_TOOLTIP

      mpBtnAddTarget->setText(QString());

#ifndef QT_NO_TOOLTIP
      mpBtnAddTarget->setProperty("toolTip", QVariant(QApplication::translate("CQEventWidget1", "add target", 0, QApplication::UnicodeUTF8)));
#endif // QT_NO_TOOLTIP

      mpBtnDeleteTarget->setText(QString());

#ifndef QT_NO_TOOLTIP
      mpBtnDeleteTarget->setProperty("toolTip", QVariant(QApplication::translate("CQEventWidget1", "delete target", 0, QApplication::UnicodeUTF8)));
#endif // QT_NO_TOOLTIP

      mpLabelTarget->setText(QApplication::translate("CQEventWidget1", "Target", 0, QApplication::UnicodeUTF8));
      mpLabelEA->setText(QApplication::translate("CQEventWidget1", "Expression", 0, QApplication::UnicodeUTF8));
      mpBtnCommit->setText(QApplication::translate("CQEventWidget1", "Commit", 0, QApplication::UnicodeUTF8));
      mpBtnRevert->setText(QApplication::translate("CQEventWidget1", "Revert", 0, QApplication::UnicodeUTF8));
      mpBtnNew->setText(QApplication::translate("CQEventWidget1", "New", 0, QApplication::UnicodeUTF8));
      mpBtnDelete->setText(QApplication::translate("CQEventWidget1", "Delete", 0, QApplication::UnicodeUTF8));
      Q_UNUSED(CQEventWidget1);
    } // retranslateUi

  protected:
    enum IconID
    {
      image0_ID,
      image1_ID,
      image2_ID,
      image3_ID,
      unknown_ID
    };
    static QPixmap qt_get_icon(IconID id)
    {
      static const unsigned char image0_data[] =
        {
          0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
          0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
          0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x02,
          0x51, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0x8d, 0x93, 0xdb, 0x53, 0x52,
          0x51, 0x14, 0x87, 0x7f, 0x1b, 0x37, 0x17, 0xe3, 0x2e, 0x8e, 0x98, 0x97,
          0x22, 0x01, 0x51, 0xb0, 0xcb, 0x28, 0x8c, 0x3a, 0xa6, 0x65, 0x4d, 0x33,
          0xdd, 0xa6, 0x9e, 0x7d, 0xe9, 0xef, 0xeb, 0xc5, 0xe9, 0xb1, 0x97, 0xa6,
          0x51, 0x31, 0x72, 0x72, 0x86, 0xd1, 0x20, 0x06, 0x27, 0x27, 0xec, 0x88,
          0xe0, 0x81, 0x40, 0xe0, 0x40, 0x9c, 0xa3, 0x70, 0x56, 0x0f, 0x8d, 0x34,
          0x27, 0xa3, 0xda, 0x8f, 0x7b, 0xad, 0xef, 0x9b, 0xbd, 0xd6, 0xda, 0x8b,
          0xc5, 0x62, 0x31, 0xfc, 0xcf, 0x29, 0x88, 0x97, 0x49, 0x91, 0x55, 0xd8,
          0x6c, 0x7a, 0xd8, 0x9d, 0x59, 0x76, 0x7e, 0xcf, 0xff, 0x06, 0x7d, 0xd9,
          0x1f, 0x20, 0xe1, 0xa0, 0x81, 0x7c, 0xae, 0x89, 0x62, 0x51, 0x00, 0xd3,
          0x31, 0x78, 0xbd, 0x66, 0x3c, 0x7e, 0xf6, 0x2b, 0xa7, 0xab, 0x60, 0xfd,
          0xad, 0x99, 0xd2, 0xa9, 0x1c, 0x0c, 0x06, 0x8e, 0xc9, 0x29, 0x07, 0x96,
          0xee, 0x98, 0x30, 0x7c, 0xf5, 0x98, 0x01, 0x8a, 0x26, 0xef, 0x8f, 0x82,
          0xd5, 0x97, 0x7a, 0x3a, 0x3a, 0xaa, 0xc2, 0xeb, 0xb3, 0xe0, 0xc9, 0x73,
          0x99, 0x01, 0x95, 0xae, 0xaf, 0xd4, 0x08, 0x92, 0xbb, 0x0e, 0xfa, 0xf0,
          0xfe, 0x04, 0x92, 0xd4, 0xc4, 0x74, 0xd8, 0x89, 0xc5, 0x65, 0x89, 0x75,
          0x03, 0x2f, 0x08, 0x76, 0xe3, 0x26, 0xda, 0x8c, 0x0a, 0x30, 0x1a, 0x2d,
          0x58, 0x5c, 0xee, 0xc7, 0x74, 0xb8, 0xf2, 0x4f, 0x58, 0x23, 0xd8, 0x8a,
          0x89, 0xb0, 0x5a, 0x55, 0xcc, 0x2f, 0x38, 0xe0, 0x0f, 0x5c, 0x84, 0xbd,
          0x8d, 0x0c, 0x29, 0xcd, 0x1a, 0x94, 0x96, 0x04, 0xa6, 0xd7, 0xa3, 0xe0,
          0x9a, 0x65, 0x1d, 0xc1, 0xab, 0xd5, 0x0a, 0xa9, 0x44, 0x88, 0xcc, 0x8e,
          0xc2, 0x1f, 0xa8, 0x69, 0xe0, 0xa1, 0xbd, 0x75, 0x2a, 0xa5, 0x13, 0x48,
          0x89, 0x39, 0x54, 0x65, 0x05, 0x27, 0x44, 0x60, 0x1c, 0x18, 0xf6, 0x44,
          0x69, 0xe2, 0xe1, 0x0a, 0x78, 0xee, 0x90, 0xd3, 0xe1, 0xd7, 0x1c, 0x66,
          0xc2, 0x7e, 0x4c, 0x86, 0xea, 0x1d, 0x78, 0xbc, 0x16, 0x27, 0x31, 0x16,
          0xc5, 0x5e, 0x3a, 0x8b, 0xfc, 0x99, 0x05, 0xad, 0xc1, 0x29, 0xb8, 0x6f,
          0x78, 0xe0, 0xeb, 0xb7, 0xe2, 0xb4, 0x94, 0xc1, 0x51, 0x72, 0x1b, 0x7d,
          0x87, 0x19, 0xf0, 0x5a, 0x59, 0xc4, 0x40, 0xdf, 0x19, 0x16, 0x96, 0xf4,
          0x1d, 0x78, 0xac, 0xbc, 0x45, 0xc2, 0xc6, 0x6b, 0x64, 0x04, 0xa0, 0x7d,
          0x65, 0x1e, 0x9e, 0xd0, 0x2d, 0x18, 0x02, 0x63, 0x9d, 0x78, 0x9b, 0x19,
          0xe9, 0x58, 0x4e, 0xc0, 0x5e, 0xd6, 0x81, 0xab, 0x6d, 0x05, 0x0e, 0xab,
          0xaa, 0xa9, 0xb7, 0x94, 0x58, 0xc7, 0x27, 0xc1, 0x08, 0x43, 0xe8, 0x01,
          0x46, 0xef, 0x47, 0x2e, 0xf4, 0x23, 0xba, 0x16, 0x47, 0x51, 0x54, 0xe0,
          0x33, 0xb9, 0xc0, 0x0d, 0x66, 0x2b, 0xc4, 0x92, 0xd0, 0x09, 0x06, 0x75,
          0x7b, 0x94, 0x3a, 0x29, 0x20, 0xab, 0x8b, 0x20, 0x12, 0xf0, 0x6b, 0xc0,
          0x6a, 0x2a, 0x4e, 0x3b, 0xef, 0xb6, 0x90, 0xfd, 0x9c, 0x87, 0x77, 0x2a,
          0x88, 0xc1, 0x60, 0x80, 0x71, 0xa7, 0xc3, 0x0e, 0x55, 0xd5, 0x61, 0x73,
          0xad, 0x44, 0xb7, 0xef, 0xba, 0x58, 0x93, 0xf7, 0xc3, 0x64, 0x33, 0xa3,
          0xb7, 0x95, 0x06, 0x09, 0x26, 0xd8, 0x64, 0x23, 0x49, 0x55, 0x09, 0x89,
          0x74, 0x01, 0xfb, 0xe9, 0x03, 0xc8, 0x0a, 0xc7, 0xa8, 0xef, 0x26, 0xee,
          0xbd, 0x58, 0xf9, 0x39, 0x05, 0x97, 0x5b, 0x65, 0x81, 0xe0, 0x35, 0x4a,
          0x7e, 0x14, 0x20, 0x35, 0x38, 0xcd, 0x5c, 0x77, 0xc2, 0xee, 0x7e, 0x04,
          0xa7, 0x6d, 0x03, 0x3b, 0x6f, 0x36, 0xb1, 0xad, 0xb4, 0xd1, 0x62, 0x3d,
          0xa8, 0xcb, 0x3d, 0x20, 0xdb, 0x08, 0x7c, 0xb3, 0x73, 0x08, 0x3f, 0x9d,
          0xeb, 0x94, 0xc5, 0xce, 0xb7, 0x31, 0xbe, 0xfd, 0x9d, 0x12, 0xc9, 0x6f,
          0x28, 0x8a, 0x15, 0xb0, 0xb3, 0x32, 0x5a, 0x8d, 0x3a, 0xea, 0xd5, 0x53,
          0xf0, 0x1e, 0x60, 0x68, 0xc4, 0x82, 0xf1, 0x80, 0x1b, 0x13, 0xa1, 0x11,
          0xb8, 0xc7, 0x5d, 0x9a, 0x9e, 0xb0, 0xdf, 0xd7, 0x39, 0x9f, 0x33, 0x52,
          0xa3, 0xde, 0x00, 0xb5, 0x75, 0xe0, 0x9c, 0xa3, 0xf7, 0x92, 0x01, 0x83,
          0xc3, 0x72, 0xd7, 0x5f, 0xf9, 0x03, 0x51, 0x05, 0xf9, 0xb7, 0x17, 0xf5,
          0x66, 0x5a, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae, 0x42,
          0x60, 0x82
        };

      static const unsigned char image1_data[] =
        {
          0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
          0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
          0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x01,
          0x62, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0x95, 0x93, 0x4f, 0x4a, 0x03,
          0x31, 0x18, 0xc5, 0x7f, 0xc9, 0xa4, 0x2d, 0xa5, 0x82, 0x68, 0x41, 0x41,
          0x10, 0xbb, 0x70, 0x27, 0x5e, 0x20, 0x22, 0x82, 0xe8, 0x4e, 0xef, 0x50,
          0x2f, 0xe1, 0xce, 0x85, 0x2b, 0xaf, 0xa0, 0x2b, 0x11, 0xa1, 0xa8, 0x0b,
          0x17, 0x9e, 0xa1, 0xce, 0xc2, 0xb5, 0x3d, 0x80, 0x16, 0xb5, 0x05, 0xc5,
          0x96, 0x8a, 0x58, 0x6d, 0xf3, 0xb9, 0x98, 0x99, 0xfe, 0x9b, 0xa9, 0xd4,
          0x07, 0x21, 0xf9, 0xc2, 0xcb, 0xcb, 0x9b, 0x37, 0x5f, 0x94, 0xef, 0xfb,
          0x8c, 0xc2, 0x9e, 0x5a, 0xe1, 0x1b, 0x70, 0xe1, 0x86, 0x06, 0xd2, 0xe0,
          0xef, 0xf9, 0x6a, 0x94, 0x6b, 0x62, 0xa7, 0x01, 0xda, 0x20, 0x67, 0xc3,
          0x5b, 0xaa, 0x98, 0xc8, 0x1c, 0x23, 0x20, 0xc1, 0x94, 0xbf, 0x5e, 0xe2,
          0xb3, 0xf9, 0xca, 0xe6, 0x72, 0x01, 0x54, 0xe5, 0x1f, 0x02, 0x21, 0x72,
          0xc6, 0xa1, 0x53, 0x42, 0xd6, 0x13, 0x88, 0x99, 0x0f, 0xa0, 0xff, 0x12,
          0x98, 0x04, 0x26, 0x16, 0x18, 0x40, 0x7b, 0x98, 0x24, 0x08, 0xfc, 0x80,
          0x3d, 0xb6, 0x12, 0x7d, 0x5e, 0x14, 0xac, 0x49, 0x0a, 0xac, 0x67, 0x4f,
          0x85, 0xbe, 0xbb, 0xc2, 0xee, 0xbe, 0xe5, 0x66, 0x75, 0xf8, 0x8f, 0xa9,
          0x22, 0x98, 0x48, 0x51, 0x9f, 0xe7, 0x99, 0x1a, 0x48, 0x44, 0x21, 0x64,
          0x4d, 0x8b, 0x54, 0x26, 0xc3, 0x6d, 0xad, 0x8e, 0x7b, 0xae, 0x31, 0x7d,
          0x3f, 0x8b, 0x84, 0x61, 0x78, 0x06, 0xf0, 0xde, 0xfa, 0x21, 0xaa, 0xf6,
          0x07, 0xba, 0x2b, 0xa1, 0x65, 0x70, 0xce, 0xf1, 0xa5, 0x35, 0x28, 0x85,
          0x48, 0x70, 0x2c, 0x1a, 0x81, 0xab, 0x60, 0x65, 0xf0, 0x82, 0x7a, 0x65,
          0x61, 0x8e, 0x9c, 0x71, 0x20, 0xd0, 0xe9, 0x38, 0x76, 0xd6, 0xd6, 0x29,
          0x95, 0xcb, 0xbc, 0x37, 0x1a, 0x6c, 0x14, 0x0a, 0x3c, 0xb6, 0x9a, 0x68,
          0xdd, 0x57, 0xd0, 0x9e, 0xc6, 0xd7, 0x55, 0x0c, 0x75, 0x50, 0xdb, 0x80,
          0xae, 0xd2, 0xbb, 0x7e, 0x1e, 0xb6, 0xac, 0xc2, 0x49, 0x50, 0x8a, 0x16,
          0xee, 0x2e, 0x9e, 0xe0, 0x65, 0xc0, 0x82, 0x02, 0x3c, 0x30, 0xfe, 0x41,
          0xbc, 0x3d, 0xed, 0x89, 0x95, 0xa3, 0x99, 0x4b, 0x4a, 0xb2, 0xd8, 0x67,
          0x1b, 0xf0, 0x0f, 0xe3, 0xdc, 0xe4, 0x3e, 0x90, 0xa1, 0x29, 0xa1, 0x98,
          0x50, 0x60, 0x12, 0x24, 0x0b, 0x84, 0xc1, 0x9a, 0xb4, 0x46, 0xa7, 0x14,
          0x5e, 0x5a, 0x8d, 0xed, 0xd9, 0xe4, 0xb7, 0xd0, 0x0b, 0xf6, 0x01, 0x14,
          0x5c, 0x49, 0x65, 0xec, 0xab, 0xf9, 0x05, 0x38, 0x3f, 0x6e, 0x47, 0xd8,
          0x50, 0x6b, 0x3e, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e, 0x44, 0xae,
          0x42, 0x60, 0x82
        };

      static const unsigned char image2_data[] =
        {
          0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
          0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x10,
          0x08, 0x06, 0x00, 0x00, 0x00, 0x1f, 0xf3, 0xff, 0x61, 0x00, 0x00, 0x01,
          0x1c, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xa5, 0x92, 0xb1, 0x6a, 0xc3,
          0x30, 0x14, 0x45, 0x8f, 0x8c, 0xdb, 0x82, 0xe9, 0xda, 0x31, 0x05, 0x8f,
          0x9d, 0x8d, 0x28, 0xf8, 0x1b, 0xf2, 0x0b, 0x86, 0x40, 0x86, 0x2e, 0xdd,
          0xfa, 0x1d, 0xdd, 0x32, 0x76, 0x08, 0xf8, 0x0f, 0x42, 0xc1, 0x7f, 0xf0,
          0x20, 0x94, 0xcc, 0xde, 0xb3, 0x06, 0x3a, 0x15, 0x43, 0xda, 0x50, 0x75,
          0x50, 0xac, 0xca, 0x96, 0xd2, 0x52, 0xfa, 0x40, 0x3c, 0xa4, 0xfb, 0xce,
          0xc5, 0x3c, 0x5f, 0x25, 0x22, 0xfc, 0xa7, 0x12, 0xff, 0x92, 0xce, 0x4b,
          0x93, 0xce, 0x4b, 0x73, 0x6a, 0x38, 0xa6, 0x27, 0xbe, 0xa8, 0x6b, 0x83,
          0xae, 0x0d, 0x31, 0x93, 0x53, 0x7a, 0xe2, 0x8b, 0x34, 0x39, 0x34, 0x79,
          0x30, 0xf4, 0x93, 0x9e, 0x02, 0xac, 0x5b, 0xd0, 0x4d, 0x6e, 0xa7, 0x3f,
          0x0e, 0xb0, 0x9a, 0xa0, 0x6b, 0xc3, 0x4b, 0xa5, 0x0c, 0x80, 0xae, 0x0d,
          0xac, 0x26, 0x56, 0x3f, 0x4b, 0xa1, 0xc9, 0x59, 0xb7, 0x50, 0x00, 0xaa,
          0x5f, 0xe2, 0xa6, 0x2c, 0xcd, 0xfd, 0xc3, 0xb5, 0x1d, 0xda, 0x77, 0xb6,
          0xcf, 0x76, 0xb6, 0x2f, 0xaf, 0x6c, 0xbf, 0xc8, 0x00, 0x58, 0x3c, 0x6e,
          0x29, 0x44, 0x14, 0xbe, 0x81, 0x33, 0x99, 0x1d, 0x87, 0xdf, 0xbb, 0xe1,
          0x12, 0xce, 0x8f, 0xf0, 0x72, 0xe7, 0xe0, 0xc0, 0xc0, 0x99, 0x4c, 0x2f,
          0xc7, 0x3b, 0xb4, 0xf0, 0xf3, 0xdb, 0x00, 0x76, 0x3b, 0xf0, 0xeb, 0xf6,
          0x06, 0x78, 0xed, 0xc6, 0xcf, 0x4e, 0x3b, 0x8c, 0xde, 0x82, 0x1c, 0xe8,
          0xda, 0xc0, 0xfe, 0x33, 0x7a, 0x62, 0xbf, 0x38, 0xc8, 0x01, 0xd5, 0xe0,
          0x0b, 0x87, 0x55, 0xa9, 0x5f, 0x72, 0x30, 0x82, 0x17, 0x1b, 0x7b, 0x5c,
          0x65, 0xa1, 0x49, 0x02, 0x36, 0x07, 0x0e, 0xce, 0xbe, 0xe1, 0x42, 0x44,
          0x15, 0x22, 0x2a, 0x30, 0xb9, 0x53, 0x96, 0xe9, 0x0d, 0x0a, 0x11, 0xf5,
          0xd4, 0x86, 0x70, 0xcf, 0x8c, 0x4d, 0x7c, 0x3d, 0xc8, 0x41, 0x0f, 0xc4,
          0x56, 0x10, 0xd3, 0x83, 0x1c, 0xfc, 0xb5, 0xbe, 0x00, 0x40, 0xce, 0xa4,
          0xe3, 0x14, 0x6f, 0x5e, 0xa8, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45, 0x4e,
          0x44, 0xae, 0x42, 0x60, 0x82
        };

      static const unsigned char image3_data[] =
        {
          0x89, 0x50, 0x4e, 0x47, 0x0d, 0x0a, 0x1a, 0x0a, 0x00, 0x00, 0x00, 0x0d,
          0x49, 0x48, 0x44, 0x52, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00, 0x16,
          0x08, 0x06, 0x00, 0x00, 0x00, 0xc4, 0xb4, 0x6c, 0x3b, 0x00, 0x00, 0x03,
          0xb1, 0x49, 0x44, 0x41, 0x54, 0x38, 0x8d, 0xad, 0x94, 0x5f, 0x4c, 0x5b,
          0x55, 0x1c, 0xc7, 0x3f, 0xe7, 0xdc, 0x4b, 0x7b, 0x4b, 0xcb, 0xa0, 0x76,
          0x2d, 0x45, 0xc4, 0x31, 0x14, 0x32, 0x35, 0x99, 0xee, 0x61, 0x92, 0x60,
          0x9c, 0x51, 0xd8, 0x83, 0x89, 0x2c, 0xe0, 0x83, 0xf1, 0x71, 0x8b, 0x3e,
          0xbb, 0x18, 0x5f, 0x8d, 0xc9, 0x1e, 0x97, 0x2c, 0xf3, 0x9d, 0x2d, 0x2a,
          0x2f, 0x1a, 0xf6, 0x64, 0xb6, 0xf1, 0xe0, 0xfe, 0x38, 0x63, 0xa0, 0x71,
          0x89, 0x69, 0x70, 0x0e, 0xb0, 0xc5, 0x21, 0x42, 0xda, 0x02, 0x42, 0xa1,
          0xbd, 0x6d, 0x69, 0x6f, 0x7b, 0xcf, 0xf1, 0x01, 0x58, 0x52, 0x03, 0xce,
          0xb8, 0xfd, 0x9e, 0xce, 0x39, 0xf9, 0x9d, 0xcf, 0xf9, 0xfe, 0x7e, 0xdf,
          0x93, 0x9f, 0x88, 0xc5, 0x62, 0xec, 0x46, 0x5f, 0x5f, 0x9f, 0xe6, 0x09,
          0x44, 0x2c, 0x16, 0x13, 0x62, 0x17, 0x3c, 0x3e, 0x3e, 0xae, 0x7b, 0x7a,
          0x7a, 0xc8, 0xe7, 0xf3, 0x64, 0x32, 0x19, 0x6c, 0xdb, 0xfe, 0x4f, 0x90,
          0x7c, 0x3e, 0x4f, 0x22, 0x91, 0x20, 0x1e, 0x8f, 0xe3, 0x38, 0xce, 0xc3,
          0x73, 0x73, 0x57, 0xe9, 0xe8, 0xe8, 0x28, 0xad, 0xed, 0x1e, 0x22, 0x9d,
          0x65, 0x0e, 0x1f, 0x2d, 0x51, 0x75, 0x4b, 0x08, 0x21, 0x10, 0x12, 0x4c,
          0x13, 0xa4, 0xdc, 0x5e, 0xa3, 0x41, 0xeb, 0x9d, 0xc2, 0x84, 0xc0, 0x55,
          0x8a, 0x85, 0x3f, 0x3c, 0xe8, 0xcb, 0x06, 0x77, 0xef, 0x50, 0x0f, 0xde,
          0x7d, 0x39, 0xd2, 0x59, 0x66, 0x79, 0xe3, 0x26, 0x59, 0x7b, 0x8e, 0x9a,
          0xbb, 0x85, 0xd7, 0xa7, 0x70, 0xab, 0x16, 0xab, 0x69, 0x83, 0xec, 0x5a,
          0x05, 0xb4, 0x87, 0xa7, 0x0e, 0x36, 0xf0, 0xf4, 0xe1, 0x0a, 0xfe, 0x40,
          0x8d, 0x6a, 0x55, 0x83, 0x10, 0x98, 0x01, 0x08, 0x47, 0x8d, 0xba, 0x4a,
          0x1e, 0x82, 0x33, 0x99, 0x0c, 0x5d, 0x47, 0x4b, 0x64, 0xed, 0x39, 0xaa,
          0x3a, 0x8f, 0xe5, 0xf3, 0x31, 0x7f, 0xbf, 0x81, 0xdb, 0xd7, 0x0b, 0xcc,
          0xfe, 0xb2, 0x05, 0x94, 0x76, 0x32, 0xfd, 0x74, 0xf6, 0x58, 0x9c, 0x1c,
          0x6e, 0xa2, 0xf7, 0x0d, 0x03, 0xa5, 0x8b, 0xa0, 0xc1, 0xf2, 0xc9, 0xbd,
          0xc1, 0xb6, 0x6d, 0xe3, 0xb8, 0x25, 0x6a, 0x6e, 0x11, 0xcb, 0xe7, 0xe3,
          0xee, 0x1d, 0x18, 0x1b, 0x59, 0x01, 0x24, 0xfe, 0x26, 0x93, 0xae, 0xee,
          0x08, 0xd2, 0x23, 0xc8, 0x2c, 0x3a, 0x2c, 0x24, 0xb7, 0xb8, 0x74, 0xbe,
          0xc8, 0xf2, 0x62, 0x88, 0x77, 0x4f, 0x7b, 0xd0, 0x54, 0x50, 0x4a, 0xef,
          0x0d, 0xde, 0x6e, 0x99, 0xc0, 0xeb, 0x83, 0xf9, 0xfb, 0x26, 0x63, 0x23,
          0xcb, 0x80, 0xa2, 0x7f, 0xb0, 0x95, 0x81, 0x41, 0x83, 0x60, 0x44, 0x60,
          0x5a, 0x2e, 0xe5, 0x52, 0x33, 0x93, 0x37, 0x1c, 0xc6, 0x46, 0xfe, 0xe2,
          0xda, 0x37, 0x19, 0x5a, 0xa3, 0x5d, 0x0c, 0x0c, 0x5b, 0x48, 0x59, 0xac,
          0x03, 0xd7, 0xe9, 0x17, 0x12, 0xdc, 0xaa, 0xc5, 0xad, 0xab, 0x36, 0x50,
          0xa3, 0xff, 0x9d, 0x08, 0xef, 0x7d, 0xd8, 0x40, 0x4b, 0xb4, 0x88, 0x69,
          0xe5, 0xd9, 0x58, 0xb5, 0xb8, 0x7d, 0xad, 0xc4, 0xc9, 0xa1, 0x46, 0x4e,
          0x9f, 0x0d, 0x03, 0x26, 0xdf, 0x7e, 0xbd, 0x86, 0xbd, 0x2e, 0x31, 0x0c,
          0xb1, 0xbf, 0x62, 0xd3, 0x84, 0xd5, 0x94, 0x41, 0xf2, 0xd7, 0x0a, 0x07,
          0x0e, 0x1c, 0x60, 0xe0, 0x94, 0x89, 0x92, 0x9b, 0x98, 0x86, 0x81, 0xbd,
          0xd9, 0xcc, 0x97, 0x17, 0x0b, 0xcc, 0x4c, 0x65, 0x59, 0x5f, 0x71, 0xf8,
          0xe0, 0xe3, 0x30, 0x13, 0x37, 0xfc, 0x24, 0xa7, 0x73, 0x24, 0x67, 0x83,
          0x18, 0x75, 0xa4, 0x7f, 0x28, 0x96, 0x52, 0xb0, 0xbe, 0x5e, 0x41, 0x51,
          0xe6, 0xd0, 0x73, 0x16, 0xc1, 0xb0, 0xc0, 0x34, 0x0d, 0x8a, 0xb9, 0x20,
          0x23, 0xe7, 0x6d, 0x66, 0xa6, 0xb2, 0x84, 0x0e, 0x36, 0xd2, 0xfb, 0x7a,
          0x13, 0xfe, 0xe6, 0x32, 0x47, 0x5e, 0x6e, 0xdc, 0x36, 0x7e, 0xa9, 0x8a,
          0x90, 0xfb, 0x98, 0xb7, 0xdd, 0x63, 0x10, 0xca, 0x03, 0x28, 0xa4, 0x47,
          0x61, 0x58, 0x2e, 0x1b, 0xab, 0x41, 0xbe, 0xfa, 0xbc, 0xc0, 0xec, 0x94,
          0x0d, 0x28, 0xbc, 0x5e, 0x93, 0xb6, 0x8e, 0x06, 0x4c, 0xab, 0x84, 0xe1,
          0xd9, 0xbe, 0xae, 0xb4, 0x89, 0x34, 0xea, 0xc1, 0xf5, 0x3b, 0x01, 0xc1,
          0xb0, 0x00, 0xfc, 0xa4, 0x96, 0xaa, 0x54, 0xb6, 0x1a, 0x99, 0xfc, 0xde,
          0x61, 0x66, 0x2a, 0x4b, 0x4b, 0x4b, 0x23, 0xd1, 0x68, 0x0b, 0xe9, 0xd4,
          0x26, 0x17, 0x3e, 0x4d, 0xf3, 0x60, 0x2a, 0x48, 0xea, 0x41, 0x19, 0x89,
          0xa4, 0xfd, 0x59, 0x0f, 0x52, 0xa8, 0xfd, 0x15, 0x6b, 0x05, 0xed, 0x9d,
          0x35, 0x0e, 0x3d, 0xef, 0xe3, 0xcf, 0xdf, 0x4b, 0x4c, 0x7c, 0xe7, 0x70,
          0xea, 0x7d, 0x3f, 0xb9, 0xf5, 0x20, 0xaf, 0xbe, 0x16, 0x20, 0xda, 0xee,
          0xe5, 0xc2, 0x67, 0x35, 0xd2, 0x0b, 0x9b, 0x9c, 0xfb, 0x68, 0x11, 0xa7,
          0x54, 0xa4, 0x39, 0xe4, 0xe5, 0xc5, 0x63, 0x9a, 0x4c, 0xaa, 0x1e, 0x5c,
          0xaf, 0x58, 0x6b, 0xfc, 0x01, 0x97, 0xb7, 0x87, 0x02, 0x00, 0x5c, 0xb9,
          0xb4, 0xca, 0xe4, 0xcd, 0x32, 0x67, 0xce, 0x86, 0x38, 0xfe, 0x96, 0x4b,
          0xd7, 0x2b, 0x39, 0x3e, 0x39, 0xd7, 0x49, 0x28, 0xd2, 0x42, 0x61, 0x73,
          0x03, 0xa7, 0x56, 0xa3, 0x7f, 0x28, 0x44, 0x47, 0x77, 0x0d, 0xcd, 0xbf,
          0xfc, 0x63, 0x84, 0xa0, 0x5a, 0x85, 0xde, 0x13, 0x06, 0xe9, 0xa5, 0x20,
          0x57, 0xc7, 0x52, 0x7c, 0x71, 0x31, 0xc3, 0xc4, 0x2d, 0x3f, 0x47, 0x5e,
          0xb2, 0x30, 0x3c, 0x82, 0xd4, 0xfc, 0x32, 0x76, 0xd6, 0x81, 0x1d, 0xb3,
          0x7e, 0xfe, 0xb1, 0x48, 0x72, 0x30, 0x82, 0xd9, 0xb0, 0x8f, 0x79, 0xf9,
          0x7c, 0x1e, 0x57, 0x29, 0x10, 0x9a, 0x9a, 0x28, 0x30, 0x7c, 0xc6, 0x22,
          0xd2, 0xd6, 0xcd, 0xf5, 0x2b, 0x2b, 0x24, 0xef, 0xe5, 0x48, 0xde, 0xdb,
          0x00, 0x14, 0x20, 0x09, 0x86, 0x2c, 0xfa, 0x87, 0x9e, 0xe1, 0xa7, 0x1f,
          0x6c, 0xec, 0x92, 0x83, 0x53, 0x51, 0x14, 0x72, 0xfb, 0xf4, 0x38, 0x91,
          0x48, 0xb0, 0xb0, 0xe0, 0xc1, 0x08, 0x08, 0x14, 0x12, 0x45, 0x8d, 0xfe,
          0x21, 0xc9, 0xf1, 0x13, 0x51, 0xe6, 0x7e, 0x73, 0x58, 0x59, 0x54, 0x68,
          0x24, 0x6d, 0x1d, 0x1e, 0x5e, 0x38, 0xa6, 0xe9, 0xe8, 0x51, 0xbc, 0x39,
          0xd8, 0x4a, 0xb5, 0x02, 0xa6, 0x69, 0x33, 0x1d, 0xaf, 0xec, 0x0d, 0x8e,
          0xc7, 0xe3, 0xe8, 0xcb, 0x06, 0xe1, 0xa8, 0x81, 0xd7, 0x27, 0xd1, 0xae,
          0x40, 0x18, 0x0a, 0x43, 0x4a, 0x8c, 0x9d, 0xb1, 0x29, 0xa5, 0x41, 0x26,
          0xad, 0x48, 0xa7, 0x35, 0x8c, 0x2b, 0x4c, 0x53, 0x52, 0xc8, 0xc3, 0x74,
          0xbc, 0xcc, 0xda, 0xb2, 0xbb, 0x37, 0xd8, 0x71, 0x9c, 0xba, 0x79, 0xfa,
          0xb8, 0x21, 0x1f, 0x9d, 0xf2, 0x18, 0xe0, 0x58, 0x2c, 0x26, 0x1e, 0x95,
          0xf8, 0xbf, 0xc0, 0x4f, 0x1a, 0x1e, 0x8b, 0xc5, 0xc4, 0xdf, 0xe0, 0xa1,
          0x90, 0x17, 0x2a, 0xf6, 0xa9, 0x69, 0x00, 0x00, 0x00, 0x00, 0x49, 0x45,
          0x4e, 0x44, 0xae, 0x42, 0x60, 0x82
        };

      switch (id)
        {
        case image0_ID: {QImage img; img.loadFromData(image0_data, sizeof(image0_data), "PNG"); return QPixmap::fromImage(img);}
        case image1_ID: {QImage img; img.loadFromData(image1_data, sizeof(image1_data), "PNG"); return QPixmap::fromImage(img);}
        case image2_ID: {QImage img; img.loadFromData(image2_data, sizeof(image2_data), "PNG"); return QPixmap::fromImage(img);}
        case image3_ID: {QImage img; img.loadFromData(image3_data, sizeof(image3_data), "PNG"); return QPixmap::fromImage(img);}
        default: return QPixmap();
        } // switch
    } // icon
  };

namespace Ui
  {
  class CQEventWidget1: public Ui_CQEventWidget1 {};
} // namespace Ui

class CQEventWidget1 : public CopasiWidget, public Ui::CQEventWidget1
  {
    Q_OBJECT

  public:
    CQEventWidget1(QWidget* parent = 0, const char* name = 0);
    ~CQEventWidget1();

    virtual bool update(ListViews::ObjectType objectType, ListViews::Action action, const std::string & key);
    virtual bool enter(const std::string & key);
    virtual bool leave();

  protected slots:
    virtual void languageChange();

  private:
    bool mExpressionTriggerValid;
    bool mExpressionDelayValid;
    bool mExpressionEAValid;
    bool mObjectOK;
    QString mEAName;
    bool mChanged;
    CEvent *mpEvent;
    std::string mEventKey;
    std::string mAssignmentKey;
    CCompartment *mpCompartment;
    unsigned C_INT32 mPosDelete;
    std::vector< int > mItemToType;
    std::vector<std::pair<std::string, CExpression> > mCurrentAssignment;
    std::vector<std::pair<std::string, std::string> > mObjectKeyDisplayName;
    std::vector<std::string> mTargetList;

    void init();
    bool loadFromEvent();
    void saveToEvent();
    void enableBtnCommit();
    bool checkAllExpressionsOK();
    std::string takeObjectName(QString text);
    std::string getAssignmentKeyFromDisplayName(const std::string displayName);

  private slots:
    void slotBtnCommitClicked();
    void slotBtnDeleteClicked();
    void slotBtnNewClicked();
    void slotBtnRevertClicked();
    virtual void slotNameChanged();
    void slotExpressionDelayValid(bool valid);
    void slotExpressionTriggerValid(bool valid);
    void slotExpressionEAValid(bool valid);
    void slotAddTarget();
    void slotDeleteTarget();
    void slotSaveTarget();
    void slotSelectObject();
    void slotActualizeAssignmentExpression(int index);
    void slotApplyDelay(bool display);
  };

#endif // CQEVENTWIDGET1_H
