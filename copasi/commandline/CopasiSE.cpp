/*
 * This file was automaticly generated by clo++ version 0.6.0 (REL-0_6_0)
 * http://pmade.org/pjones/software/clo++/
 */

/** @file
 * This file contains the implementation of the parser class.
 * You can control the name of this source file using the
 * cxx_source_file variable.
**/

#include "CopasiSE.h"
#include <cstring>
#include <cstdlib>
#include <cctype>

namespace {
    const char* expand_long_name (const std::string &name);
}

//#########################################################################
CopasiSE::parser::parser (void)
    : state_(state_option)
{
    std::memset(&locations_, 0, sizeof(locations_));
}
//#########################################################################
void CopasiSE::parser::parse (int argc, char *argv[], bool call_finalize) {
    for (int i=1; i<argc; ++i) parse_element(argv[i], i, source_cl);
    if (call_finalize) finalize();
}
//#########################################################################
void CopasiSE::parser::finalize (void) {
    if (state_ == state_value) {
	switch (openum_) {
	    case option_save:
		throw option_error("missing value for 'save' option");
	}

    }

}
//#########################################################################
void CopasiSE::parser::parse_element (const char *element, int position, opsource source) {
    std::size_t length = std::strlen(element);

    switch (state_) {
	case state_consume:
	    non_options_.push_back(element);
	    break;
	case state_option:
	    if (length >= 2 && element[0] == '-' && element[1] == '-') {
		if (length == 2) { state_ = state_consume; return; }
		element += 2;
		const char *value = element;
		while (*value != 0 && *value != '=') ++value;
		if (*value == '=') {
		    std::string selement(element, value - element), svalue(++value);

		    parse_long_option(selement.c_str(), position, source);
		    if (state_ != state_value) {
			std::string error("the '"); error += element; error += "' option does not take a value";
			throw option_error(error);
		    }

		    parse_value(svalue.c_str());
		    state_ = state_option;
		} else {
		    parse_long_option(element, position, source);
		}
	    } else if (length >= 2 && element[0] == '-') {
		++element;

		if (length > 2) {
		    while (*element != 0) {
			parse_short_option(*element, position, source);
			++element;
	    
			if (state_ == state_value && *element != 0) {
			    parse_value(element);
			    state_ = state_option;
			    break;
			}
		    }
		} else {
		    parse_short_option(*element, position, source);
		}
	    } else {
		non_options_.push_back(element);
	    }
	    break;
	case state_value:
	    parse_value(element);
	    state_ = state_option;
	    break;
    }
}
//#########################################################################
void CopasiSE::parser::parse_short_option (char option, int position, opsource source) {
switch (option) {
	case 's':
	    if (locations_.save) {
    		throw option_error("the 'save' option is only allowed once");
    	    }
    	    openum_ = option_save;
	    state_ = state_value;
	    locations_.save = position;
    	    return;
}

    std::string error("unknown option: '"); error += option; error += "'";
    throw option_error(error);
}
//#########################################################################
void CopasiSE::parser::parse_long_option (const char *option, int position, opsource source) {
    option = expand_long_name(option);

if (std::strcmp(option, "save") == 0) {
if (locations_.save) {
		    throw option_error("the 'save' option is only allowed once");
		}
		openum_ = option_save;
		locations_.save = position;
state_ = state_value;
return;
}

    std::string error("unknown option '"); error += option; error += "'";
    throw option_error(error);
}
//#########################################################################
void CopasiSE::parser::parse_value (const char *value) {
switch (openum_) {
	case option_save:
	    {
		options_.save = value;
	    }
	    break;
}
}
//#########################################################################
namespace {
    const char* expand_long_name (const std::string &name) {
	std::string::size_type name_size = name.size();
	std::vector<const char*> matches;

    if (name_size <= 4 && name.compare("save") == 0)
        	matches.push_back("save");


	if (matches.empty()) {
	    std::string error("unknown option '"); error += name; error += "'";
	    throw CopasiSE::option_error(error);
	}

	if (matches.size() == 1) {
	    return matches[0];
	}

	std::string error("the option name '"); error += name; error += "' is ambiguous";
	throw CopasiSE::option_error(error);
    }
} // end anonymous namespace
