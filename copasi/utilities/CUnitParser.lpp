/* scanner for kinetic functions */

%option outfile="CUnitParser_lex.cpp"
%option prefix="CUnitParser"
%option never-interactive
%option c++

%{
#include <vector>

#define YYSTYPE CUnitParserBase::Data

#include "copasi.h"
#include "CUnitParser.h"
#include "CUnitParser_yacc.hpp"

#include "utilities/CCopasiMessage.h"
#include "utilities/utility.h"

#ifndef YYERRCODE
#define YYERRCODE 256
#endif

#define YY_USER_INIT \
    pdelete(mpUnit); \
    mPosition = 0; \
    mSymbols.clear();

#define COMMON_ACTION \
    CUnitParserlval.pUnit = NULL; \
    CUnitParserlval.text = yytext; \
    mPosition += yyleng;
    
%}

SCALE    ([afpnumcdhkMGTP]|\xc2\xb5)
KIND     ([mgsAK#]|cd)
SI_UNIT  (Hz|N|Pa|J|W|C|V|F|\xCE\xA9|O|S|Wb|T|H|lm|lx|Bq|Gy|Sv|ka|l|mol|min|h|d)
ID       (\"([^\\\"]|\\.)*\"|[a-z_A-Z][a-z_A-Z0-9]*)
DIGIT    [0-9]

%%
{KIND}   %{
  COMMON_ACTION;
  return KIND;
%}

{SI_UNIT} %{
  COMMON_ACTION;
  return SI_UNIT;
%}

{SCALE}/{KIND}|{SI_UNIT}|{ID}   %{
  COMMON_ACTION;
  return SCALE;
%}

"-"?{DIGIT}+("."?{DIGIT}*(((e|E)"+"?|(e|E)"-"){DIGIT}+)?)?   %{
  COMMON_ACTION;
  return NUMBER;
%}

"*"   %{
  COMMON_ACTION;
  return MULTIPLY;
%}

"/"   %{
  COMMON_ACTION;
  return DIVIDE;
%}

"("   %{
  COMMON_ACTION;
  return START_PARENS;
%}

")"   %{
  COMMON_ACTION;
  return END_PARENS;
%}

"^"   %{
  COMMON_ACTION;
  return EXPONENT;
%}

"xc2\xb2"   %{
  COMMON_ACTION;
  return SUPERSCRIPT_2;
%}

"xc2\xb3"   %{
  COMMON_ACTION;
  return SUPERSCRIPT_3;
%}

{ID}  %{
  COMMON_ACTION;
  return USER_DEFINED_UNIT;
%}
  
[ \t\r\n]+ %{
  COMMON_ACTION;
%} 

<<EOF>>  %{
  return 0;
%}

.     %{
  CCopasiMessage(CCopasiMessage::ERROR, MCUnit + 2, mPosition);
  return YYERRCODE;
%}
     
%%
