// The bison parser together with CEvaluationFlexLexer builds
// the evaluation tree.

%{
#define YYSTYPE CUnitParserBase::Data

#ifdef yyerror
# undef yyerror
#endif
#define yyerror(__str) \
  if (yychar != YYERRCODE) correctErrorPosition(); \
  CCopasiMessage(CCopasiMessage::ERROR, MCUnit + 1, mPosition)

#include "copasi.h"
#include "CUnitParser.h"

#include "report/CCopasiRootContainer.h"
#include "utilities/CCopasiMessage.h"
#include "utilities/utility.h"

#undef yyparse
#define yyparse CUnitParserBase::yyparse
%}

/* yacc Declarations */
%token SCALE
%token KIND
%token SI_UNIT
%token USER_DEFINED_UNIT
%token NUMBER
%token MULTIPLY
%token DIVIDE
%token START_PARENS
%token END_PARENS
%token EXPONENT

// Precedence
%left SCALE
%left KIND
%left SI_UNIT
%left USER_DEFINED_UNIT
%left NUMBER
%left MULTIPLY
%left DIVIDE
%left START_PARENS
%left END_PARENS
%right EXPONENT

/* Grammar follows */
%%

compound_unit: unit
           {
             $$.pUnit = $1.pUnit;
             mpUnit = $$.pUnit;
           }
         | scaled_unit
           {
             $$.pUnit = $1.pUnit;
             mpUnit = $$.pUnit;
           }
         | NUMBER MULTIPLY compound_unit
           { 
             CUnitComponent component;
             component.setKind(CBaseUnit::dimensionless);
             component.setMultiplier(strToDouble($1.text.c_str(), NULL));
             
             $$.pUnit = $3.pUnit;
             $$.pUnit->addComponent(component);
             mpUnit = $$.pUnit;
           }
         | compound_unit MULTIPLY compound_unit
           {
             $$.pUnit = new CUnit("");
             *$$.pUnit = *$1.pUnit * *$3.pUnit;
             pdelete($1.pUnit);
             pdelete($3.pUnit);
             mpUnit = $$.pUnit;
           }
         | compound_unit DIVIDE compound_unit
           {
             $$.pUnit = new CUnit("");
             *$$.pUnit = *$1.pUnit * $3.pUnit->exponentiate(-1);
             pdelete($1.pUnit);
             pdelete($3.pUnit);
             mpUnit = $$.pUnit;
           }
         | NUMBER DIVIDE compound_unit
           {
             CUnitComponent component;
             component.setKind(CBaseUnit::dimensionless);
             component.setMultiplier(strToDouble($1.text.c_str(), NULL));
             
             $$.pUnit = $3.pUnit;
             $$.pUnit->exponentiate(-1);
             $$.pUnit->addComponent(component);
             mpUnit = $$.pUnit;
           }
         | compound_unit DIVIDE NUMBER
           {
             CUnitComponent component;
             component.setKind(CBaseUnit::dimensionless);
             component.setMultiplier(1.0/strToDouble($1.text.c_str(), NULL));
             component.setExponent(-1.0);
             
             $$.pUnit = $1.pUnit;
             $$.pUnit->addComponent(component);
             mpUnit = $$.pUnit;
           }
         | START_PARENS compound_unit END_PARENS
           {
             $$ = $2;
             mpUnit = $$.pUnit;
           }
         | compound_unit EXPONENT NUMBER
           {
             $1.pUnit->exponentiate(strToDouble($3.text.c_str(), NULL));
             $$.pUnit = $1.pUnit; 
             mpUnit = $$.pUnit;
           }

unit:      KIND
           {
             $$.pUnit = new CUnit(CBaseUnit::fromSymbol($1.text));
             mSymbols.insert($1.text);
           }
         | SI_UNIT
           {
             $$.pUnit = new CUnit(CUnit::getSIUnit($1.text, mAvogadro));
             mSymbols.insert($1.text);
             mSymbols.insert($$.pUnit->getUsedSymbols().begin(), $$.pUnit->getUsedSymbols().end());
           }
         | USER_DEFINED_UNIT
           {
             const CUnit * pUnit = CCopasiRootContainer::getUnitFromSymbol($1.text);
             
             if (pUnit == NULL)
               {
                 yyerror($1.text);
               }
             else
               {
                 $$.pUnit = new CUnit(*pUnit);
                 mSymbols.insert($1.text);
                 mSymbols.insert($$.pUnit->getUsedSymbols().begin(), $$.pUnit->getUsedSymbols().end());
               }
           }
scaled_unit:  SCALE unit
           {
             CUnitComponent component;
             component.setKind(CBaseUnit::dimensionless);
             component.setScale(CBaseUnit::scaleFromPrefix($1.text));
             
             $$.pUnit = $2.pUnit;
             $$.pUnit->addComponent(component);
           }
           
%%

