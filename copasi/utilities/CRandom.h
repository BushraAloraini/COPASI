#ifndef COPASI_CRandom
#define COPASI_CRandom

#include "../copasi.h"
#include <vector>

/**
 * This is a class providing random numbers. 
 * This provides a fast random number generator, which does not suffer 
 * from the problem of small numbers always following very small numbers.
 *
 * The shuffled Park and Miller algorithm described in 
 * "Numerical Recipes" is used. Here
 * I(j+1) = (a * I(j)) mod m, with a = 48271 and m = 2^31 -1.
 * We use Schrage's algorithm to calculate this:
 * a*z%m = a(z%q) - r(z/q)      (if >= 0)
 *       = a(z%q) - r(z/q) + m  (otherwise)
 * Here q = 30845, r = 23902
 *
 * On initialisation, an array of 64 random values is created, and the
 * number generated by the above algorithm used to select one of these. 
 * The selected number is returned, with the new number replacing it in 
 * the array. 
 *
 * Prototypical usage:
 * double rnd;
 * CCopasiRandom *crand = new CCopasiRandom();
 * rnd = crand->getUniformRandom();
 */

class CRandom
{
 public:
    // Lifecycle methods
    /**
     * Named constructor.
     * Seeds the random number generator with the given seed.
     * @param seed The seed to use
     */
    CRandom(C_INT32 seed = 0);
    /**
     * The destructor.
     */
    ~CRandom();
    // 
    /**
     * Produces a uniformly distributed random number in the range (0,1]
     */
    C_FLOAT64 getUniformRandom();
 private:
    // private methods
    /**
     * Initializes the class. 
     * The seed is set to the given value, or set from the system time.
     */
    void initialize(C_INT32 seed);
    /**
     * Get a random number between 1 and modulus
     */
    C_INT32 getRandom();
    // private attributes
    /**
     * The current random number
     */
    C_INT32 mNumber;
    /**
     * The shuffle table
     */
     std::vector<C_INT32> mShuffleTable;
#if 0
    /**
     * The multiplier
     */
    const C_INT32 mMultiplier;
    /**
     * The modulus
     */
    const C_INT32 mModulus;
    /**
     * The q value
     */
    const C_INT32 mQ;
    /**
     * The r value
     */
    const C_INT32 mR;
#endif // 0
};


#endif // COPASI_CRandom
