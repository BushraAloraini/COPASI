# Begin CVS Header 
#   $Source: /Volumes/Home/Users/shoops/cvs/copasi_dev/copasi/bindings/csharp/csharp.pro,v $ 
#   $Revision: 1.1.2.3 $ 
#   $Name:  $ 
#   $Author: gauges $ 
#   $Date: 2011/09/26 12:14:53 $ 
# End CVS Header 

# Copyright (C) 2011 by Pedro Mendes, Virginia Tech Intellectual 
# Properties, Inc., University of Heidelberg, and The University 
# of Manchester. 
# All rights reserved. 

TEMPLATE = lib
CONFIG -= qt

# disable library versioning
CONFIG += plugin

include(../../common.pri)
include(../../app.pri)

TARGET = COPASI

# the code generated by swig has to be compiled with -O1
# since -O2 and higher do things that might break the binary
QMAKE_CFLAGS_RELEASE -= -O3
QMAKE_CFLAGS_RELEASE -= -O2
QMAKE_CFLAGS_RELEASE += -O1
QMAKE_CXXFLAGS_RELEASE -= -O3
QMAKE_CXXFLAGS_RELEASE -= -O2
QMAKE_CXXFLAGS_RELEASE += -O1

COPASI_LIBS += $${COPASI_LIBS_SE}


INCLUDEPATH += ../../..
contains(BUILD_OS,Linux){
  LIBS = -L../../lib \
         $$join(COPASI_LIBS, " -l", -l) \
         $${LIBS}

  TARGETDEPS += $$join(COPASI_LIBS, ".a  ../../lib/lib", ../../lib/lib, .a)

#  !isEmpty(MONO_HOME){
#   isEmpty(MONO_INCLUDE_PATH){
#     INCLUDEPATH += $$MONO_HOME/include/
#     INCLUDEPATH += $$MONO_HOME/include/linux
#   }
#  }

#  !isEmpty(MONO_INCLUDE_PATH){
#    INCLUDEPATH += $$MONO_INCLUDE_PATH 
#    INCLUDEPATH += $$MONO_INCLUDE_PATH/linux
#  }
}


contains(BUILD_OS, Darwin) {
  QMAKE_LFLAGS += -Wl,-search_paths_first
  
  LIBS = $$join(COPASI_LIBS, ".a  ../../lib/lib", ../../lib/lib, .a) \
         $${LIBS}
  
  TARGETDEPS += $$join(COPASI_LIBS, ".a  ../../lib/lib", ../../lib/lib, .a)

    LIBS += -framework JavaVM
    LIBS += -framework QuickTime
    LIBS += -framework Carbon
    LIBS += -framework Accelerate

    QMAKE_LFLAGS_SHLIB += -unexported_symbols_list unexported_symbols.list
    
    # make a hard link from the generated dylib file to a file with the ending
    # jnilib
    QMAKE_PRE_LINK = nm -g $$SBML_PATH/lib/libsbml.a | grep "^[0-9]" | cut -d\" \" -f3  > unexported_symbols.list ; nm -g $$EXPAT_PATH/lib/libexpat.a | grep "^[0-9]" | cut -d\" \" -f3  >> unexported_symbols.list
#    QMAKE_POST_LINK = ln -f libCOPASI.1.0.0.dylib libCOPASI.jnilib 

#  !isEmpty(MONO_HOME){
#   isEmpty(MONO_INCLUDE_PATH){
#     INCLUDEPATH += $$MONO_HOME/include/
#   }  
#  }

#  !isEmpty(MONO_INCLUDE_PATH){
#    INCLUDEPATH += $$MONO_INCLUDE_PATH
#  }
  

}

contains(BUILD_OS, WIN32) { 
  LIBS += $$join(COPASI_LIBS, ".lib  ../../lib/", ../../lib/, .lib)

  TARGETDEPS += $$join(COPASI_LIBS, ".lib  ../../lib/release/", ../../lib/release/, .lib)

  CONFIG -= staticlib
  CONFIG += dll
  CONFIG += embed_manifest_dll
  LIBS += delayimp.lib


  #debug: SUBDIR=debug
  #release: SUBDIR=release

  #QMAKE_POST_LINK = mt.exe -manifest $$SUBDIR/$(TARGET).manifest -outputresource:$$SUBDIR/$(TARGET);2

  !isEmpty(MONO_HOME){
   isEmpty(MONO_INCLUDE_PATH){
     INCLUDEPATH += $$MONO_HOME\include\
     INCLUDEPATH += $$MONO_HOME\include\win32
   }  
  }

  !isEmpty(MONO_INCLUDE_PATH){
    INCLUDEPATH += $$MONO_INCLUDE_PATH
    INCLUDEPATH += $$MONO_INCLUDE_PATH\win32
  }
  
}

include(../common/swig_files.pri)


#DISTFILE   = $$SWIG_INTERFACE_FILES
#DISTFILES += local.cpp
#DISTFILES += csharp.i

isEmpty(SWIG_PATH){
    # check if the wrapper file is there
    !exists(copasi_wrapper.cpp){
        error(Wrapper file copasi_wrapper.cpp missing. Please reconfigure with --with-swig=PATH_TO_SWIG.)
    }
}

!isEmpty(SWIG_PATH){
    # check if swig is there and create a target to run it to create
    # copasi_wrapper.cpp
    contains(BUILD_OS, WIN32){
        !exists($$SWIG_PATH/swig.exe){
        error(Unable to find swig excecutable in $$SWIG_PATH. Please use --with-swig=PATH to specify the path where PATH/swig.exe is located.) 
         }
    }
    !contains(BUILD_OS, WIN32){
      !exists($$SWIG_PATH/bin/swig){
        error(Unable to find swig excecutable in $$SWIG_PATH/bin/. Please use --with-swig=PATH to specify the path where PATH/bin/swig is located.) 
      }
    }

    DEFINE_COMMANDLINE = $$join(DEFINES," -D",-D)
    contains(BUILD_OS, WIN32){
      wrapper_source.target = copasi_wrapper.cpp
      wrapper_source.depends = $$SWIG_INTERFACE_FILES csharp.i local.cpp
      wrapper_source.commands = $(DEL_FILE) copasi_wrapper.cpp && $(DEL_FILE) mono_files\*.cs && $(DEL_FILE) mono_files\*.dll && && $$SWIG_PATH\swig.exe $$DEFINE_COMMANDLINE -I..\.. -c++ -csharp -o $$wrapper_source.target -namespace org.COPASI -outdir mono_files\  csharp.i && cd mono_files && $$MONO_HOME\mcs.exe /target:library /out:COPASI.dll *.cs  && cd .. 
      QMAKE_EXTRA_WIN_TARGETS += wrapper_source
      #PRE_TARGETDEPS += $${COPASI_LIBS_SE}

    }
    !contains(BUILD_OS, WIN32){

      wrapper_source.target = copasi_wrapper.cpp
      wrapper_source.depends = $$SWIG_INTERFACE_FILES csharp.i local.cpp
      wrapper_source.commands = $(DEL_FILE) $$wrapper_source.target; $(DEL_FILE) mono_files/*.cs mono_files/*.dll; mkdir mono_files ; $$SWIG_PATH/bin/swig $$DEFINE_COMMANDLINE -I../.. -c++ -csharp -o $$wrapper_source.target -namespace org.COPASI -outdir mono_files/  csharp.i; cd mono_files; $$MONO_HOME/bin/gmcs /target:library /out:COPASI.dll *.cs 
      QMAKE_EXTRA_UNIX_TARGETS += wrapper_source
      #PRE_TARGETDEPS += $${COPASI_LIBS_SE}
    }
    PRE_TARGETDEPS += copasi_wrapper.cpp
}

QMAKE_CLEAN += copasi_wrapper.cpp 
QMAKE_CLEAN += mono_files/*.cs
QMAKE_CLEAN += mono_files/*.dll

SOURCES += copasi_wrapper.cpp
# under windows qmake seems to ignore the last line of project files

