/* Begin CVS Header
   $Source: /Volumes/Home/Users/shoops/cvs/copasi_dev/website/license/Attic/COptions.cpp,v $
   $Revision: 1.1 $
   $Name:  $
   $Author: shoops $
   $Date: 2006/12/20 20:05:04 $
   End CVS Header */

// Copyright © 2006 by Pedro Mendes, Virginia Tech Intellectual
// Properties, Inc. and EML Research, gGmbH.
// All rights reserved.

/*
 * This file was automaticly generated by clo++ version 0.6.4 (REL-0_6_4)
 * http://pmade.org/pjones/software/clo++/
 *
 * Template enhancements by Stefan Hoops mailto:shoops@vt.edu
 */

/**
 * This file contains the implementation of the COptions class.
 * You can control the name of this source file using the
 * cxx_source_file variable.
 */

#ifdef WIN32
#pragma warning (disable: 4786)
#define strcasecmp _stricmp
#endif

#include "COptions.h"
#include <cstring>
#include <cstdlib>
#include <cctype>
#include <fstream>
#include <sstream>
#include <errno.h>

namespace
  {
  const char const_usage[] =
    "  -c, --create               Create a license code for given user and email.\n"
    "  -d, --date string          The start date in ISO format YYYY-MM-DD.\n"
    "  -e, --email string         The Registered Email.\n"
    "  -r, --registration string  The License Registration Code.\n"
    "  -t, --type Type            Create a license of the specified type\n"
    "                             (default: trial).\n"
    "  -u, --user string          The Registered User.\n";

  const char const_help_comment[] =
    "use the -h option for help";

  const char* expand_long_name (const std::string &name);
}

//#########################################################################
license::COptions::COptions (void)
    : state_(state_option)
{
  memset(&locations_, 0, sizeof(locations_));
}
//#########################################################################
void license::COptions::parse(int argc, char *argv[], bool call_finalize)
{
  int i = 1;

#ifdef Darwin
  if (argc > 1)
    {
      std::string tmp(argv[1]);
      if (!tmp.compare(0, 4, "-psn")) i = 2;
    }
#endif // Darwin

  for (; i < argc; ++i) parse_element(argv[i], i, source_cl);

  if (call_finalize) finalize();
}
//#########################################################################
void license::COptions::parse(const char * fileName)
{
  int LineCounter = 0;
  std::string Line;
  std::string Option;
  std::string Value;
  std::string::size_type pos;
  std::ifstream File(fileName);

  if (File.fail())
    {
      std::ostringstream error;
      error << "error opening file: '" << fileName << "'";
      errno = ENOENT;

      throw option_error(error.str());
    }

  while (true)
    {
      try
        {
          std::getline(File, Line);
          LineCounter++;

          if (File.eof()) break;
          if (File.fail())
            {
              std::ostringstream error;
              error << "unknown problem";

              throw option_error(error.str());
            }

#ifndef WIN32
          /* Take care of dos style line ending under UNIX */
          /* A case where MS has the better implementation */
          pos = Line.length();
          (pos < 1) ? 0 : pos--;
          if (Line[pos] == 0xd) Line.erase(pos);
#endif  // not WIN32

          // eat leading spaces
          Line.erase(0, Line.find_first_not_of(' '));

          // skip comments and empty lines
          if (Line.length() == 0 || Line[0] == '#') continue;

          // find first position of '=' or ':'
          pos = Line.find_first_of(":=");

          Option = "--" + Line.substr(0, pos);
          Option.erase(Option.find_last_not_of(' ') + 1);

          parse_element(Option.c_str(), 0, source_cf);

          if (pos != std::string::npos) // We have a '='
            {
              Value = Line.substr(pos + 1);
              Value.erase(0, Value.find_first_not_of(' '));
              Value.erase(Value.find_last_not_of(' ') + 1);

              if (Value.length()) parse_element(Value.c_str(), 0, source_cf);
            }

          finalize();
        }

      catch (license::option_error &e)
        {
          std::ostringstream error;
          error << "error reading file: '" << fileName << "(" << LineCounter
          << ")': " << e.what();

          throw option_error(error.str());
        }
    }

  File.clear();
  File.close();
}
//#########################################################################
void license::COptions::finalize (void)
{
  if (state_ == state_value)
    {
      switch (openum_)
        {
        case option_Create:
          throw option_error("missing value for 'c' option");
        case option_RegisteredEmail:
          throw option_error("missing value for 'e' option");
        case option_RegisteredUser:
          throw option_error("missing value for 'u' option");
        case option_RegistrationCode:
          throw option_error("missing value for 'r' option");
        case option_StartDate:
          throw option_error("missing value for 'd' option");
        case option_Type:
          throw option_error("missing value for 't' option");
        }
    }

  if (!locations_.RegisteredEmail)
    throw option_error("the 'e' option is mandatory");

  if (!locations_.RegisteredUser)
    throw option_error("the 'u' option is mandatory");
}
//#########################################################################
void license::COptions::parse_element (const char *element, int position, opsource source)
{
  size_t length = strlen(element);

  switch (state_)
    {
    case state_consume:
      non_options_.push_back(element);
      break;
    case state_option:
      if (length >= 2 && element[0] == '-' && element[1] == '-')
        {
          if (length == 2) {state_ = state_consume; return;}
          element += 2;
          const char *value = element;
          while (*value != 0 && *value != '=') ++value;
          if (*value == '=')
            {
              std::string selement(element, value - element), svalue(++value);

              parse_long_option(selement.c_str(), position, source);
              if (state_ != state_value)
                {
                  std::string error("the '"); error += element; error += "' option does not take a value";
                  throw option_error(error);
                }

              parse_value(svalue.c_str());
              state_ = state_option;
            }
          else
            {
              parse_long_option(element, position, source);
            }
        }
      else if (length >= 2 && element[0] == '-')
        {
          ++element;

          if (length > 2)
            {
              while (*element != 0)
                {
                  parse_short_option(*element, position, source);
                  ++element;

                  if (state_ == state_value && *element == '=')
                    {
                      parse_value(++element);
                      state_ = state_option;
                      break;
                    }
                  else if (state_ == state_value) finalize();
                }
            }
          else
            {
              parse_short_option(*element, position, source);
            }
        }
      else
        {
          non_options_.push_back(element);
        }
      break;
    case state_value:
      parse_value(element);
      state_ = state_option;
      break;
    }
}
//#########################################################################
void license::COptions::parse_short_option (char option, int position, opsource source)
{
  switch (option)
    {
    case 'c':
      if (source != source_cl) throw option_error("the 'c' option can only be used on the command line");
      if (locations_.Create)
        {
          throw option_error("the 'c' option is only allowed once");
        }
      openum_ = option_Create;
      options_.Create = !options_.Create;
      locations_.Create = position;
      return;
    case 'd':
      if (source != source_cl) throw option_error("the 'd' option can only be used on the command line");
      if (locations_.StartDate)
        {
          throw option_error("the 'd' option is only allowed once");
        }
      openum_ = option_StartDate;
      state_ = state_value;
      locations_.StartDate = position;
      return;
    case 'e':
      if (source != source_cl) throw option_error("the 'e' option can only be used on the command line");
      if (locations_.RegisteredEmail)
        {
          throw option_error("the 'e' option is only allowed once");
        }
      openum_ = option_RegisteredEmail;
      state_ = state_value;
      locations_.RegisteredEmail = position;
      return;
    case 'r':
      if (source != source_cl) throw option_error("the 'r' option can only be used on the command line");
      if (locations_.RegistrationCode)
        {
          throw option_error("the 'r' option is only allowed once");
        }
      openum_ = option_RegistrationCode;
      state_ = state_value;
      locations_.RegistrationCode = position;
      return;
    case 't':
      if (source != source_cl) throw option_error("the 't' option can only be used on the command line");
      if (locations_.Type)
        {
          throw option_error("the 't' option is only allowed once");
        }
      openum_ = option_Type;
      state_ = state_value;
      locations_.Type = position;
      return;
    case 'u':
      if (source != source_cl) throw option_error("the 'u' option can only be used on the command line");
      if (locations_.RegisteredUser)
        {
          throw option_error("the 'u' option is only allowed once");
        }
      openum_ = option_RegisteredUser;
      state_ = state_value;
      locations_.RegisteredUser = position;
      return;
    case 'h':
      if (source != source_cl) break;
      throw autoexcept(autothrow_help, const_usage);
    case '?':
      if (source != source_cl) break;
      throw autoexcept(autothrow_help, const_usage);
    }

  std::string error("unknown option: '"); error += option; error += "'";
  throw option_error(error);
}
//#########################################################################
void license::COptions::parse_long_option (const char *option, int position, opsource source)
{
  option = expand_long_name(option);

  if (strcmp(option, "create") == 0)
    {
      if (source != source_cl) throw option_error("the 'c' option is only allowed on the command line");
      if (locations_.Create)
        {
          throw option_error("the 'c' option is only allowed once");
        }
      openum_ = option_Create;
      locations_.Create = position;
      options_.Create = !options_.Create;
      return;
    }
  else if (strcmp(option, "date") == 0)
    {
      if (source != source_cl) throw option_error("the 'd' option is only allowed on the command line");
      if (locations_.StartDate)
        {
          throw option_error("the 'd' option is only allowed once");
        }
      openum_ = option_StartDate;
      locations_.StartDate = position;
      state_ = state_value;
      return;
    }
  else if (strcmp(option, "email") == 0)
    {
      if (source != source_cl) throw option_error("the 'e' option is only allowed on the command line");
      if (locations_.RegisteredEmail)
        {
          throw option_error("the 'e' option is only allowed once");
        }
      openum_ = option_RegisteredEmail;
      locations_.RegisteredEmail = position;
      state_ = state_value;
      return;
    }
  else if (strcmp(option, "registration") == 0)
    {
      if (source != source_cl) throw option_error("the 'r' option is only allowed on the command line");
      if (locations_.RegistrationCode)
        {
          throw option_error("the 'r' option is only allowed once");
        }
      openum_ = option_RegistrationCode;
      locations_.RegistrationCode = position;
      state_ = state_value;
      return;
    }
  else if (strcmp(option, "type") == 0)
    {
      if (source != source_cl) throw option_error("the 't' option is only allowed on the command line");
      if (locations_.Type)
        {
          throw option_error("the 't' option is only allowed once");
        }
      openum_ = option_Type;
      locations_.Type = position;
      state_ = state_value;
      return;
    }
  else if (strcmp(option, "user") == 0)
    {
      if (source != source_cl) throw option_error("the 'u' option is only allowed on the command line");
      if (locations_.RegisteredUser)
        {
          throw option_error("the 'u' option is only allowed once");
        }
      openum_ = option_RegisteredUser;
      locations_.RegisteredUser = position;
      state_ = state_value;
      return;
    }
  else if (source == source_cl && strcmp(option, "help") == 0)
    {
      throw autoexcept(autothrow_help, const_usage);
    }

  std::string error("unknown option '"); error += option; error += "'";
  throw option_error(error);
}
//#########################################################################
void license::COptions::parse_value (const char *value)
{
  switch (openum_)
    {
    case option_Create:
      break;
    case option_RegisteredEmail:
      {
        options_.RegisteredEmail = value;
      }
      break;
    case option_RegisteredUser:
      {
        options_.RegisteredUser = value;
      }
      break;
    case option_RegistrationCode:
      {
        options_.RegistrationCode = value;
      }
      break;
    case option_StartDate:
      {
        options_.StartDate = value;
      }
      break;
    case option_Type:
      {
        Type_enum evalue;

        if (strcmp(value, "full") == 0)
          {
            evalue = Type_Full;
          }
        else if (strcmp(value, "trial") == 0)
          {
            evalue = Type_Trial;
          }
        else
          {
            std::string error("'"); error += value; error += "' is an invalid value for the 't' option";
            throw option_error(error);
          }

        options_.Type = evalue;
      }
      break;
    }
}
//#########################################################################
const char* license::option_error::get_help_comment (void) const
  {
    return const_help_comment;
  }
//#########################################################################
namespace
  {
  const char* expand_long_name (const std::string &name)
  {
    std::string::size_type name_size = name.size();
    std::vector<const char*> matches;

    if (name_size <= 6 && name.compare("create") == 0)
      matches.push_back("create");

    if (name_size <= 4 && name.compare("date") == 0)
      matches.push_back("date");

    if (name_size <= 5 && name.compare("email") == 0)
      matches.push_back("email");

    if (name_size <= 12 && name.compare("registration") == 0)
      matches.push_back("registration");

    if (name_size <= 4 && name.compare("type") == 0)
      matches.push_back("type");

    if (name_size <= 4 && name.compare("user") == 0)
      matches.push_back("user");

    if (name_size <= 4 && name.compare("help") == 0)
      matches.push_back("help");

    if (matches.empty())
      {
        std::string error("unknown option '"); error += name; error += "'";
        throw license::option_error(error);
      }

    if (matches.size() == 1)
      {
        return matches[0];
      }

    std::string error("the option name '"); error += name; error += "' is ambiguous";
    throw license::option_error(error);
  }
} // end anonymous namespace
